{
  "authors": {
    "admin@admin.com": {
      "author": {
        "id": 1,
        "name": "Admin",
        "username": "admin",
        "email": "admin@admin.com",
        "password": "$2a$12$91xq.o5xSraKnadR0W4PC.4md4dS1HnngNsXxtVy31kvml4QXKqnS",
        "bio": "",
        "avatar": "",
        "social": {
          "twitter": "",
          "facebook": "",
          "github": "",
          "instagram": ""
        },
        "verified": true,
        "createdAt": "2021-11-14T19:33:50.855Z",
        "updatedAt": "2021-11-14T19:33:51.220Z",
        "role_id": 1,
        "setting_id": 1
      },
      "setting": {
        "id": 1,
        "site_title": "Admin Account",
        "site_tagline": "Compose a story",
        "site_email": "admin@letterpad.app",
        "site_url": "https://admin.letterpad.app",
        "site_footer": "",
        "site_description": "",
        "subscribe_embed": "",
        "social_twitter": "",
        "social_facebook": "",
        "social_instagram": "",
        "social_github": "",
        "displayAuthorInfo": 1,
        "cloudinary_key": "",
        "cloudinary_name": "",
        "cloudinary_secret": "",
        "menu": [
          {
            "label": "home",
            "original_name": "home",
            "slug": "home",
            "type": "tag"
          },
          {
            "label": "Page",
            "original_name": "Page",
            "slug": "letterpad-typography",
            "type": "page"
          }
        ],
        "css": "",
        "google_analytics": "UA-120251616-1",
        "theme": "hugo",
        "client_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiaWF0IjoxNjM2OTE4NDMxfQ.vZfAyynFkJynBP1Oui9t5aMhBEUzox7hP6DyOBBXBSY",
        "banner": "{\"src\":\"https://images.unsplash.com/photo-1579548122080-c35fd6820ecb?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=2850&q=80\",\"width\":1502,\"height\":900}",
        "site_logo": "{\"src\":\"/uploads/logo.png\",\"width\":200,\"height\":200}",
        "site_favicon": "{\"src\":\"/uploads/logo.png\",\"width\":200,\"height\":200}",
        "createdAt": "2021-11-14 19:33:51.210 +00:00",
        "updatedAt": "2021-11-14 19:33:51.210 +00:00"
      },
      "tags": [],
      "posts": [],
      "media": [
        {
          "id": 1,
          "name": "Blueberries",
          "url": "https://images.unsplash.com/photo-1473181488821-2d23949a045a?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1350&q=80",
          "width": 1350,
          "height": 900,
          "description": "Write a description about this image. You never know how this image can break the internet",
          "updatedAt": "2021-11-14 19:33:51.304 +00:00",
          "createdAt": "2021-11-14 19:33:51.304 +00:00",
          "author_id": 1
        },
        {
          "id": 2,
          "name": "I love the beach and its smell",
          "url": "https://images.unsplash.com/photo-1524654458049-e36be0721fa2?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1500&q=80",
          "width": 1350,
          "height": 900,
          "description": "Write a description about this image. You never know how this image can break the internet",
          "updatedAt": "2021-11-14 19:33:51.307 +00:00",
          "createdAt": "2021-11-14 19:33:51.307 +00:00",
          "author_id": 1
        }
      ]
    },
    "demo@demo.com": {
      "author": {
        "id": 2,
        "name": "Demo Author",
        "username": "demo",
        "email": "demo@demo.com",
        "password": "$2a$12$91xq.o5xSraKnadR0W4PC.4md4dS1HnngNsXxtVy31kvml4QXKqnS",
        "bio": "You can some information about yourself for the world to know you a little better.",
        "avatar": "https://images.unsplash.com/photo-1572478465144-f5f6573e8bfd?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=120&q=80",
        "social": {
          "twitter": "https://twitter.com",
          "facebook": "https://facebook.com",
          "github": "https://github.com",
          "instagram": "https://instagram.com"
        },
        "verified": true,
        "createdAt": "2021-11-14T19:33:51.205Z",
        "updatedAt": "2021-11-14T19:33:51.224Z",
        "role_id": 4,
        "setting_id": 2
      },
      "setting": {
        "id": 2,
        "site_title": "Demo Account",
        "site_tagline": "Compose a story",
        "site_email": "admin@letterpad.app",
        "site_url": "https://demo.letterpad.app",
        "site_footer": "",
        "site_description": "",
        "subscribe_embed": "",
        "social_twitter": "",
        "social_facebook": "",
        "social_instagram": "",
        "social_github": "",
        "displayAuthorInfo": 1,
        "cloudinary_key": "",
        "cloudinary_name": "",
        "cloudinary_secret": "",
        "menu": [
          {
            "label": "home",
            "original_name": "home",
            "slug": "home",
            "type": "tag"
          },
          {
            "label": "Page",
            "original_name": "Page",
            "slug": "letterpad-typography",
            "type": "page"
          }
        ],
        "css": "",
        "google_analytics": "UA-120251616-1",
        "theme": "hugo",
        "client_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwiaWF0IjoxNjM2OTE4NDMxfQ._ez3uZySA3kXPhRQXe64xJsS-SoE3J07o5fMfWP5rLI",
        "banner": "{\"src\":\"https://images.unsplash.com/photo-1579548122080-c35fd6820ecb?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=2850&q=80\",\"width\":1502,\"height\":900}",
        "site_logo": "{\"src\":\"/uploads/logo.png\",\"width\":200,\"height\":200}",
        "site_favicon": "{\"src\":\"/uploads/logo.png\",\"width\":200,\"height\":200}",
        "createdAt": "2021-11-14 19:33:51.214 +00:00",
        "updatedAt": "2021-11-14 19:33:51.214 +00:00"
      },
      "tags": [
        {
          "id": 1,
          "name": "Home",
          "desc": "",
          "slug": "home",
          "createdAt": "2021-11-14 19:33:51.232 +00:00",
          "updatedAt": "2021-11-14 19:33:51.232 +00:00",
          "author_id": 2
        },
        {
          "id": 2,
          "name": "first-post",
          "desc": "",
          "slug": "first-post",
          "createdAt": "2021-11-14 19:33:51.232 +00:00",
          "updatedAt": "2021-11-14 19:33:51.232 +00:00",
          "author_id": 2
        }
      ],
      "posts": [
        {
          "id": 1,
          "title": "Welcome to Letterpad",
          "html": "<p>We hope you will have a great writing experience while using Letterpad. This post will walk you through the basics of using Letterpad and publishing your first post.</p>\n<p>From the left side navigation menu, select posts and then click on <strong>New</strong> to write your first post. Your posts needs to be tagged so that you can attach one of those tag to the menu. By default, all posts will have the default tag - <strong>first-post</strong>. </p>\n<p>You will find the Publish option at the top right corner. Clicking that will open up a side menu where you can add a new tag or delete an existing tag.</p>\n<blockquote>\n  <p>Tags help in grouping your posts together and then you can have this tag in the navigation menu item. </p>\n</blockquote>\n<p>To set the navigation menu, go to the Navigation Menu item on the left side and click on <strong>New.</strong> Here you can add the label of the new navigation menu item and also select the tag for which you want the collection of posts to be displayed. You can also drag the menu items in the order you want them to be. </p>\n<blockquote>\n  <p>The first menu item in the navigation menu will always be Home.</p>\n</blockquote>\n<p>You can also create pages in the same way like posts, but pages dont have a tag. Since pages are static, you can directly add a page to the navigation menu.</p>\n<p>We are constantly working on making Letterpad CMS better, so if you have suggestions, visit out github page at <a href=\"https://github.com/letterpad/letterpad\">https://github.com/letterpad/letterpad</a> and create a issue or you can write us on Twitter at <a href=\"https://twitter.com/letterpad_cms\">https://twitter.com/letterpad_cms</a>.</p>\n<p>Thank you,</p>\n<p>Letterpad Team</p>",
          "html_draft": "",
          "excerpt": "You can use this space to write a small description about the topic. This will be helpful in SEO.",
          "cover_image": "https://images.unsplash.com/photo-1485487656106-d6aa01db3271?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=2812&q=80",
          "cover_image_width": 0,
          "cover_image_height": 0,
          "type": "post",
          "featured": false,
          "status": "published",
          "slug": "welcome-to-letterpad",
          "reading_time": "5 mins",
          "publishedAt": "2021-11-14T18:33:51.000Z",
          "scheduledAt": null,
          "updatedAt": "2021-11-14T19:33:51.269Z",
          "createdAt": "2021-11-14T18:33:51.000Z",
          "author_id": 2,
          "tags": [
            {
              "name": "Home",
              "desc": "",
              "slug": "home"
            },
            {
              "name": "first-post",
              "desc": "",
              "slug": "first-post"
            }
          ]
        },
        {
          "id": 2,
          "title": "Welcome to Letterpad",
          "html": "<p>We hope you will have a great writing experience while using Letterpad. This post will walk you through the basics of using Letterpad and publishing your first post.</p>\n<p>From the left side navigation menu, select posts and then click on <strong>New</strong> to write your first post. Your posts needs to be tagged so that you can attach one of those tag to the menu. By default, all posts will have the default tag - <strong>first-post</strong>. </p>\n<p>You will find the Publish option at the top right corner. Clicking that will open up a side menu where you can add a new tag or delete an existing tag.</p>\n<blockquote>\n  <p>Tags help in grouping your posts together and then you can have this tag in the navigation menu item. </p>\n</blockquote>\n<p>To set the navigation menu, go to the Navigation Menu item on the left side and click on <strong>New.</strong> Here you can add the label of the new navigation menu item and also select the tag for which you want the collection of posts to be displayed. You can also drag the menu items in the order you want them to be. </p>\n<blockquote>\n  <p>The first menu item in the navigation menu will always be Home.</p>\n</blockquote>\n<p>You can also create pages in the same way like posts, but pages dont have a tag. Since pages are static, you can directly add a page to the navigation menu.</p>\n<p>We are constantly working on making Letterpad CMS better, so if you have suggestions, visit out github page at <a href=\"https://github.com/letterpad/letterpad\">https://github.com/letterpad/letterpad</a> and create a issue or you can write us on Twitter at <a href=\"https://twitter.com/letterpad_cms\">https://twitter.com/letterpad_cms</a>.</p>\n<p>Thank you,</p>\n<p>Letterpad Team</p>",
          "html_draft": "",
          "excerpt": "You can use this space to write a small description about the topic. This will be helpful in SEO.",
          "cover_image": "https://images.unsplash.com/photo-1508341421810-36b8fc06075b?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=2867&q=80",
          "cover_image_width": 0,
          "cover_image_height": 0,
          "type": "post",
          "featured": false,
          "status": "published",
          "slug": "welcome-to-letterpad",
          "reading_time": "5 mins",
          "publishedAt": "2021-11-14T18:33:51.000Z",
          "scheduledAt": null,
          "updatedAt": "2021-11-14T19:33:51.274Z",
          "createdAt": "2021-11-14T18:33:51.000Z",
          "author_id": 2,
          "tags": [
            {
              "name": "Home",
              "desc": "",
              "slug": "home"
            },
            {
              "name": "first-post",
              "desc": "",
              "slug": "first-post"
            }
          ]
        },
        {
          "id": 3,
          "title": "Welcome to Letterpad",
          "html": "<p>We hope you will have a great writing experience while using Letterpad. This post will walk you through the basics of using Letterpad and publishing your first post.</p>\n<p>From the left side navigation menu, select posts and then click on <strong>New</strong> to write your first post. Your posts needs to be tagged so that you can attach one of those tag to the menu. By default, all posts will have the default tag - <strong>first-post</strong>. </p>\n<p>You will find the Publish option at the top right corner. Clicking that will open up a side menu where you can add a new tag or delete an existing tag.</p>\n<blockquote>\n  <p>Tags help in grouping your posts together and then you can have this tag in the navigation menu item. </p>\n</blockquote>\n<p>To set the navigation menu, go to the Navigation Menu item on the left side and click on <strong>New.</strong> Here you can add the label of the new navigation menu item and also select the tag for which you want the collection of posts to be displayed. You can also drag the menu items in the order you want them to be. </p>\n<blockquote>\n  <p>The first menu item in the navigation menu will always be Home.</p>\n</blockquote>\n<p>You can also create pages in the same way like posts, but pages dont have a tag. Since pages are static, you can directly add a page to the navigation menu.</p>\n<p>We are constantly working on making Letterpad CMS better, so if you have suggestions, visit out github page at <a href=\"https://github.com/letterpad/letterpad\">https://github.com/letterpad/letterpad</a> and create a issue or you can write us on Twitter at <a href=\"https://twitter.com/letterpad_cms\">https://twitter.com/letterpad_cms</a>.</p>\n<p>Thank you,</p>\n<p>Letterpad Team</p>",
          "html_draft": "",
          "excerpt": "You can use this space to write a small description about the topic. This will be helpful in SEO.",
          "cover_image": "https://images.unsplash.com/photo-1541372988432-74d8177a3944?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=2944&q=80",
          "cover_image_width": 0,
          "cover_image_height": 0,
          "type": "post",
          "featured": false,
          "status": "published",
          "slug": "welcome-to-letterpad",
          "reading_time": "5 mins",
          "publishedAt": "2021-11-14T18:33:51.000Z",
          "scheduledAt": null,
          "updatedAt": "2021-11-14T19:33:51.279Z",
          "createdAt": "2021-11-14T18:33:51.000Z",
          "author_id": 2,
          "tags": [
            {
              "name": "Home",
              "desc": "",
              "slug": "home"
            },
            {
              "name": "first-post",
              "desc": "",
              "slug": "first-post"
            }
          ]
        },
        {
          "id": 4,
          "title": "Letterpad Typography",
          "html": "<p>You may choose to use markdown or the inline editing toolbars for writing text. The toolbar can be found by writing a text and selecting it or by clicking the + icon on every new line. </p>\n<h1 id=\"h1heading1\">h1 Heading 1</h1>\n<h2 id=\"h2heading\">h2 Heading</h2>\n<h3 id=\"h3heading\">h3 Heading</h3>\n<h4 id=\"h4heading\">h4 Heading</h4>\n<h5 id=\"h5heading\">h5 Heading</h5>\n<h6 id=\"h6heading\">h6 Heading</h6>\n<h2 id=\"horizontalrules\">Horizontal Rules</h2>\n<hr />\n<h1 id=\"emphasis\">Emphasis</h1>\n<p><strong>This is bold text</strong></p>\n<p><strong>This is underlined text</strong></p>\n<p><em>This is italic text</em></p>\n<p>~~Strikethrough~~</p>\n<hr />\n<h2 id=\"blockquotes\">Blockquotes</h2>\n<blockquote>\n  <p>The blockquote element is used to indicate the quotation of a large section of text from another source.</p>\n</blockquote>\n<hr />\n<h2 id=\"lists\">Lists</h2>\n<ul>\n<li>Create a list by starting a line with +, - or * followed by a space.</li>\n<li>Sub-lists are made by tab:<ul>\n<li>Marker character change forces new list start:</li>\n<li>Ac tristique libero volutpat at</li>\n<li>Facilisis in pretium nisl aliquet</li>\n<li>Nulla volutpat aliquam velit</li></ul></li>\n<li>Very easy!</li>\n</ul>\n<h2 id=\"code\">Code</h2>\n<p>Inline <code>code</code> can be written by wrapping the text inside backticks `.</p>\n<p>You can write codeblock with syntax highlighting by two backticks.</p>\n<pre><code class=\"javascript language-javascript\">// Some comments\nvar a = 1;\nvar b = 2;\nvar sum = a + b;\ncosnole.log(sum); // 3\n</code></pre>\n<hr />\n<h2 id=\"embeds\">Embeds</h2>\n<p>You can embed spotify, youtube and gist links by just pasting the link.</p>\n<p><a href=\"https://gist.github.com/ajaxtown/f6b234dc10c42b32a503b574e3fc6b58\">https://gist.github.com/ajaxtown/f6b234dc10c42b32a503b574e3fc6b58</a></p>\n<h2 id=\"links\">Links</h2>\n<p>You can wrap <a href=\"http://google.com\">certain text with link</a> or just have the url <a href=\"http://google.com\">http://google.com</a> which will automatically convert into a link.</p>\n<h2 id=\"images\">Images</h2>\n<p><img src=\"https://images.unsplash.com/photo-1511497584788-876760111969?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1789&q=80\" alt=\"Smoky morning in Cascades\" /></p>",
          "html_draft": "",
          "excerpt": "You can use this space to write a small description about the topic. This will be helpful in SEO.",
          "cover_image": "https://images.unsplash.com/photo-1505682634904-d7c8d95cdc50?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1500&q=80",
          "cover_image_width": 0,
          "cover_image_height": 0,
          "type": "page",
          "featured": false,
          "status": "published",
          "slug": "letterpad-typography",
          "reading_time": "5 mins",
          "publishedAt": "2021-11-14T18:33:51.000Z",
          "scheduledAt": null,
          "updatedAt": "2021-11-14T19:33:51.283Z",
          "createdAt": "2021-11-14T18:33:51.000Z",
          "author_id": 2,
          "tags": []
        }
      ],
      "media": []
    },
    "abhisheksaha11@gmail.com": {
      "author": {
        "id": 3,
        "name": "Abhishek Saha",
        "username": "ajaxtown",
        "email": "abhisheksaha11@gmail.com",
        "password": "$2a$12$eA4NDZpAky.evqV7mM24gORMZBAJuCzw2./RlfMS/u5QRv2lYSDNK",
        "bio": "fgsdfsdf sfsfsdfsdf",
        "avatar": "",
        "social": {},
        "verified": true,
        "createdAt": "2021-05-22T06:47:49.000Z",
        "updatedAt": "2021-11-14T19:55:01.925Z",
        "role_id": 4,
        "setting_id": 7
      },
      "setting": {
        "id": 7,
        "site_title": "Ajaxtown",
        "site_tagline": "Compose a story",
        "site_email": "admin@letterpad.app",
        "site_url": "https://ajaxtown.letterpad.app",
        "site_footer": "",
        "site_description": "Noting down my experiences on various technical topics, mostly dealing with Javascript",
        "subscribe_embed": "",
        "social_twitter": "https://twitter.com/__abhisaha",
        "social_facebook": "",
        "social_instagram": "https://instagram.com/abhisaha.11",
        "social_github": "https://github.com/ajaxtown",
        "displayAuthorInfo": 1,
        "cloudinary_key": "524167117469375",
        "cloudinary_name": "abhisheksaha",
        "cloudinary_secret": "hvPN1BsdMAh-qwdwY7gVoTu5-m0",
        "menu": [
          {
            "slug": "home",
            "type": "tag",
            "label": "home",
            "original_name": "home"
          }
        ],
        "css": ".banner {\n  display: none;\n}\n.site-header,\n.brand-wrapper {\n  height: inherit !important;\n  background: none !important;\n  position: inherit !important;\n}\n\nh1.site-title {\n  font-size: var(--text-md) !important;\n  font-family: inherit !important;\n}\n\n.site-brand-text {\n   position: relative !important;\n   left: auto !important;\n   transform: translate(-0%,-0%) !important;\n   margin-bottom: 80px;\n}\n\n.site-brand-text .wrapper {\n  background: none !important;\n  color: var(--color-text) !important;\n}\n\n.post {\n  box-shadow: none !important;\n}\n@media (min-width: 767px) {\n  .post-feed {\n    display: flex !important;\n    flex-wrap: nowrap !important;\n    flex-direction: column !important;\n    grid-template-columns: none !important;\n    grid-gap: var(--space-lg) !important;\n  }\n\n  .post-card {\n    display: flex !important;\n    flex-direction: row !important;\n    flex-basis: auto !important;\n    min-height: 0 !important;\n  }\n  .post-card-content {\n    flex: inherit !important;\n    padding: var(--space-sm) !important;\n  }\n  .post-card-content-top {\n    padding: var(--space-sm) !important;\n  }\n  .post-card-image {\n    position: relative !important;\n    height: 200px !important;\n  }\n}\n.post-card-title {\n  font-family: system-ui !important;\n   font-size: var(--text-lg) !important;\n}\n\n@media (min-width: 767px) {\n  .post:nth-child(7n + 1) p {\n    font-size: inherit !important;\n  }\n  .post-card-image-link {\n    border-radius: inherit !important;\n    flex: none !important;\n  }\n  .post-card-image {\n    width: var(--xxsmall) !important;\n  }\n}\n/* .post:nth-child(7n + 1) .post-card-title {\n  font-size: var(--text-lg) !important;\n} */\n\n@media (min-width: 767px) {\n  .post:nth-child(7n + 1) p {\n    font-size: inherit !important;\n  }\n}\n\n.site-nav {\n  position: relative !important;\n}\n\n:root {\n  --color-bg: #fff !important;\n  --color-post-bg: #fff !important;\n  --color-text: #333 !important;\n}\n",
        "google_analytics": "UA-120251616-1",
        "theme": "hugo",
        "client_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MywiaWF0IjoxNjM2OTE5NzAxfQ.X2lx_GhhsHViG0tzfmCgafoLMT0azeyW1WuwCiDQOpM",
        "banner": "{\"src\":\"https://images.unsplash.com/photo-1619126939975-319ed53f071d?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MnwzMTU3NnwwfDF8c2VhcmNofDI5fHxncmFkaWVudCUyMGRhcmt8ZW58MHx8fHwxNjIxODUxMjAy&ixlib=rb-1.2.1&q=80&w=1080\",\"width\":5557,\"height\":3705}",
        "site_logo": "{\"src\":\"/uploads/logo.png\",\"width\":200,\"height\":200}",
        "site_favicon": "{\"src\":\"/uploads/logo.png\",\"width\":200,\"height\":200}",
        "createdAt": "2021-05-22 06:47:49.000 +00:00",
        "updatedAt": "2021-11-14 19:55:01.918 +00:00"
      },
      "tags": [
        {
          "id": 27,
          "name": "first-post",
          "desc": "",
          "slug": "first-post",
          "createdAt": "2021-11-14 19:55:01.939 +00:00",
          "updatedAt": "2021-11-14 19:55:01.939 +00:00",
          "author_id": 3
        },
        {
          "id": 28,
          "name": "javascript",
          "desc": "",
          "slug": "javascript",
          "createdAt": "2021-11-14 19:55:01.951 +00:00",
          "updatedAt": "2021-11-14 19:55:01.951 +00:00",
          "author_id": 3
        },
        {
          "id": 29,
          "name": "javascript",
          "desc": "",
          "slug": "javascript",
          "createdAt": "2021-11-14 19:55:01.951 +00:00",
          "updatedAt": "2021-11-14 19:55:01.951 +00:00",
          "author_id": 3
        },
        {
          "id": 30,
          "name": "home",
          "desc": "",
          "slug": "home",
          "createdAt": "2021-11-14 19:55:01.969 +00:00",
          "updatedAt": "2021-11-14 19:55:01.969 +00:00",
          "author_id": 3
        },
        {
          "id": 31,
          "name": "home",
          "desc": "",
          "slug": "home",
          "createdAt": "2021-11-14 19:55:01.971 +00:00",
          "updatedAt": "2021-11-14 19:55:01.971 +00:00",
          "author_id": 3
        },
        {
          "id": 32,
          "name": "home",
          "desc": "",
          "slug": "home",
          "createdAt": "2021-11-14 19:55:01.974 +00:00",
          "updatedAt": "2021-11-14 19:55:01.974 +00:00",
          "author_id": 3
        }
      ],
      "posts": [
        {
          "id": 25,
          "title": "Chaining Graphql Resolvers",
          "html": "<div class=\"lp-editor\" id=\"letterpad-editor-container\"><p>GraphQL resolvers can be easy to build, but difficult to get right. A resolver is a function that resolves a value for a field in a schema. There are multiple factors that play a vital role while resolving a particular field. For instance, lets say we have a query like this.</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\">query <span class=\"token punctuation\">{</span>\n  post<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n     title\n     body\n     status\n     url\n     metadata <span class=\"token punctuation\">{</span>\n        notes\n        history\n     <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>When the request comes in, we might want to validate the below points.</p>\n<ul>\n<li>Check if the user has the right access to read this post.</li>\n<li>If the user is authorized and is the author of this post, display additional metadata.</li>\n<li>While returning a valid post, add hostname to the url.</li>\n</ul>\n<h2>The Problem</h2>\n<p><figure><img src=\"https://images.unsplash.com/photo-1539876782331-cdcf975877af?crop=entropy&amp;cs=tinysrgb&amp;fit=max&amp;fm=jpg&amp;ixid=MnwzMTU3NnwwfDF8c2VhcmNofDh8fGphbSUyMHRyYWZmaWN8ZW58MHx8fHwxNjIxNzk5MzU2&amp;ixlib=rb-1.2.1&amp;q=80&amp;w=1080\" alt=\"Unsplash - Roshni Sidapara | https://unsplash.com/photos/h5M6LhYIDKU\" loading=\"lazy\" height=\"725\" width=\"1080\"><figcaption>Unsplash - Roshni Sidapara | https://unsplash.com/photos/h5M6LhYIDKU</figcaption></img></figure></p>\n<p>In nodejs world, express is a great library for routing and validations. So we can check all these details at the very begining through middlewares. However express will not have any idea on how to parse the graphql query to validate unless you add another middleware to parse the query and validate. This doesn&apos;t feel right because express will eventually handover the request to graphql which will anyways parse the query.</p>\n<p>When working with Graphql resolvers, we would want this validation to be close to the resolvers to understand how a request is processed rather than having the logic on express middlewares. The express middleware will be responsible to read the cookie or token from the request, decode, validate and add necessary information to the context. Doing so we will have appropriate information to do validations in the resolver.</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function-variable function\">post</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">parent<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">,</span> context</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>context<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// not authorized</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span>permission <span class=\"token operator\">!==</span> <span class=\"token string\">&quot;READ&quot;</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// no read access</span>\n\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span>displayMeta<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    args <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">,</span> displayMeta<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// more validations if required</span>\n  <span class=\"token keyword\">const</span> post <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">getPost</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> post<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>But this easily gets bloated with a lot of validation code for complex scenarios. You will see this kind of a validations being written in many resolvers. If you have to change certain business logic, you will have to touch too many parts of your code.</p>\n<hr>\n<h2>Solution: Chaining resolvers</h2>\n<p>By creating a chain of resolvers to satisfy individual parts of the overall problem, you will be able to compose an elegant workflow. Keeping business rules isolated helps in managing those rules hassle free and we can handle every concern individually &#x2014; adding effects declaratively.</p>\n<p><figure><img src=\"https://images.unsplash.com/photo-1421429167374-8fc8ab6d0f66?crop=entropy&amp;cs=tinysrgb&amp;fit=max&amp;fm=jpg&amp;ixid=MnwzMTU3NnwwfDF8c2VhcmNofDIxfHxnZWFyfGVufDB8fHx8MTYyMTc5ODk5Ng&amp;ixlib=rb-1.2.1&amp;q=80&amp;w=1080\" alt=\"Unsplash - Wayne Bishop | https://unsplash.com/photos/7YUW7fvIYoQ\" loading=\"lazy\" height=\"720\" width=\"1080\"><figcaption>Unsplash - Wayne Bishop | https://unsplash.com/photos/7YUW7fvIYoQ</figcaption></img></figure></p>\n<p>Chaining resolvers can be very useful in such scenarios. Your code can be vastly simplified into this.</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\">createPost<span class=\"token operator\">:</span> rootResolver\n                <span class=\"token punctuation\">.</span><span class=\"token function\">createResolver</span><span class=\"token punctuation\">(</span>checkReadAccess<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">createResolver</span><span class=\"token punctuation\">(</span>getPost<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">createResolver</span><span class=\"token punctuation\">(</span>addAuthorMeta<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">createResolver</span><span class=\"token punctuation\">(</span>addHostName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<p>This helps you in understanding the business logic without too much of implementation details. So, how can we create chainable resolvers ? First we will create the above resolvers and then figure out how can we chain them.</p>\n<p>The below resolver will take care of checking the read access for a request. Its small, testable and reusable.</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">checkReadAccess</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">parent<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">,</span> context</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token constant\">PERMISSION</span><span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;READ&quot;</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token function\">UnauthorizedError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> url<span class=\"token operator\">:</span> err<span class=\"token punctuation\">.</span>fieldName <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> args<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>Next let&apos;s build the resolver <strong>getPost</strong> which will take care of fetching a post.</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getPost</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">parent<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">,</span> context</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> post<span class=\"token operator\">:</span> <span class=\"token keyword\">await</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">getPost</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>Next lets build the <strong>checkAuthorMeta</strong> resolver that will take care of checking if the request has the right permissions for adding the meta data of an author.</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">checkAuthorMeta</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">parent<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">,</span> context</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token constant\">PERMISSION</span><span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;WRITE&quot;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      args <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token operator\">...</span>args<span class=\"token punctuation\">,</span>\n        post<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token operator\">...</span>args<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">,</span> \n          metadata <span class=\"token operator\">:</span> <span class=\"token keyword\">await</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">getAuthorMeta</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> args<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>And lastly, we need the <strong>addHostName</strong> resolver will take care of adding the hostname to the post url. Later you can add hostname for coverImage, authorImage, etc.</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addHostName</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">parent<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">,</span> context</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    args <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token operator\">...</span>args<span class=\"token punctuation\">,</span>\n        post<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token operator\">...</span>args<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">,</span>\n          url<span class=\"token operator\">:</span> context<span class=\"token punctuation\">.</span>host <span class=\"token operator\">+</span> args<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">.</span>url\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> args<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>Now that we have all the resolvers in place, its time o chain them. We need a funtion which allows us to create a resolver. So lets create a root resolver which will create a new resolver and also attach a  special method <code>createResolver</code> to chain with another resolver.</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">rootResolver</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">resolver</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> baseResolver <span class=\"token operator\">=</span> resolver<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// attach a new method to the base resolver to resolve the next resolver.</span>\n  baseResolver<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">createResolver</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">childResolver</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// The below method will resolve the chained resolver.</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">newResolver</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">root<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> newArgs <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">resolver</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">childResolver</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> newArgs<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">rootResolver</span><span class=\"token punctuation\">(</span>newResolver<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> baseResolver<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<p>The above function takes a resolver, attaches a method <em>createResolver</em> to it which will resolve the next resolver passed to it along with new arguments. Once we have the above method in place, we will be able to use this method to chain resolvers.</p>\n<hr>\n<p>And that is how we can create a nice pipeline for a feature thats is expressive and easy to understand. I personally like to split the resolvers into their concerning effects. It also becomes easier to write schema quickly in a way that improves server side development. These small pure functions also benefit from being reusable and testable. I hope you this post has helped you with some ideas to build your next graphql API.</p>\n</hr></hr></div>",
          "html_draft": "",
          "excerpt": "By creating a chain of resolvers to satisfy individual parts of the overall problem, you will be able to compose an elegant workflow.",
          "cover_image": "https://images.unsplash.com/photo-1560834111-9ada80e8e6cd?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MnwzMTU3NnwwfDF8c2VhcmNofDEwMnx8YmlrZSUyMGNoYWlufGVufDB8fHx8MTYyMTg0OTYwMQ&ixlib=rb-1.2.1&q=80&w=1080",
          "cover_image_width": 3648,
          "cover_image_height": 2432,
          "type": "post",
          "featured": false,
          "status": "published",
          "slug": "chaining-graphql-resolvers",
          "reading_time": "5 min read",
          "publishedAt": "2021-05-24T09:46:58.000Z",
          "scheduledAt": null,
          "updatedAt": "2021-11-14T19:55:01.928Z",
          "createdAt": "2021-05-22T06:47:49.000Z",
          "author_id": 3,
          "tags": [
            {
              "name": "first-post",
              "desc": "",
              "slug": "first-post"
            },
            {
              "name": "javascript",
              "desc": "",
              "slug": "javascript"
            },
            {
              "name": "home",
              "desc": "",
              "slug": "home"
            }
          ]
        },
        {
          "id": 26,
          "title": "Letterpad Typography",
          "html": "<div class='lp-editor' id='letterpad-editor-container'><p>You may choose to use markdown or the inline editing toolbars for writing text. The toolbar can be found by writing a text and selecting it or by clicking the + icon on every new line.</p>\n<h1>h1 Heading 1</h1>\n<h2>h2 Heading</h2>\n<h3>h3 Heading</h3>\n<h4>h4 Heading</h4>\n<h5>h5 Heading</h5>\n<h6>h6 Heading</h6>\n<h2>Horizontal Rules</h2>\n<hr>\n<h1>Emphasis</h1>\n<p><strong>This is bold text</strong></p>\n<p><strong>This is underlined text</strong></p>\n<p><em>This is italic text</em></p>\n<p><s>Strikethrough</s></p>\n<hr>\n<h2>Blockquotes</h2>\n<blockquote>\n<p>Blockquotes can also be nested...</p>\n<blockquote>\n<p>...by using additional greater-than signs right next to each other...</p>\n<blockquote>\n<p>...or with spaces between arrows.</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<hr>\n<h2>Lists</h2>\n<ul>\n<li>Create a list by starting a line with +, - or * followed by a space.</li>\n<li>Sub-lists are made by tab:\n<ul>\n<li>Marker character change forces new list start:\n<ul>\n<li>Ac tristique libero volutpat at</li>\n<li>Facilisis in pretium nisl aliquet</li>\n<li>Nulla volutpat aliquam velit</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Very easy!</li>\n</ul>\n<h2>Code</h2>\n<p>Inline <code>code</code> can be written by wrapping the text inside backticks `.</p>\n<p>You can write codeblock with syntax highlighting by two backticks.</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Some comments</span>\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> sum <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\ncosnole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\n\n</code></pre>\n<hr>\n<h2>Embeds</h2>\n<p>You can embed spotify, youtube and gist links by just pasting the link.</p>\n<iframe width=\"100%\" height=\"200px\" frameBorder=\"0\" src=\"data:text/html;base64,PGh0bWw+PGhlYWQ+PGJhc2UgdGFyZ2V0PSJfcGFyZW50Ij48c3R5bGU+KnsgZm9udC1zaXplOjEycHg7IH0gYm9keSB7IG1hcmdpbjogMDsgfSAuZ2lzdCAuYmxvYi13cmFwcGVyLmRhdGEgeyBtYXgtaGVpZ2h0OjE1MHB4OyBvdmVyZmxvdzphdXRvOyB9PC9zdHlsZT48L2hlYWQ+PGJvZHk+PHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vZjZiMjM0ZGMxMGM0MmIzMmE1MDNiNTc0ZTNmYzZiNTguanMiPjwvc2NyaXB0PjwvYm9keT48L2h0bWw+\" ></iframe>\n<h2>Tables</h2>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Option</th>\n<th style=\"text-align:left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">data</td>\n<td style=\"text-align:left\">path to data files to supply the data that will be passed into templates.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">engine</td>\n<td style=\"text-align:left\">engine to be used for processing templates. Handlebars is the default.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ext</td>\n<td style=\"text-align:left\">extension to be used for dest files.</td>\n</tr>\n</tbody>\n</table>\n<p>Right aligned columns</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:right\">Option</th>\n<th style=\"text-align:right\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:right\">data</td>\n<td style=\"text-align:right\">path to data files to supply the data that will be passed into templates.</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">engine</td>\n<td style=\"text-align:right\">engine to be used for processing templates. Handlebars is the default.</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">ext</td>\n<td style=\"text-align:right\">extension to be used for dest files.</td>\n</tr>\n</tbody>\n</table>\n<h2>Links</h2>\n<p>You can wrap <a href=\"http://google.com\">certain text with link</a> or just have the url <a href=\"http://google.com\">http://google.com</a> which will automatically convert into a link.</p>\n<h2>Images</h2>\n<p><figure><img src=\"https://images.unsplash.com/photo-1511497584788-876760111969?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1789&amp;q=80\" alt=\"Smoky morning in Cascades\"><figcaption>Smoky morning in Cascades</figcaption></figure></p>\n<p>You can also highlight newly added text by wrapping the text between two ++ followed by a space.\n++This is a newly added text++</p>\n</div>",
          "html_draft": "You may choose to use markdown or the inline editing toolbars for writing text. The toolbar can be found by writing a text and selecting it or by clicking the \\+ icon on every new line. \n# h1 Heading 1\n\n\n## h2 Heading\n\n\n### h3 Heading\n\n\n#### h4 Heading\n\n\n##### h5 Heading\n\n\n###### h6 Heading\n\n\n## Horizontal Rules\n\n---\n# Emphasis\n\n  **This is bold text**\n\n  __This is underlined text__\n\n  _This is italic text_\n\n  ~~Strikethrough~~\n\n---\n\n## Blockquotes\n\n\n> Blockquotes can also be nested...\n> > ...by using additional greater\\-than signs right next to each other...\n> > > ...or with spaces between arrows.\n\n---\n\n## Lists\n\n* Create a list by starting a line with \\+, \\- or \\* followed by a space.\n* Sub\\-lists are made by tab:\n   * Marker character change forces new list start:\n      * Ac tristique libero volutpat at\n      * Facilisis in pretium nisl aliquet\n      * Nulla volutpat aliquam velit\n* Very easy\\!\n\n\n## Code\n\n  Inline `code` can be written by wrapping the text inside backticks \\`.\n\n  You can write codeblock with syntax highlighting by two backticks.\n\n```javascript\n  // Some comments\n  var a = 1;\n  var b = 2;\n  var sum = a + b;\n  cosnole.log(sum); // 3\n\n```\n\n---\n\n## Embeds\n\n  You can embed spotify, youtube and gist links by just pasting the link.\n\n\n  [https://gist.github.com/ajaxtown/f6b234dc10c42b32a503b574e3fc6b58](https://gist.github.com/ajaxtown/f6b234dc10c42b32a503b574e3fc6b58)\n\n## Tables\n\n| Option | Description |\n|:--- |:--- |\n| data | path to data files to supply the data that will be passed into templates. |\n| engine | engine to be used for processing templates. Handlebars is the default. |\n| ext | extension to be used for dest files. |\n\n  Right aligned columns\n\n| Option | Description |\n| ---:| ---:|\n| data | path to data files to supply the data that will be passed into templates. |\n| engine | engine to be used for processing templates. Handlebars is the default. |\n| ext | extension to be used for dest files. |\n\n\n## Links\n\n  You can wrap [certain text with link](http://google.com) or just have the url [http://google.com](http://google.com) which will automatically convert into a link.\n\n## Images\n\n\n\n  You can also highlight newly added text by wrapping the text between two \\+\\+ followed by a space.\n  ++This is a newly added text++",
          "excerpt": "You can use this space to write a small description about this page. This will be helpful in SEO.",
          "cover_image": "https://images.unsplash.com/photo-1505682634904-d7c8d95cdc50?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1500&q=80",
          "cover_image_width": 1482,
          "cover_image_height": 900,
          "type": "page",
          "featured": false,
          "status": "published",
          "slug": "letterpad-typography",
          "reading_time": "2 min read",
          "publishedAt": "2021-05-24T18:04:16.000Z",
          "scheduledAt": null,
          "updatedAt": "2021-11-14T19:55:01.932Z",
          "createdAt": "2021-05-22T06:47:49.000Z",
          "author_id": 3,
          "tags": []
        },
        {
          "id": 27,
          "title": "Abusing High Order Components in React",
          "html": "<div class=\"lp-editor\" id=\"letterpad-editor-container\"><p>I have been abusing the usage of High Order Components(HOC) in my last two projects. Its a great way to enhance your components and also its a nice workflow to have. You can combine  multiple HOCs together to build a powerful feature. By doing so, you can have a nice separation of concern.</p>\n<p>To make our development faster, we  use libraries which provide various functionalities as a HOC. Redux is a great example for this. It connects the global store with our application, and provides us with special methods like <code>dispatch</code> to make changes to the store...</p>\n<h2>Concerns:</h2>\n<p>A high order component is a function which takes a component, enhances it and returns us a new component which may contain additional helper functions or a new behaviour. Since this composition happens behind the scenes, it can be risky at times and might be difficult to troubleshoot when something goes wrong.</p>\n<p><figure><img src=\"https://images.unsplash.com/photo-1493019352063-500af484329e?crop=entropy&amp;cs=tinysrgb&amp;fit=max&amp;fm=jpg&amp;ixid=MnwzMTU3NnwwfDF8c2VhcmNofDExOHx8Y29sb3JzfGVufDB8fHx8MTYyMTc5NzAwNw&amp;ixlib=rb-1.2.1&amp;q=80&amp;w=1080\" alt=\"Unsplash - Anonymous\" loading=\"lazy\" height=\"720\" width=\"1080\"><figcaption>Unsplash - Anonymous</figcaption></img></figure></p>\n<p>Lets look at the below code on how HOC works.</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> withPostData <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">&apos;./hoc/withPostData&apos;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Post</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> data<span class=\"token punctuation\">,</span> loading <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>loading<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>Loader<span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">&gt;</span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">.</span>html<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">.</span>author<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">withPostData</span><span class=\"token punctuation\">(</span>Post<span class=\"token punctuation\">)</span>\n\n</code></pre>\n<p>In the above example we wrap a <strong>Post</strong> component with  <strong>withPostData</strong> hoc and this gives us two additional property  <strong>data</strong> and <strong>loading</strong>. Now our component only have to take care of rendering this data. It is our hoc&apos;s responsibility to try different mechanism of fetching the data, either from localStorage, some different endpoint, etc.  Our <strong>withPostData</strong> hoc looks something like this.</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">withPostData</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">WrappedComponent</span> <span class=\"token operator\">=&gt;</span> <span class=\"token parameter\">props</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span> \n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>data<span class=\"token punctuation\">,</span> setData<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>loading<span class=\"token punctuation\">,</span> setLoading<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> postUrl <span class=\"token operator\">=</span> <span class=\"token function\">getSlugFromUrl</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">axios</span><span class=\"token punctuation\">(</span>postUrl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setData</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setLoading</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>postUrl<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>WrappedComponent\n      <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span>\n      loading<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>loading<span class=\"token punctuation\">}</span> <span class=\"token comment\">// additional property</span>\n      data<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">}</span>       <span class=\"token comment\">// additional property</span>\n    <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<p>This works great. We correctly get the loading state and render the data when the loading has finished.</p>\n<p>Now we have a new requirement.  We would like to display some additional meta data like tags just after the title of the post. So we can again wrap our component with another hoc. Since hocs can be reused, its a good idea to keep them separate. Lets call this hoc as <em>withPostMeta.</em></p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">withPostMeta</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">WrappedComponent</span> <span class=\"token operator\">=&gt;</span> <span class=\"token parameter\">props</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span> \n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>data<span class=\"token punctuation\">,</span> setData<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>loading<span class=\"token punctuation\">,</span> setLoading<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> postUrl <span class=\"token operator\">=</span> <span class=\"token function\">getSlugFromUrl</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">axios</span><span class=\"token punctuation\">(</span>postUrl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setData</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setLoading</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>postUrl<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>WrappedComponent\n      <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span>\n      loading<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>loading<span class=\"token punctuation\">}</span> <span class=\"token comment\">// additional property</span>\n      metaData<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">}</span>   <span class=\"token comment\">// additional property</span>\n    <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<p>This hoc is going to add two properties <em>metaData  loading</em>. So now our code would look  like this.</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> withPostData<span class=\"token punctuation\">,</span> withMetaData <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">&apos;./hoc&apos;</span>\n\n<span class=\"token comment\">//  a problem here</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Post</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> metaData<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> loading <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>loading<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>Loader<span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">&gt;</span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">.</span>html<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">.</span>author<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">withMetaData</span><span class=\"token punctuation\">(</span><span class=\"token function\">withPostData</span><span class=\"token punctuation\">(</span>Post<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<p>But now we have a problem. Both the HOC&apos;s provides additional properties but one  has the same name (<em>loading)</em> in both the HOC&apos;s. So depending on the order of how you compose the hoc, one will override the other hoc&apos;s property. In this case Post will always recieve the loading state from the <em>withPostData</em> and it will never know if the loading state of <em>withMetaData</em></p>\n<p>If your using external libraries, we have no control on what happens behind the scenes. There is a possibility that one can override the properties of other Hocs. The only way to avoid this is to be mindful while developing libraries or writing your own.</p>\n<h2>How can we fix this ?</h2>\n<p><figure><img src=\"https://images.unsplash.com/photo-1615746363486-92cd8c5e0a90?crop=entropy&amp;cs=tinysrgb&amp;fit=max&amp;fm=jpg&amp;ixid=MnwzMTU3NnwwfDF8c2VhcmNofDI0fHxmaXh8ZW58MHx8fHwxNjIxNzk3MDkz&amp;ixlib=rb-1.2.1&amp;q=80&amp;w=1080\" alt=\"Unsplash - Anonymous\" loading=\"lazy\" height=\"718\" width=\"1080\"><figcaption>Unsplash - Anonymous</figcaption></img></figure></p>\n<p>You can follow how redux does it with <em>mapDispatchToProps.</em> You may develop hoc which accepts two arguments, the component and a function <em>propsMapper</em> which is going to map the hoc data with the keys that you provide. So with that, our <em>withPostData</em> HOC will look like this.</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">withPostData</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">WrappedComponent<span class=\"token punctuation\">,</span> propsMapper</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token parameter\">props</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span> \n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>data<span class=\"token punctuation\">,</span> setData<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>loading<span class=\"token punctuation\">,</span> setLoading<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> postUrl <span class=\"token operator\">=</span> <span class=\"token function\">getSlugFromUrl</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">axios</span><span class=\"token punctuation\">(</span>postUrl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setData</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setLoading</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>postUrl<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// does the mapping here</span>\n  <span class=\"token keyword\">const</span> newProps <span class=\"token operator\">=</span> <span class=\"token function\">propsMapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">,</span> loading<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>WrappedComponent\n      <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>newProps<span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<p>So, now we can use it like this.</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// create a mapper function</span>\n<span class=\"token keyword\">const</span> propsMapper <span class=\"token operator\">=</span> <span class=\"token function\">propsMapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">,</span> loading<span class=\"token punctuation\">}</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    postData<span class=\"token operator\">:</span> data<span class=\"token punctuation\">,</span>\n    postLoading<span class=\"token operator\">:</span> loading\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Post</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>postData<span class=\"token punctuation\">,</span> postLoading<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//.... render the post</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// pass the mapper function as the second argument.</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">withPostData</span><span class=\"token punctuation\">(</span>Post<span class=\"token punctuation\">,</span> propsMapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<p>You may also use <strong>renderProps</strong>, but I feel nesting in render props can be very confusing to understand. Here is an example.</p>\n<pre class=\"language-markup\"><code class=\"language-markup\">return (\n  &lt;Title\n    render={titleProps =&gt; (\n      &lt;Subtitle\n        render={subtitleProps =&gt; (\n          &lt;Section\n            render={sectionProps =&gt; (\n              // ...\n            )}\n          /&gt;\n        )}\n      /&gt;\n    )}\n  /&gt;\n);\n\n</code></pre>\n<h2>Conclusion</h2>\n<p>Hoc is not an antipattern. This post only highlights how hoc can go wrong if you do not pay attention to naming the props. It is always better to have property names which are not generic or by implementing the <em>propsMapper</em>. By doing so, we reduce the chances of having conflicting properties. I hope this post will help you in building hoc&apos;s in a more effective way without the problem of property conflicts.</p>\n</div>",
          "html_draft": "",
          "excerpt": "High Order Components are a great way to enhance your components. You can combine  multiple HOCs together to build a powerful feature. ",
          "cover_image": "https://images.unsplash.com/photo-1607510046949-fc356a9b4a94?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MnwzMTU3NnwwfDF8c2VhcmNofDY3fHxoaWdofGVufDB8fHx8MTYyMTg0OTc0Nw&ixlib=rb-1.2.1&q=80&w=1080",
          "cover_image_width": 2915,
          "cover_image_height": 1943,
          "type": "post",
          "featured": false,
          "status": "published",
          "slug": "abusing-high-order-components-in-react",
          "reading_time": "5 min read",
          "publishedAt": "2021-05-24T09:49:46.000Z",
          "scheduledAt": null,
          "updatedAt": "2021-11-14T19:55:01.937Z",
          "createdAt": "2021-05-22T06:55:53.000Z",
          "author_id": 3,
          "tags": [
            {
              "name": "javascript",
              "desc": "",
              "slug": "javascript"
            },
            {
              "name": "home",
              "desc": "",
              "slug": "home"
            }
          ]
        },
        {
          "id": 28,
          "title": "Do we need Redux ?",
          "html": "<div class=\"lp-editor\" id=\"letterpad-editor-container\"><p>In the frontend world, while developing a single page application (SPA), we add lots of complexities for a better user experience. Since SPA is all about performance and responsive UI updates, we need to have a single source of truth of our server responses and cached data, as well as locally created data that has not yet been persisted to the server.</p>\n<p>Managing this ever-changing state is hard. We perform optimistic updates, meaning changing different parts of  UI even before the server has accepted the change is another level of complexity. We then also have to think what if the server rejects the change ? We will have to revert the changes that we did. Now imagine this for a series of asynchronous events. To handle all these complexties, we need to have a single source of truth which our UI components have to obey. We call this the state of our application.</p>\n<h2>What does Redux solve ?</h2>\n<p><figure><img src=\"https://res.cloudinary.com/abhisheksaha/image/upload/v1584111575/blog-images/wfxfuno6d4moc95ncgpv.jpg\" alt=\"Photo by Randy Fath on Unsplash\" loading=\"lazy\" height=\"800\" width=\"1200\"><figcaption>Photo by Randy Fath on Unsplash</figcaption></img></figure></p>\n<p>Redux is used mostly for application state management. Redux maintains the state of an entire application in a single immutable state tree (object), which can&apos;t be changed directly. When something changes, a new object is created using action creators and reducers and then the new store pushes this change to the react components which need the update. The problem solved by Redux is the containment of all state changes, rather than having a large collection of small state changes scattered in your code in individual React components.</p>\n<p>By localizing state changes into one single store, it becomes easy not only to share data between different React components but also to mange the state. Redux attempts to make state mutations predictable by imposing certain restrictions on how and when updates can happen. From Redux docs, there are three principles that needs to be followed.</p>\n<ol>\n<li>Single source of truth</li>\n<li>State is read-only</li>\n<li>Changes are made with pure functions</li>\n</ol>\n<p>These principles make sure that you dont mutate the state of your application. The concept of Redux is really good but probably we can have something more slim than Redux without the heavy learning curve using the concepts that React provides.</p>\n<h2>How does redux work ?</h2>\n<p>The concept of redux is simple. We define the initial state of the application in Redux. Depending on various user actions or behaviour of our application, we dispatch actions. Actions contains information about the type of the action along with data. It then reaches reducers (pure functions) which is responsible to update store without mutating the store. Once the store has updated, the new updates are then received by the appropriate React components. Lets see an example.</p>\n<p>There is a todo list where you can add a todo item and remove a todo item. When the user writes a new todo and clicks add, a click event is triggered and then the below workflow proceeds.</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\">Click <span class=\"token parameter\">Event</span> <span class=\"token operator\">=&gt;</span> Action <span class=\"token parameter\">dispatched</span> <span class=\"token operator\">=&gt;</span> <span class=\"token parameter\">Reducer</span> <span class=\"token operator\">=&gt;</span> Store <span class=\"token parameter\">updates</span> <span class=\"token operator\">=&gt;</span> <span class=\"token constant\">UI</span> updates\n\n</code></pre>\n<h2>Do we need Redux ?</h2>\n<p><figure><img src=\"https://res.cloudinary.com/abhisheksaha/image/upload/v1584111576/blog-images/r6mxchtojxek6w2zd1eb.jpg\" alt=\"Photo by Tim Stief on Unsplash\" loading=\"lazy\" height=\"802\" width=\"1200\"><figcaption>Photo by Tim Stief on Unsplash</figcaption></img></figure></p>\n<p>There is no one answer to this question. There is a problem and redux solves it. However, with the new concepts of React and the constantly evolving API, we can take advantage of React&apos;s concepts to build our own Redux like library which can be much much slimmer than Redux by cutting down the additional features which we probably don&apos;t need. After working with Redux for almost 3 years, I am slowly getting dettached from Redux in favour of other alternatives which are easy to understand and can be tuned as per our requirements.</p>\n<p>Based on the problems we discussed above, we will build our own Redux library using React&apos;s context API and hooks. Since this post is exceeding the average metal capacity to stack so much information in our brains, I will write it in my next blog post.</p>\n</div>",
          "html_draft": "",
          "excerpt": "When developing a single page application, we need a way to persist data in state that can be used by our application. Redux helps us in maintaining this state.",
          "cover_image": "https://images.unsplash.com/photo-1521587760476-6c12a4b040da?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MnwzMTU3NnwwfDF8c2VhcmNofDcxfHxzdG9yYWdlfGVufDB8fHx8MTYyMTg0OTk2NA&ixlib=rb-1.2.1&q=80&w=1080",
          "cover_image_width": 4744,
          "cover_image_height": 3163,
          "type": "post",
          "featured": false,
          "status": "published",
          "slug": "do-we-need-redux",
          "reading_time": "4 min read",
          "publishedAt": "2021-05-24T09:52:57.000Z",
          "scheduledAt": null,
          "updatedAt": "2021-11-14T19:55:01.943Z",
          "createdAt": "2021-05-22T06:57:56.000Z",
          "author_id": 3,
          "tags": [
            {
              "name": "javascript",
              "desc": "",
              "slug": "javascript"
            },
            {
              "name": "home",
              "desc": "",
              "slug": "home"
            }
          ]
        },
        {
          "id": 29,
          "title": "Building our own store management library like Redux",
          "html": "<div class=\"lp-editor\" id=\"letterpad-editor-container\"><p>In my previous blog post, I explained why we need a state management library like Redux and little bit of how Redux works. In this blog post I will share how we can build a redux-like library with the help of the concepts provided by React.</p>\n<p>React comes with hooks and also it has a powerful context API. We are going to take advantage of these two features and build a state management system. This post expects you to have little knowledge of  React hooks and context API.</p>\n<p><figure><img src=\"https://res.cloudinary.com/abhisheksaha/image/upload/v1584111578/blog-images/h441w9mxxf3y2j7dpdzs.jpg\" alt=\"Photo by Clark Street Mercantile on Unsplash\" loading=\"lazy\" height=\"801\" width=\"1200\"><figcaption>Photo by Clark Street Mercantile on Unsplash</figcaption></img></figure></p>\n<h2>What is React context ?</h2>\n<blockquote>\n<p>Context provides a way to pass data through the component tree without having to pass props down manually at every level.<br>\nThis is exactly what we need. Context solves the problem of sharing data between different components. So we can create a global store which we will keep in the context along with a dispatch function.</br></p>\n</blockquote>\n<p>Before we jump into creating a store, lets code our app first and then go backwards on creating the global store.</p>\n<h2>Application - Counter</h2>\n<p>We are going to develop a simple counter and use three components.</p>\n<ul>\n<li>Main app component - App.js</li>\n<li>Display counter - Counter.js</li>\n<li>Increment counter - IncrementCounter.js</li>\n</ul>\n<p>We will be incrementing the counter from a different component and see it getting updated in the Counter.js component. So lets go ahead and create these three components.</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">&quot;react&quot;</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/**\n * We will create the below functions later.\n */</span>\n<span class=\"token keyword\">import</span> StoreProvider<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useGlobalStore <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">&quot;./store&quot;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// App component</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>StoreProvider<span class=\"token operator\">&gt;</span>\n      <span class=\"token operator\">&lt;</span>IncrementCounter <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n      <span class=\"token operator\">&lt;</span>Counter <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>StoreProvider<span class=\"token operator\">&gt;</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Counter component to display the count</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Counter</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>store<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useGlobalStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    \n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">&gt;</span> Counter<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>store<span class=\"token punctuation\">.</span>counter<span class=\"token punctuation\">}</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// IncrementCounter component</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">IncrementCounter</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>store<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useGlobalStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">add</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> counter <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span>counter<span class=\"token punctuation\">;</span>\n      <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n         type<span class=\"token operator\">:</span> <span class=\"token string\">&apos;INCREMENT_COUNTER&apos;</span><span class=\"token punctuation\">,</span>\n         payload<span class=\"token operator\">:</span> counter <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>add<span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>Increment counter<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>In the above snippet, whenever we click the button, the dispatcher triggers an action which is received by the reducer. The reducer is then responsible to update the global store. So lets go ahead and create a reducer.</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> initialState <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> counter<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">reducer</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span>action</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">&quot;INCREMENT_COUNTER&quot;</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span> counter<span class=\"token operator\">:</span> action<span class=\"token punctuation\">.</span>payload <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>Now that our app is ready, lets complete the missing parts, **StoreProvider **and <strong>useGlobalStore</strong>.</p>\n<h2>Creating a Provider with Context API</h2>\n<p><figure><img src=\"https://res.cloudinary.com/abhisheksaha/image/upload/v1584111579/blog-images/nyce8dmufdk3oooxuzcm.jpg\" alt=\"Photo by Manuel Will on Unsplash\" loading=\"lazy\" height=\"800\" width=\"1200\"><figcaption>Photo by Manuel Will on Unsplash</figcaption></img></figure></p>\n<p>Context provides us with a provider and consumer. We can use the provider to pass data and then using the consumer, we can consume this data from any component. So first, lets create a context.</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> initialState <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>counter<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">dispatch</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> GlobalStateContext <span class=\"token operator\">=</span> <span class=\"token function\">createContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>initialState<span class=\"token punctuation\">,</span>dispatch<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<p>Now that we have a context, lets create a provider. The provider will be at the top level and we will wrap our application inside this provider. So our application will be available as <strong>props.children</strong>.</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useReducer<span class=\"token punctuation\">,</span> createContext <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">&quot;react&quot;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> reducer <span class=\"token keyword\">from</span> <span class=\"token string\">&quot;./reducer&quot;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> initialState <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>counter<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">dispatch</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> GlobalStateContext <span class=\"token operator\">=</span> <span class=\"token function\">createContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>initialState<span class=\"token punctuation\">,</span>dispatch<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">StoreProvider</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// make globalState and dispatch available to all components</span>\n  <span class=\"token keyword\">const</span> value <span class=\"token operator\">=</span> <span class=\"token function\">useReducer</span><span class=\"token punctuation\">(</span>reducer<span class=\"token punctuation\">,</span> initialState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>GlobalStateContext<span class=\"token punctuation\">.</span>Provider value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>\n      <span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>GlobalStateContext<span class=\"token punctuation\">.</span>Provider<span class=\"token operator\">&gt;</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>Notice the usage of <strong>useReducer</strong> from React. We passed the reducer and the initialState  to  <strong>useReducer</strong>, which gives us the value (array) containing the store and a dispatch function. We then pass this value to the provider so that we can access it from any child component.</p>\n<h2>Creating a Consumer</h2>\n<p><figure><img src=\"https://res.cloudinary.com/abhisheksaha/image/upload/v1584111579/blog-images/dkegxfmfiyl23b76py3n.jpg\" alt=\"Photo by Manuel Will on Unsplash\" loading=\"lazy\" height=\"802\" width=\"1200\"><figcaption>Photo by Manuel Will on Unsplash</figcaption></img></figure></p>\n<p>Lets create a  hook that can access the value of the context. React gives us the method <strong>useContext.</strong> We just need to pass the <strong>GlobalStateContext</strong> to this.</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useContext <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">&quot;react&quot;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useGlobalStore</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">useContext</span><span class=\"token punctuation\">(</span>GlobalStateContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<p>Now you can access the global store from any component just like this:</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>store<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useGlobalStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<p>Combining everything together, our complete app will look like this.</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useContext<span class=\"token punctuation\">,</span> useReducer<span class=\"token punctuation\">,</span> createContext  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">&quot;react&quot;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> initialState <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> counter<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">dispatch</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> GlobalStateContext <span class=\"token operator\">=</span> <span class=\"token function\">createContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>initialState<span class=\"token punctuation\">,</span>dispatch<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">reducer</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span>action</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">&quot;INCREMENT_COUNTER&quot;</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span> counter<span class=\"token operator\">:</span> action<span class=\"token punctuation\">.</span>payload <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">StoreProvider</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// make globalState and dispatch available to all components</span>\n  <span class=\"token keyword\">const</span> value <span class=\"token operator\">=</span> <span class=\"token function\">useReducer</span><span class=\"token punctuation\">(</span>reducer<span class=\"token punctuation\">,</span> initialState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>GlobalStateContext<span class=\"token punctuation\">.</span>Provider value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>\n      <span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>GlobalStateContext<span class=\"token punctuation\">.</span>Provider<span class=\"token operator\">&gt;</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useGlobalStore</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// We just need to pass the GlobalContext.</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">useContext</span><span class=\"token punctuation\">(</span>GlobalStateContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Counter component to display the count</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Counter</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>store<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useGlobalStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    \n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">&gt;</span> Counter<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>store<span class=\"token punctuation\">.</span>counter<span class=\"token punctuation\">}</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// IncrementCounter component</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">IncrementCounter</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>store<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useGlobalStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">add</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> counter <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span>counter<span class=\"token punctuation\">;</span>\n      <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n         type<span class=\"token operator\">:</span> <span class=\"token string\">&apos;INCREMENT_COUNTER&apos;</span><span class=\"token punctuation\">,</span>\n         payload<span class=\"token operator\">:</span> counter <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>add<span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>Increment counter<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>StoreProvider<span class=\"token operator\">&gt;</span>\n      <span class=\"token operator\">&lt;</span>IncrementCounter <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n      <span class=\"token operator\">&lt;</span>Counter <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>StoreProvider<span class=\"token operator\">&gt;</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<p>You can try this out here - <a href=\"https://codesandbox.io/s/redux-mini-6j64z\">Demo</a></p>\n<h2>Summary</h2>\n<ul>\n<li>We saw how we can use Reacts <strong>useContext</strong>, <strong>useReducer</strong> and <strong>createContext</strong> to create a global store.</li>\n<li>We saw how to create a <em>GlobalStateContext</em> using <strong>createContext</strong> by passing  an array containing initial state and a function.</li>\n<li>We created a <strong>StoreProvider</strong> using the <strong>GlobalStateContext</strong> and passed the value from React&apos;s <em>useReducer</em> to it.</li>\n<li>We then created a consumer hook <em>useGlobalStore</em> which internally uses React&apos;s <em>useContext</em>.</li>\n</ul>\n<p>I hope this post has given you some ideas on how to build your next store. If you have any suggestions, tweet me at <a href=\"https://twitter.com/__abhisaha\">@__abhisaha</a></p>\n</div>",
          "html_draft": "",
          "excerpt": "React comes with hooks and also it has a powerful context API. We are going to take advantage of these two features and build a state management system. ",
          "cover_image": "https://images.unsplash.com/photo-1477901492169-d59e6428fc90?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MnwzMTU3NnwwfDF8c2VhcmNofDEzfHxzdG9yZXxlbnwwfHx8fDE2MjE4NDk4Mjc&ixlib=rb-1.2.1&q=80&w=1080",
          "cover_image_width": 5472,
          "cover_image_height": 3648,
          "type": "post",
          "featured": false,
          "status": "published",
          "slug": "building-your-own-redux",
          "reading_time": "5 min read",
          "publishedAt": "2021-05-24T09:50:43.000Z",
          "scheduledAt": null,
          "updatedAt": "2021-11-14T19:55:01.949Z",
          "createdAt": "2021-05-22T06:58:49.000Z",
          "author_id": 3,
          "tags": [
            {
              "name": "javascript",
              "desc": "",
              "slug": "javascript"
            },
            {
              "name": "home",
              "desc": "",
              "slug": "home"
            }
          ]
        }
      ],
      "media": []
    }
  }
}
