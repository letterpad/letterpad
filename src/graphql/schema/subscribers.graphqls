type Subscriber {
  id: Int!
  email: String!
  author_id: Int!
  verified: Boolean!
  createdAt: Date!
}

type SubscribersNode {
  count: Int!
  rows: [Subscriber!]!
}

type SubscribersAddResult {
  ok: Boolean!
  message: String
}

type SubscribersUpdateResult {
  ok: Boolean!
  message: String
}
type SubscriberError {
  message: String
}

union SubscriberResponse = Subscriber | SubscriberError

type Query {
  subscribers(author_id: Int): SubscribersNode!
  subscriber(subscriber_id: Int): SubscriberResponse!
}

input InputUpdateSubscriber {
  secret_id: String
  verified: Boolean
}

type Mutation {
  addSubscriber(email: String!): SubscribersAddResult
  updateSubscriber(data: InputUpdateSubscriber!): SubscribersUpdateResult!
}
