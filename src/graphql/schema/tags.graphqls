type Tags {
  name: String!
  slug: String!
  posts: PostsResponse
}

input TagsFilters {
  active: Boolean
  name: String
}

type EditTaxResponse {
  ok: Boolean!
}

type TagsError implements LetterpadError {
  message: String!
}

type DeleteTagsResult {
  ok: Boolean!
}

type TagResultError implements LetterpadError {
  message: String!
}

union UpdateTagsResponse = EditTaxResponse | TagsError
union DeleteTagsResponse = DeleteTagsResult | TagsError

input InputTags {
  name: String!
  old_name: String
  slug: String
}

type TagsNode {
  rows: [Tags!]!
}
union TagsResponse = TagsNode | TagsError
union TagResponse = TagResultError | Tags

type Query {
  tags(filters: TagsFilters): TagsResponse!
  tag(slug: String!): TagResponse!
}

type Mutation {
  updateTags(data: InputTags): UpdateTagsResponse!
  deleteTags(name: String!): DeleteTagsResponse!
}
