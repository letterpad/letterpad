generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "sqlite"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Author {
  id                   String          @id @default(uuid())
  name                 String
  username             String          @unique
  email                String          @unique
  password             String
  bio                  String
  occupation           String
  signature            String?         @default("")
  company_name         String
  avatar               String
  social               String          @default("{}")
  verified             Boolean         @default(false)
  createdAt            DateTime?       @default(now())
  updatedAt            DateTime?       @updatedAt
  verify_attempt_left  Int?            @default(3)
  posts                Post[]
  uploads              Upload[]
  setting              Setting?
  register_step        String?         @default("")
  role_id              Int
  role                 Role            @relation(fields: [role_id], references: [id])
  subscribers          Subscriber[]
  login_type           String          @default("credentials")
  domain               Domain?
  last_seen            DateTime?
  first_post_published Boolean         @default(false)
  settings_updated     Boolean         @default(false)
  profile_updated      Boolean         @default(false)
  favourite            Boolean         @default(false)
  session              Session[]
  followers            Follows[]       @relation("following")
  following            Follows[]       @relation("follower")
  likes                Likes[]
  notifications        Notifications[]
  views                PageViews[]
  membership           Membership?
  comments             Comment[]

  @@index([role_id])
  @@index([username])
  @@index([email])
  @@index([username, password])
}

model Membership {
  id                     String    @id @default(uuid())
  author_id              String    @unique
  stripe_customer_id     String?
  stripe_subscription_id String?
  status                 String    @default("active")
  createdAt              DateTime? @default(now())
  updatedAt              DateTime? @updatedAt
  author                 Author    @relation(fields: [author_id], references: [id], onDelete: Cascade)

  @@index([author_id])
  @@index([status])
}

model FeaturedWeek {
  id          Int    @id @default(autoincrement())
  post        Post   @relation(fields: [post_id], references: [id])
  post_id     String
  week_number Int

  @@unique([post_id])
  @@index([post_id])
}

model Notifications {
  notification_id String    @id @default(uuid())
  author_id       String
  meta            String    @default("{}")
  is_read         Boolean   @default(false)
  mail_sent       Boolean   @default(false)
  createdAt       DateTime? @default(now())
  updatedAt       DateTime? @updatedAt
  author          Author?   @relation(fields: [author_id], references: [id])

  @@index([author_id])
}

model Follows {
  follower_id  String
  follower     Author    @relation("follower", fields: [follower_id], references: [id])
  following_id String
  following    Author    @relation("following", fields: [following_id], references: [id])
  createdAt    DateTime? @default(now())
  updatedAt    DateTime? @updatedAt

  @@unique([follower_id, following_id])
  @@index([following_id])
}

model Likes {
  post_id   String
  liked_by  String
  createdAt DateTime? @default(now())
  count     Int       @default(0)
  updatedAt DateTime? @updatedAt
  author    Author    @relation(fields: [liked_by], references: [id], onDelete: Cascade)
  post      Post      @relation(fields: [post_id], references: [id], onDelete: Cascade)

  @@unique([post_id, liked_by])
  @@index([liked_by])
  @@index([post_id])
}

model Comment {
  id      String @id @default(uuid())
  content String

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  post    Post   @relation(fields: [post_id], references: [id])
  post_id String

  parent    Comment? @relation("ParentComment", fields: [parent_id], references: [id], onDelete: Restrict, onUpdate: Restrict)
  parent_id String?

  replies Comment[] @relation("ParentComment")

  author    Author @relation(fields: [author_id], references: [id], onDelete: Cascade)
  author_id String

  @@index([post_id])
  @@index([parent_id])
  @@index([author_id])
}

model Session {
  id        Int       @id @default(autoincrement())
  domain    String
  author_id String
  token     String
  author    Author?   @relation(fields: [author_id], references: [id], onDelete: Cascade)
  expiresAt DateTime?
  createdAt DateTime? @default(now())

  @@index([author_id])
}

model EmailDelivery {
  id                    Int       @id @default(autoincrement())
  template_id           String?
  author_id             Int?
  post_id               Int?
  subscriber_id         Int?
  delivered             Int?
  last_delivery_attempt DateTime?
  createdAt             DateTime? @default(now())
  updatedAt             DateTime? @updatedAt
}

model Email {
  template_id String    @id @unique
  subject     String
  body        String
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
}

model Permission {
  id        Int               @id @default(autoincrement())
  name      String?           @unique
  createdAt DateTime?         @default(now())
  updatedAt DateTime?         @updatedAt
  roles     RolePermissions[]
}

model Post {
  id                 String         @id @default(uuid())
  title              String         @default("")
  sub_title          String         @default("")
  html               String         @default("")
  html_draft         String         @default("")
  excerpt            String         @default("")
  cover_image        String         @default("")
  cover_image_width  Int            @default(0)
  cover_image_height Int            @default(0)
  type               String         @default("post")
  featured           Boolean        @default(false)
  status             String         @default("draft")
  slug               String         @default("")
  reading_time       String         @default("")
  publishedAt        DateTime?
  scheduledAt        DateTime?
  updatedAt          DateTime?      @updatedAt
  createdAt          DateTime?      @default(now())
  author_id          String
  author             Author?        @relation(fields: [author_id], references: [id], onDelete: Cascade)
  tags               Tag[]
  page_type          String         @default("default")
  page_data          String         @default("")
  stats              String         @default("{}")
  likes              Likes[]
  mail_status        String         @default("INACTIVE")
  exclude_from_home  Boolean        @default(false)
  banned             Boolean        @default(false)
  views              PageViews[]
  featured_weeks     FeaturedWeek[]
  pageTimeLog        PageTimeLog[]
  comments           Comment[]
  trending           Trending[]

  @@index([author_id])
  @@index([status, mail_status])
  @@index([author_id, status, slug])
}

model RolePermissions {
  id            Int        @id @default(autoincrement())
  createdAt     DateTime?  @default(now())
  updatedAt     DateTime?  @updatedAt
  role_id       Int
  permission_id Int
  permission    Permission @relation(fields: [permission_id], references: [id], onDelete: Cascade)
  role          Role       @relation(fields: [role_id], references: [id], onDelete: Cascade)

  @@index([role_id])
  @@index([permission_id])
}

model Role {
  id          Int               @id @default(autoincrement())
  name        String?           @unique
  createdAt   DateTime?         @default(now())
  updatedAt   DateTime?         @updatedAt
  permissions RolePermissions[]
  author      Author[]
}

model PageViews {
  id        String    @id @default(uuid())
  post_id   String?
  author_id String?
  view_type String
  count     Int       @default(0)
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  author    Author?   @relation(fields: [author_id], references: [id], onDelete: Cascade)
  post      Post?     @relation(fields: [post_id], references: [id], onDelete: Cascade)

  @@unique([post_id, view_type])
  @@unique([author_id, view_type])
  @@index([author_id])
  @@index([post_id])
  @@index([view_type])
  @@index([author_id, post_id])
}

model Setting {
  id                  String    @id @default(uuid())
  site_title          String
  site_tagline        String
  site_email          String
  site_url            String
  site_footer         String
  site_description    String
  display_author_info Boolean   @default(false)
  cloudinary_key      String
  cloudinary_name     String
  cloudinary_secret   String
  paypal_email        String    @default("")
  menu                String    @default("[]")
  css                 String
  theme               String
  client_token        String
  banner              String    @default("{}")
  site_logo           String    @default("{}")
  site_favicon        String    @default("{}")
  createdAt           DateTime? @default(now())
  updatedAt           DateTime? @updatedAt
  intro_dismissed     Boolean
  show_about_page     Boolean   @default(true)
  show_tags_page      Boolean   @default(false)
  design              String    @default("{}")
  scripts             String    @default("")
  openai_key          String    @default("")
  author_id           String    @unique
  author              Author    @relation(fields: [author_id], references: [id], onDelete: Cascade)
}

model Subscriber {
  id                  Int       @id @default(autoincrement())
  email               String
  author_id           String
  verified            Boolean   @default(false)
  createdAt           DateTime? @default(now())
  updatedAt           DateTime? @updatedAt
  verify_attempt_left Int?      @default(3)

  author Author? @relation(fields: [author_id], references: [id], onDelete: Cascade)

  @@unique([email, author_id])
  @@index([author_id])
}

model Tag {
  name      String    @id @unique
  desc      String?   @default("")
  slug      String?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  posts     Post[]
}

model Upload {
  id          Int       @id @default(autoincrement())
  name        String
  url         String
  width       Int
  height      Int
  description String    @default("")
  updatedAt   DateTime? @updatedAt
  createdAt   DateTime? @default(now())
  author_id   String
  author      Author?   @relation(fields: [author_id], references: [id], onDelete: Cascade)

  @@index([author_id])
}

model Domain {
  id        Int       @id @default(autoincrement())
  name      String
  mapped    Boolean   @default(false)
  ssl       Boolean
  updatedAt DateTime? @updatedAt
  createdAt DateTime? @default(now())
  author_id String    @unique
  author    Author?   @relation(fields: [author_id], references: [id], onDelete: Cascade)
}

model SubscribersDelivery {
  id            Int       @id @default(autoincrement())
  subscriber_id String?
  post_id       String
  delivered     Boolean
  createdAt     DateTime? @default(now())
  updatedAt     DateTime? @updatedAt
}

model PageTimeLog {
  id        String    @id @default(uuid())
  ip        String
  post_id   String
  post      Post      @relation(fields: [post_id], references: [id], onDelete: Cascade)
  snapshot  String
  page_time Int       @default(0)
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  @@unique([ip, post_id])
  @@index([post_id])
  @@index([ip, post_id])
}

model EmailTemplates {
  template String @unique
  subject  String
  body     String
}

model Trending {
  id        Int       @id @default(autoincrement())
  post      Post      @relation(fields: [post_id], references: [id])
  post_id   String
  views     Int       @default(0)
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  @@index([post_id])
}
