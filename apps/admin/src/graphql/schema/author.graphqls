type Social {
  twitter: String
  facebook: String
  github: String
  instagram: String
  linkedin: String
}

enum RegisterStep {
   ProfileInfo
   SiteInfo
   Registered
}

type Author {
  id: Int!
  email: String!
  username: String!
  name: String!
  social: Social
  bio: String
  occupation: String
  company_name: String
  role: Role
  permissions: [Permissions!]
  avatar: String
  verified: Boolean
  accessToken: String @maskIfUnauth
  analytics_id: Int @deprecated(reason: "Use google_analytics instead from settings")
  analytics_uuid: String @deprecated(reason: "Umami is no longer supported for performance reasons")
  first_post_published: Boolean
  settings_updated: Boolean
  profile_updated: Boolean
  register_step: RegisterStep
  stripe_customer_id: String
  stripe_subscription_id: String
}

type Subscription {
  id: Int!
  customer_id: Int!
  subscription_id: Int!
  plan_id: Int!
  status: String!
  created_at: String!
  updated_at: String!
}

input LoginData {
  email: String!
  password: String!
}

input InputSocial {
  twitter: String
  facebook: String
  github: String
  instagram: String
  linkedin: String
}
input InputAuthor {
  id: Int!
  email: String
  name: String
  bio: String
  occupation: String
  company_name: String
  social: InputSocial
  password: String
  roleId: Int
  avatar: String
  register_step: RegisterStep
  username: String
  first_post_published: Boolean
  settings_updated: Boolean
  profile_updated: Boolean
  stripe_customer_id: String
  stripe_subscription_id: String
}

input InputCreateAuthor {
  email: String!
  setting: SettingInputType
  name: String
  username: String
  register_step: RegisterStep
  password: String!
  token: String!
}

type LoginError implements LetterpadError {
  message: String!
}

union AuthorResponse = Author | NotFound | Exception | UnAuthorized | Failed

union LoginResponse = Author | LoginError

type ForgotPasswordResponse {
  ok: Boolean!
  message: String
}
type DeleteAuthorResponse {
  ok: Boolean!
  message: String
}

type Query {
  me: AuthorResponse
}

type Mutation {
  login(data: LoginData): LoginResponse
  deleteAuthor: DeleteAuthorResponse
  updateAuthor(author: InputAuthor!): AuthorResponse
  createAuthor(data: InputCreateAuthor!): AuthorResponse
  forgotPassword(email: String!): ForgotPasswordResponse!
  resetPassword(password: String!, token: String!): ForgotPasswordResponse!
}
