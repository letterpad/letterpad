type Social {
  twitter: String
  facebook: String
  github: String
  instagram: String
  linkedin: String
}

enum RegisterStep {
  ProfileInfo
  SiteInfo
  Registered
}

type FollowAuthor {
  username: String!
  name: String
  avatar: String
  createdAt: String
}

type Author {
  id: String!
  email: String!
  username: String
  name: String
  social: Social
  bio: String
  occupation: String
  signature: String
  company_name: String
  role: Role
  followers: [FollowAuthor!]
  following: [FollowAuthor!]
  permissions: [Permissions!]
  avatar: String
  verified: Boolean
  email_verified_at: Date
  accessToken: String @maskIfUnauth
  first_post_published: Boolean
  settings_updated: Boolean
  favourite: Boolean
  profile_updated: Boolean
  register_step: RegisterStep
  createdAt: String
  site_url: String
  is_paid_member: Boolean
}

input LoginData {
  email: String!
}

input InputSocial {
  twitter: String
  facebook: String
  github: String
  instagram: String
  linkedin: String
}
input InputAuthor {
  id: String!
  email: String
  name: String
  bio: String
  occupation: String
  signature: String
  company_name: String
  social: InputSocial
  roleId: Int
  avatar: String
  register_step: RegisterStep
  username: String
  first_post_published: Boolean
  settings_updated: Boolean
  profile_updated: Boolean
  favourite: Boolean
}

input InputCreateAuthor {
  email: String!
  setting: SettingInputType
  name: String
  username: String
  register_step: RegisterStep
  token: String!
}

type LoginError implements LetterpadError {
  message: String!
}

union AuthorResponse = Author | NotFound | Exception | UnAuthorized | Failed

union LoginResponse = Author | LoginError

type DeleteAuthorResponse {
  ok: Boolean!
  message: String
}

type FollowAuthorResponse {
  ok: Boolean!
  message: String
}

type IsFollowingResponse {
  ok: Boolean!
  following: Boolean!
  message: String
}

type AboutStats {
  postCount: Int!
  followerCount: Int!
  followingCount: Int!
}

type AboutStatsResponse {
  stats: AboutStats
  ok: Boolean!
}

type FavAuthorResponse {
  authors: [Author]!
  ok: Boolean!
}

type AuthorsNode {
  rows: [Author]!
  ok: Boolean!
}
type Query {
  me: AuthorResponse
  followers(id: String!): AuthorsNode
  following(id: String!): AuthorsNode
  isFollowing(username: String!): IsFollowingResponse!
  aboutStats(username: String!): AboutStatsResponse!
  favAuthors(limit: Int): FavAuthorResponse
}

type Mutation {
  deleteAuthor: DeleteAuthorResponse
  updateAuthor(author: InputAuthor!): AuthorResponse
  followAuthor(username: String!): FollowAuthorResponse!
  unFollowAuthor(username: String!): FollowAuthorResponse!
}
