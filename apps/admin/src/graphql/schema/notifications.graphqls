enum NotificationType {
    POST_NEW
    POST_LIKE
    FOLLOWER_NEW
    SUBSCRIBER_NEW
    SYSTEM
}

type PostNewMeta {
    post_id: Int
    post_title: String
    post_slug: String
    author_name: String
    author_username: String
    author_avatar: String
}

type FollowerNewMeta {
    follower_id: Int
    follower_name: String
    follower_username: String
    follower_avatar: String
    followed_id: Int
}

type SubscriberNewMeta {
    subscriber_email: String
}

type PostLikeMeta {
    post_id: Int
    post_title: String
    post_slug: String
    author_name: String
    author_username: String
    author_avatar: String
}

type SystemMeta {
    message: String
    url: String
    slug: String
}

union NotificationMeta = PostNewMeta | FollowerNewMeta | SubscriberNewMeta | PostLikeMeta | SystemMeta

type Notification {
  notification_id: String
  author_id: Int
  is_read: Boolean
  mail_sent: Boolean
  createdAt: Date!
  updatedAt: Date!
  meta: NotificationMeta
}

type NotificationNode {
  count: Int!
  rows: [Notification]!
}

type NotificationDeleteResult {
  ok: Boolean!
  message: String
}

type NotificationUpdateResult {
  ok: Boolean!
  message: String
}

type NotificationAddResult {
  ok: Boolean!
  message: String
}

input NotificationFilters {
  id: Int
  cursor: Int
  limit: Int
  page: Int
  sender_id: Int
  post_id: Int
  is_read: Boolean
  mail_sent: Boolean
}

union NotificationResponse = NotificationNode | UnAuthorized

type Query {
  notifications(filters: NotificationFilters): NotificationResponse!
}

type Mutation {
  markAsRead(notification_id: String!): NotificationUpdateResult!
  markAllAsRead: NotificationUpdateResult!
#   addNotification(data: InputNotification): NotificationAddResult!
}
