enum TagType {
  tag
  category
}

type Tag {
  name: String!
  slug: String!
  posts: PostsResponse
  type: TagType!
  category: String
  id: String!
}

input TagsFilters {
  active: Boolean
  name: String
  suggest: Boolean
}

type EditTaxResponse {
  ok: Boolean!
}

type DeleteTagsResult {
  ok: Boolean!
}

type TagResultError implements LetterpadError {
  message: String!
}
union TagsResponse = TagsNode | Exception | UnAuthorized
union TagResponse = Exception | Tag | UnAuthorized
union UpdateTagsResponse = EditTaxResponse | UnAuthorized
union DeleteTagsResponse = DeleteTagsResult | UnAuthorized

type Category {
  name: String
  count: Int
  slug: String
}

type CategoriesResponse {
  rows: [Category]
  ok: Boolean!
  message: String
}

input InputTags {
  name: String!
  old_name: String
  slug: String
}

type TagsNode {
  rows: [Tag!]!
}


type Query {
  tags(filters: TagsFilters): TagsResponse!
  tag(slug: String!): TagResponse!
  categories: CategoriesResponse!
}

type Mutation {
  updateTags(data: InputTags): UpdateTagsResponse!
  deleteTags(name: String!): DeleteTagsResponse!
}
