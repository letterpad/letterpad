type DomainVerification {
  type: String!
  domain: String!
  value: String!
  reason: String!
}

type Domain {
  id: Int!
  name: String!
  mapped: Boolean @deprecated(reason: "Use `configured` instead")
  ssl: Boolean
  verification: [DomainVerification]
  configured: Boolean
}

type DomainNotFound implements LetterpadError {
  message: String!
}

type DomainError implements LetterpadError {
  message: String!
}

input InputDomain {
  name: String
  mapped: Boolean
  ssl: Boolean
}

type UpdateDomainResponse {
  ok: Boolean!
  message: String
}

type RemoveDomainResponse {
  ok: Boolean!
  message: String
}

union AddDomainResponse = Domain | DomainError
union DomainResponse = Domain | DomainNotFound

type Query {
  domain: DomainResponse!
  certs: Boolean!
}

type Mutation {
  removeDomain: RemoveDomainResponse!
  addDomain(domain: String): AddDomainResponse!
}
