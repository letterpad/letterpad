type Post {
  # Primary key
  id: Int!
  # Title of the post
  title: String!
  # Html content of the post
  html: String
  # Draft for republishing content
  html_draft: String
  # Author information of the post
  author: AuthorResponse
  # A breif summary of the post
  excerpt: String
  # Convert image of the post
  cover_image: Image!
  # Type of the post. Can be "creatives" or "post"
  type: PostTypes!
  # Status of the post
  status: PostStatusOptions!
  # Featured post
  featured: Boolean!
  # The uri of the post
  slug: String
  # The creation date of the post
  createdAt: Date!
  # The published date of the post
  publishedAt: Date
  # The date scheduled to published the post
  scheduledAt: Date
  # Last updated date of the post
  updatedAt: Date!
  # Reading time of the post in minutes
  reading_time: String
  # Tags of the post
  tags: TagsResponse
  # Page can have different templates like portfolio
  page_type: String
  # Page data
  page_data: String

  # Stats - words, characters, reading time.
  stats: PostStats
}

type PostStats {
  # Number of words in the post
  words: Int
  # Number of characters in the post
  characters: Int
  # Number of characters in the post excluding spaces
  spaceless_characters: Int
  # Reading time of the post in minutes
  reading_time: Int @deprecated(reason: "Use stats.reading_time in Post")
}

input InputPostStats {
  # Number of words in the post
  words: Int
  # Number of characters in the post
  characters: Int
  # Number of characters in the post excluding spaces
  spaceless_characters: Int
}

enum PostStatusOptions {
  published
  draft
  trashed
}

input PostFilters {
  id: Int
  slug: String
  featured: Boolean
  previewHash: String
  status: PostStatusOptions
  type: PostTypes
}

input LetterpadPostFilters {
  slug: String!
  username: String!
}

enum PostTypes {
  post
  page
}

enum SortBy {
  asc
  desc
}

input PostsFilters {
  id: Int
  type: PostTypes
  slug: String
  featured: Boolean
  previewHash: String
  status: PostStatusOptions
  # name of author. entering  this field will ignore tagSlug and tag
  author: String
  # url of a tag. entering this field will ignore tag
  tagSlug: String
  # name of a tag.
  tag: String
  cursor: Int
  page: Int
  offset: Int
  limit: Int
  sortBy: SortBy
  page_type: String
}

type PostsNode {
  count: Int!
  rows: [Post!]!
}

type PostCountsByStatus {
  published: Int!
  drafts: Int!
  trashed: Int!
}

type Stats {
  posts: PostCountsByStatus!
  pages: PostCountsByStatus!
  tags: Int!
  media: Int!
}

input InputImage {
  src: String!
  width: Int
  height: Int
}

input TagsInputType {
  name: String!
  slug: String!
}

input InputCreatePost {
  title: String
  html: String
  excerpt: String
  cover_image: InputImage
  type: PostTypes
  featured: Boolean
  status: PostStatusOptions
  slug: String
  tags: [TagsInputType]
  page_type: String
  page_data: String
}

input InputUpdatePost {
  id: Int!
  title: String
  html: String
  html_draft: String
  featured: Boolean
  excerpt: String
  cover_image: InputImage
  publishedAt: Date
  scheduledAt: Date
  updatedAt: Date
  type: PostTypes
  status: PostStatusOptions
  slug: String
  tags: [TagsInputType!]
  page_type: String
  page_data: String
  stats: InputPostStats
}

type PostError implements LetterpadError {
  message: String!
}

type StatsError implements LetterpadError {
  message: String!
}

type PostTrashed {
  message: String!
}

union PostResponse =
    Post
  | UnAuthorized
  | NotFound
  | InvalidArguments
  | Exception

union PostsResponse = PostsNode | UnAuthorized | Exception

union CreatePostResponse = Post | PostError

union UpdatePostResponse = Post | PostError | PostTrashed

union StatsResponse = Stats | StatsError

type Query {
  post(filters: PostFilters): PostResponse!
  posts(filters: PostsFilters): PostsResponse!
  stats: StatsResponse
  letterpadLatestPosts: PostsResponse!
  letterpadLatestPost(filters: LetterpadPostFilters): PostResponse!
}

type Mutation {
  createPost(data: InputCreatePost): CreatePostResponse!
  updatePost(data: InputUpdatePost): UpdatePostResponse!
}
