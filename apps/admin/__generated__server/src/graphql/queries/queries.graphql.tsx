/* dfd8500b63062a6e23a2aad8db320693b725ea8e
 * This file is automatically generated by graphql-let. */

//@ts-nocheck
import * as Types from '../../../__types__';

import gql from 'graphql-tag';
export type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;
export type TagQueryVariables = Types.Exact<{
  slug: Types.Scalars['String'];
}>;


export type TagQuery = { __typename?: 'Query', tag: { __typename: 'Exception' } | { __typename: 'Tag' } | { __typename: 'UnAuthorized' } };

export type PostQueryVariables = Types.Exact<{
  filters?: Types.InputMaybe<Types.PostFilters>;
}>;


export type PostQuery = { __typename?: 'Query', post: { __typename: 'Exception' } | { __typename: 'InvalidArguments' } | { __typename: 'NotFound', message: string } | { __typename: 'Post', id: number, title: string, sub_title?: string, html?: string, excerpt?: string, featured: boolean, html_draft?: string, type: Types.PostTypes, slug?: string, status: Types.PostStatusOptions, createdAt: any, publishedAt?: any, scheduledAt?: any, updatedAt: any, reading_time?: string, page_type?: string, page_data?: string, mail_status?: Types.MailStatus, exclude_from_home?: boolean, author?: { __typename: 'Author', id: number, name: string, avatar?: string, bio?: string, occupation?: string, company_name?: string, social?: { __typename: 'Social', github?: string, twitter?: string, instagram?: string, linkedin?: string, facebook?: string } } | { __typename: 'Exception' } | { __typename: 'Failed' } | { __typename: 'NotFound' } | { __typename: 'UnAuthorized' }, tags?: { __typename: 'Exception' } | { __typename: 'TagsNode', rows: Array<{ __typename?: 'Tag', name: string, slug: string }> } | { __typename: 'UnAuthorized' }, stats?: { __typename?: 'PostStats', words?: number, characters?: number, spaceless_characters?: number, reading_time?: string }, cover_image: { __typename?: 'Image', src?: string, width?: number, height?: number } } | { __typename: 'UnAuthorized', message: string } };

export type PostWithAuthorAndTagsFragment = { __typename?: 'Post', id: number, title: string, sub_title?: string, html?: string, excerpt?: string, featured: boolean, html_draft?: string, type: Types.PostTypes, slug?: string, status: Types.PostStatusOptions, createdAt: any, publishedAt?: any, scheduledAt?: any, updatedAt: any, reading_time?: string, page_type?: string, page_data?: string, mail_status?: Types.MailStatus, exclude_from_home?: boolean, author?: { __typename: 'Author', id: number, name: string, avatar?: string, bio?: string, occupation?: string, company_name?: string, social?: { __typename: 'Social', github?: string, twitter?: string, instagram?: string, linkedin?: string, facebook?: string } } | { __typename: 'Exception' } | { __typename: 'Failed' } | { __typename: 'NotFound' } | { __typename: 'UnAuthorized' }, tags?: { __typename: 'Exception' } | { __typename: 'TagsNode', rows: Array<{ __typename?: 'Tag', name: string, slug: string }> } | { __typename: 'UnAuthorized' }, stats?: { __typename?: 'PostStats', words?: number, characters?: number, spaceless_characters?: number, reading_time?: string }, cover_image: { __typename?: 'Image', src?: string, width?: number, height?: number } };

export type PartialFragment = { __typename?: 'Post', id: number, title: string, sub_title?: string, html?: string, excerpt?: string, featured: boolean, html_draft?: string, type: Types.PostTypes, slug?: string, status: Types.PostStatusOptions, createdAt: any, publishedAt?: any, scheduledAt?: any, updatedAt: any, reading_time?: string, page_type?: string, page_data?: string, mail_status?: Types.MailStatus, exclude_from_home?: boolean, stats?: { __typename?: 'PostStats', words?: number, characters?: number, spaceless_characters?: number, reading_time?: string }, cover_image: { __typename?: 'Image', src?: string, width?: number, height?: number } };

export type PostsQueryVariables = Types.Exact<{
  filters?: Types.InputMaybe<Types.PostsFilters>;
}>;


export type PostsQuery = { __typename?: 'Query', posts: { __typename: 'Exception' } | { __typename: 'PostsNode', count: number, rows: Array<{ __typename?: 'Post', id: number, title: string, sub_title?: string, html?: string, excerpt?: string, featured: boolean, html_draft?: string, type: Types.PostTypes, slug?: string, status: Types.PostStatusOptions, createdAt: any, publishedAt?: any, scheduledAt?: any, updatedAt: any, reading_time?: string, page_type?: string, page_data?: string, mail_status?: Types.MailStatus, exclude_from_home?: boolean, author?: { __typename?: 'Author', name: string, bio?: string, occupation?: string, company_name?: string, social?: { __typename?: 'Social', github?: string, twitter?: string, instagram?: string, facebook?: string, linkedin?: string } } | { __typename?: 'Exception' } | { __typename?: 'Failed' } | { __typename?: 'NotFound' } | { __typename?: 'UnAuthorized' }, tags?: { __typename?: 'Exception' } | { __typename?: 'TagsNode', rows: Array<{ __typename?: 'Tag', name: string, slug: string }> } | { __typename?: 'UnAuthorized' }, stats?: { __typename?: 'PostStats', words?: number, characters?: number, spaceless_characters?: number, reading_time?: string }, cover_image: { __typename?: 'Image', src?: string, width?: number, height?: number } }> } | { __typename: 'UnAuthorized', message: string } };

export type MediaQueryVariables = Types.Exact<{
  filters?: Types.InputMaybe<Types.MediaFilters>;
}>;


export type MediaQuery = { __typename?: 'Query', media: { __typename: 'MediaNode', count: number, rows: Array<{ __typename?: 'Media', id: number, url: string, authorId?: number, createdAt: any, name: string, description?: string, width: number, height: number }> } | { __typename?: 'UnAuthorized' } };

export type SubscribersQueryVariables = Types.Exact<{
  author_id?: Types.InputMaybe<Types.Scalars['Int']>;
}>;


export type SubscribersQuery = { __typename?: 'Query', subscribers: { __typename?: 'SubscribersNode', count: number, rows: Array<{ __typename?: 'Subscriber', id: number, email: string, verified: boolean, createdAt: any }> } };

export type SubscriberQueryVariables = Types.Exact<{
  subscriber_id?: Types.InputMaybe<Types.Scalars['Int']>;
}>;


export type SubscriberQuery = { __typename?: 'Query', subscriber: { __typename?: 'Subscriber', id: number, email: string, verified: boolean, createdAt: any } | { __typename?: 'SubscriberError', message?: string } };

export type EmailQueryVariables = Types.Exact<{
  template_id?: Types.InputMaybe<Types.Scalars['String']>;
}>;


export type EmailQuery = { __typename?: 'Query', email: { __typename?: 'Email', template_id: string, body: string, subject: string } | { __typename?: 'EmailError', message: string } };

export type EmailsQueryVariables = Types.Exact<{ [key: string]: never; }>;


export type EmailsQuery = { __typename?: 'Query', emails: Array<{ __typename?: 'Email', template_id: string, body: string, subject: string }> };

export type MeQueryVariables = Types.Exact<{ [key: string]: never; }>;


export type MeQuery = { __typename?: 'Query', me?: { __typename: 'Author', id: number, name: string, username: string, analytics_id?: number, analytics_uuid?: string, register_step?: Types.RegisterStep, email: string, bio?: string, occupation?: string, signature?: string, company_name?: string, avatar?: string, first_post_published?: boolean, settings_updated?: boolean, profile_updated?: boolean, createdAt?: string, social?: { __typename: 'Social', github?: string, twitter?: string, instagram?: string, facebook?: string, linkedin?: string } } | { __typename: 'Exception' } | { __typename: 'Failed' } | { __typename: 'NotFound', message: string } | { __typename: 'UnAuthorized' } };

export type MeFragmentFragment = { __typename?: 'Author', id: number, name: string, username: string, analytics_id?: number, analytics_uuid?: string, register_step?: Types.RegisterStep, email: string, bio?: string, occupation?: string, signature?: string, company_name?: string, avatar?: string, first_post_published?: boolean, settings_updated?: boolean, profile_updated?: boolean, createdAt?: string, social?: { __typename: 'Social', github?: string, twitter?: string, instagram?: string, facebook?: string, linkedin?: string } };

export type TagsQueryVariables = Types.Exact<{
  filters?: Types.InputMaybe<Types.TagsFilters>;
}>;


export type TagsQuery = { __typename?: 'Query', tags: { __typename: 'Exception' } | { __typename: 'TagsNode', rows: Array<{ __typename?: 'Tag', name: string, slug: string, type: Types.TagType, id: string, posts?: { __typename: 'Exception' } | { __typename: 'PostsNode', count: number, rows: Array<{ __typename?: 'Post', id: number }> } | { __typename: 'UnAuthorized' } }> } | { __typename: 'UnAuthorized', message: string } };

export type StatsQueryVariables = Types.Exact<{ [key: string]: never; }>;


export type StatsQuery = { __typename?: 'Query', stats?: { __typename: 'Stats', tags: number, media: number, posts: { __typename?: 'PostCountsByStatus', published: number, drafts: number, trashed: number }, pages: { __typename?: 'PostCountsByStatus', published: number, drafts: number, trashed: number } } | { __typename: 'StatsError', message: string } };

export type SitemapsQueryVariables = Types.Exact<{ [key: string]: never; }>;


export type SitemapsQuery = { __typename?: 'Query', sitemaps: { __typename: 'SiteMapError', message?: string } | { __typename: 'SiteMapList', rows: Array<{ __typename?: 'SiteMapNode', route: string, priority: number, lastmod?: string }> } };

export type SettingsQueryVariables = Types.Exact<{ [key: string]: never; }>;


export type SettingsQuery = { __typename?: 'Query', settings: { __typename: 'NotFound', message: string } | { __typename: 'Setting', id: number, site_title: string, site_tagline?: string, site_email: string, site_url: string, site_footer?: string, site_description?: string, subscribe_embed?: string, display_author_info: boolean, scripts?: string, cloudinary_key?: string, cloudinary_name?: string, cloudinary_secret?: string, client_token: string, intro_dismissed: boolean, show_about_page?: boolean, show_tags_page?: boolean, openai_key?: string, css?: string, theme?: string, design?: { __typename?: 'Design', brand_color?: string, primary_font?: string, secondary_font?: string }, menu: Array<{ __typename?: 'Navigation', label: string, original_name: string, slug: string, type: Types.NavigationType }>, banner?: { __typename?: 'Image', src?: string, width?: number, height?: number }, site_logo?: { __typename?: 'Image', src?: string, width?: number, height?: number }, site_favicon?: { __typename?: 'Image', src?: string, width?: number, height?: number } } | { __typename: 'UnAuthorized', message: string } };

export type SettingsFragmentFragment = { __typename?: 'Setting', id: number, site_title: string, site_tagline?: string, site_email: string, site_url: string, site_footer?: string, site_description?: string, subscribe_embed?: string, display_author_info: boolean, scripts?: string, cloudinary_key?: string, cloudinary_name?: string, cloudinary_secret?: string, client_token: string, intro_dismissed: boolean, show_about_page?: boolean, show_tags_page?: boolean, openai_key?: string, css?: string, theme?: string, design?: { __typename?: 'Design', brand_color?: string, primary_font?: string, secondary_font?: string }, menu: Array<{ __typename?: 'Navigation', label: string, original_name: string, slug: string, type: Types.NavigationType }>, banner?: { __typename?: 'Image', src?: string, width?: number, height?: number }, site_logo?: { __typename?: 'Image', src?: string, width?: number, height?: number }, site_favicon?: { __typename?: 'Image', src?: string, width?: number, height?: number } };

export type DomainQueryVariables = Types.Exact<{ [key: string]: never; }>;


export type DomainQuery = { __typename?: 'Query', domain: { __typename: 'Domain', name: string, mapped?: boolean, ssl?: boolean, configured?: boolean, verification?: Array<{ __typename?: 'DomainVerification', type: string, domain: string, value: string, reason: string }> } | { __typename: 'DomainNotFound', message: string } };

export type DomainCertsQueryVariables = Types.Exact<{ [key: string]: never; }>;


export type DomainCertsQuery = { __typename?: 'Query', certs: boolean };

export type IsFollowingQueryVariables = Types.Exact<{
  username: Types.Scalars['String'];
}>;


export type IsFollowingQuery = { __typename?: 'Query', isFollowing: { __typename?: 'IsFollowingResponse', ok: boolean, following: boolean, message?: string } };

export type AboutStatsQueryVariables = Types.Exact<{
  username: Types.Scalars['String'];
}>;


export type AboutStatsQuery = { __typename?: 'Query', aboutStats: { __typename?: 'AboutStatsResponse', ok: boolean, stats?: { __typename?: 'AboutStats', postCount: number, followerCount: number, followingCount: number } } };

export type HomeQueryQueryVariables = Types.Exact<{ [key: string]: never; }>;


export type HomeQueryQuery = { __typename?: 'Query', me?: { __typename: 'Author', id: number, name: string, username: string, analytics_id?: number, analytics_uuid?: string, register_step?: Types.RegisterStep, email: string, bio?: string, occupation?: string, signature?: string, company_name?: string, avatar?: string, first_post_published?: boolean, settings_updated?: boolean, profile_updated?: boolean, createdAt?: string, social?: { __typename: 'Social', github?: string, twitter?: string, instagram?: string, facebook?: string, linkedin?: string } } | { __typename: 'Exception' } | { __typename: 'Failed' } | { __typename: 'NotFound', message: string } | { __typename: 'UnAuthorized' }, settings: { __typename: 'NotFound', message: string } | { __typename: 'Setting', id: number, site_title: string, site_tagline?: string, site_email: string, site_url: string, site_footer?: string, site_description?: string, subscribe_embed?: string, display_author_info: boolean, scripts?: string, cloudinary_key?: string, cloudinary_name?: string, cloudinary_secret?: string, client_token: string, intro_dismissed: boolean, show_about_page?: boolean, show_tags_page?: boolean, openai_key?: string, css?: string, theme?: string, design?: { __typename?: 'Design', brand_color?: string, primary_font?: string, secondary_font?: string }, menu: Array<{ __typename?: 'Navigation', label: string, original_name: string, slug: string, type: Types.NavigationType }>, banner?: { __typename?: 'Image', src?: string, width?: number, height?: number }, site_logo?: { __typename?: 'Image', src?: string, width?: number, height?: number }, site_favicon?: { __typename?: 'Image', src?: string, width?: number, height?: number } } | { __typename: 'UnAuthorized', message: string }, stats?: { __typename: 'Stats', tags: number, media: number, posts: { __typename?: 'PostCountsByStatus', published: number, drafts: number, trashed: number }, pages: { __typename?: 'PostCountsByStatus', published: number, drafts: number, trashed: number } } | { __typename: 'StatsError', message: string } };

export type NotificationQueryVariables = Types.Exact<{ [key: string]: never; }>;


export type NotificationQuery = { __typename?: 'Query', notifications: { __typename: 'NotificationNode', count: number, rows: Array<{ __typename?: 'Notification', notification_id?: string, author_id?: number, createdAt: any, meta?: { __typename: 'FollowerNewMeta', follower_id?: number, follower_name?: string, follower_username?: string, follower_avatar?: string } | { __typename: 'PostLikeMeta', post_id?: number, post_title?: string, post_slug?: string, author_name?: string, author_avatar?: string } | { __typename: 'PostNewMeta', post_id?: number, post_slug?: string, author_name?: string, author_avatar?: string, author_username?: string } | { __typename: 'SubscriberNewMeta', subscriber_email?: string } | { __typename: 'SystemMeta', message?: string, url?: string, slug?: string } }> } | { __typename: 'UnAuthorized' } };

export type LetterpadLatestPostsQueryVariables = Types.Exact<{
  cursor?: Types.InputMaybe<Types.Scalars['Int']>;
}>;


export type LetterpadLatestPostsQuery = { __typename?: 'Query', letterpadLatestPosts: { __typename: 'Exception' } | { __typename: 'PostsNode', count: number, rows: Array<{ __typename?: 'Post', id: number, title: string, slug?: string, sub_title?: string, createdAt: any, publishedAt?: any, excerpt?: string, cover_image: { __typename?: 'Image', src?: string, width?: number, height?: number }, stats?: { __typename?: 'PostStats', reading_time?: string }, author?: { __typename: 'Author', name: string, username: string, avatar?: string } | { __typename?: 'Exception' } | { __typename?: 'Failed' } | { __typename?: 'NotFound' } | { __typename?: 'UnAuthorized' }, tags?: { __typename?: 'Exception' } | { __typename?: 'TagsNode', rows: Array<{ __typename?: 'Tag', name: string, slug: string }> } | { __typename?: 'UnAuthorized' } }> } | { __typename: 'UnAuthorized' } };

export type PopularTagsQueryVariables = Types.Exact<{ [key: string]: never; }>;


export type PopularTagsQuery = { __typename?: 'Query', popularTags: { __typename?: 'PopularTagsResponse', ok: boolean, message?: string, rows?: Array<{ __typename?: 'Tag', count?: number, name: string, slug: string }> } };

export const PartialFragmentDoc = gql`
    fragment Partial on Post {
  id
  title
  sub_title
  html
  excerpt
  featured
  html_draft
  type
  slug
  status
  createdAt
  publishedAt
  scheduledAt
  updatedAt
  reading_time
  page_type
  page_data
  mail_status
  exclude_from_home
  stats {
    words
    characters
    spaceless_characters
    reading_time
  }
  cover_image {
    src
    width
    height
  }
}
    `;
export const PostWithAuthorAndTagsFragmentDoc = gql`
    fragment PostWithAuthorAndTags on Post {
  ...Partial
  author {
    __typename
    ... on Author {
      id
      name
      avatar
      social {
        __typename
        github
        twitter
        instagram
        linkedin
        facebook
      }
      bio
      occupation
      company_name
    }
  }
  tags {
    __typename
    ... on TagsNode {
      __typename
      rows {
        name
        slug
      }
    }
  }
}
    ${PartialFragmentDoc}`;
export const MeFragmentFragmentDoc = gql`
    fragment MeFragment on Author {
  id
  name
  username
  analytics_id
  analytics_uuid
  register_step
  social {
    __typename
    github
    twitter
    instagram
    facebook
    linkedin
  }
  email
  bio
  occupation
  signature
  company_name
  avatar
  first_post_published
  settings_updated
  profile_updated
  createdAt
}
    `;
export const SettingsFragmentFragmentDoc = gql`
    fragment SettingsFragment on Setting {
  id
  site_title
  site_tagline
  site_email
  site_url
  site_footer
  site_description
  subscribe_embed
  display_author_info
  scripts
  cloudinary_key
  cloudinary_name
  cloudinary_secret
  client_token
  intro_dismissed
  show_about_page
  show_tags_page
  openai_key
  design {
    brand_color
    primary_font
    secondary_font
  }
  menu {
    label
    original_name
    slug
    type
  }
  css
  theme
  banner {
    src
    width
    height
  }
  site_logo {
    src
    width
    height
  }
  site_favicon {
    src
    width
    height
  }
}
    `;
export const TagDocument = gql`
    query Tag($slug: String!) {
  tag(slug: $slug) {
    __typename
    ... on TagResponse {
      ... on Tag {
        name
        slug
        type
        id
      }
      ... on Exception {
        message
      }
    }
  }
}
    `;
export const PostDocument = gql`
    query Post($filters: PostFilters) {
  post(filters: $filters) {
    __typename
    ... on Post {
      __typename
      ...PostWithAuthorAndTags
    }
    ... on UnAuthorized {
      __typename
      message
    }
    ... on NotFound {
      __typename
      message
    }
  }
}
    ${PostWithAuthorAndTagsFragmentDoc}`;
export const PostsDocument = gql`
    query Posts($filters: PostsFilters) {
  posts(filters: $filters) {
    __typename
    ... on PostsNode {
      count
      rows {
        ...Partial
        author {
          ... on Author {
            name
            social {
              github
              twitter
              instagram
              facebook
              linkedin
            }
            bio
            occupation
            company_name
          }
        }
        tags {
          ... on TagsNode {
            rows {
              name
              slug
            }
          }
        }
      }
    }
    ... on UnAuthorized {
      __typename
      message
    }
  }
}
    ${PartialFragmentDoc}`;
export const MediaDocument = gql`
    query Media($filters: MediaFilters) {
  media(filters: $filters) {
    ... on MediaNode {
      __typename
      count
      rows {
        id
        url
        authorId
        createdAt
        name
        description
        width
        height
      }
    }
  }
}
    `;
export const SubscribersDocument = gql`
    query Subscribers($author_id: Int) {
  subscribers(author_id: $author_id) {
    count
    rows {
      id
      email
      verified
      createdAt
    }
  }
}
    `;
export const SubscriberDocument = gql`
    query Subscriber($subscriber_id: Int) {
  subscriber(subscriber_id: $subscriber_id) {
    ... on Subscriber {
      id
      email
      verified
      createdAt
    }
    ... on SubscriberError {
      message
    }
  }
}
    `;
export const EmailDocument = gql`
    query Email($template_id: String) {
  email(template_id: $template_id) {
    ... on Email {
      template_id
      body
      subject
    }
    ... on EmailError {
      message
    }
  }
}
    `;
export const EmailsDocument = gql`
    query Emails {
  emails {
    template_id
    body
    subject
  }
}
    `;
export const MeDocument = gql`
    query Me {
  me {
    __typename
    ... on Author {
      ...MeFragment
      __typename
    }
    ... on NotFound {
      message
      __typename
    }
  }
}
    ${MeFragmentFragmentDoc}`;
export const TagsDocument = gql`
    query Tags($filters: TagsFilters) {
  tags(filters: $filters) {
    __typename
    ... on TagsNode {
      rows {
        name
        slug
        type
        id
        posts {
          __typename
          ... on PostsNode {
            count
            rows {
              id
            }
          }
        }
      }
    }
    ... on UnAuthorized {
      __typename
      message
    }
  }
}
    `;
export const StatsDocument = gql`
    query Stats {
  stats {
    __typename
    ... on Stats {
      posts {
        published
        drafts
        trashed
      }
      pages {
        published
        drafts
        trashed
      }
      tags
      media
    }
    ... on StatsError {
      message
    }
  }
}
    `;
export const SitemapsDocument = gql`
    query Sitemaps {
  sitemaps {
    ... on SiteMapList {
      rows {
        route
        priority
        lastmod
      }
    }
    ... on SiteMapError {
      message
    }
    __typename
  }
}
    `;
export const SettingsDocument = gql`
    query settings {
  settings {
    __typename
    ... on Setting {
      ...SettingsFragment
    }
    ... on NotFound {
      message
    }
    ... on UnAuthorized {
      message
    }
  }
}
    ${SettingsFragmentFragmentDoc}`;
export const DomainDocument = gql`
    query domain {
  domain {
    __typename
    ... on Domain {
      name
      mapped
      ssl
      verification {
        type
        domain
        value
        reason
      }
      configured
    }
    ... on DomainNotFound {
      message
    }
  }
}
    `;
export const DomainCertsDocument = gql`
    query domainCerts {
  certs
}
    `;
export const IsFollowingDocument = gql`
    query IsFollowing($username: String!) {
  isFollowing(username: $username) {
    ok
    following
    message
  }
}
    `;
export const AboutStatsDocument = gql`
    query AboutStats($username: String!) {
  aboutStats(username: $username) {
    stats {
      postCount
      followerCount
      followingCount
    }
    ok
  }
}
    `;
export const HomeQueryDocument = gql`
    query homeQuery {
  me {
    __typename
    ... on Author {
      ...MeFragment
    }
    ... on NotFound {
      message
    }
  }
  settings {
    __typename
    ... on Setting {
      id
      ...SettingsFragment
    }
    ... on NotFound {
      message
    }
    ... on UnAuthorized {
      message
    }
  }
  stats {
    __typename
    ... on Stats {
      posts {
        published
        drafts
        trashed
      }
      pages {
        published
        drafts
        trashed
      }
      tags
      media
    }
    ... on StatsError {
      message
    }
  }
}
    ${MeFragmentFragmentDoc}
${SettingsFragmentFragmentDoc}`;
export const NotificationDocument = gql`
    query Notification {
  notifications {
    __typename
    ... on NotificationNode {
      count
      rows {
        ... on Notification {
          notification_id
          author_id
          createdAt
          meta {
            ... on PostLikeMeta {
              post_id
              post_title
              post_slug
              author_name
              author_avatar
              __typename
            }
            ... on PostNewMeta {
              post_id
              post_slug
              author_name
              author_avatar
              author_username
              __typename
            }
            ... on FollowerNewMeta {
              follower_id
              follower_name
              follower_username
              follower_avatar
              __typename
            }
            ... on SubscriberNewMeta {
              subscriber_email
              __typename
            }
            ... on SystemMeta {
              message
              url
              slug
              __typename
            }
          }
        }
      }
    }
  }
}
    `;
export const LetterpadLatestPostsDocument = gql`
    query LetterpadLatestPosts($cursor: Int) {
  letterpadLatestPosts(cursor: $cursor) {
    __typename
    ... on PostsNode {
      count
      rows {
        id
        title
        slug
        sub_title
        createdAt
        publishedAt
        excerpt
        cover_image {
          src
          width
          height
        }
        stats {
          reading_time
        }
        author {
          ... on Author {
            name
            username
            avatar
            __typename
          }
        }
        tags {
          ... on TagsNode {
            rows {
              name
              slug
            }
          }
        }
      }
    }
  }
}
    `;
export const PopularTagsDocument = gql`
    query PopularTags {
  popularTags {
    rows {
      count
      name
      slug
    }
    ok
    message
  }
}
    `;