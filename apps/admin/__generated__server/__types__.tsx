/* 1120720ceeabfbae7b26f5ca3ab755d084282715
 * This file is automatically generated by graphql-let. */

import { GraphQLResolveInfo, GraphQLScalarType, GraphQLScalarTypeConfig } from 'graphql';
export type Maybe<T> = T;
export type InputMaybe<T> = T;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;
export type RequireFields<T, K extends keyof T> = Omit<T, K> & { [P in K]-?: NonNullable<T[P]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  Date: any;
};

export type AboutStats = {
  __typename?: 'AboutStats';
  followerCount: Scalars['Int'];
  followingCount: Scalars['Int'];
  postCount: Scalars['Int'];
};

export type AboutStatsResponse = {
  __typename?: 'AboutStatsResponse';
  ok: Scalars['Boolean'];
  stats?: Maybe<AboutStats>;
};

export type AddDomainResponse = Domain | DomainError;

export type Author = {
  __typename?: 'Author';
  accessToken?: Maybe<Scalars['String']>;
  /** @deprecated Use google_analytics instead from settings */
  analytics_id?: Maybe<Scalars['Int']>;
  /** @deprecated Umami is no longer supported for performance reasons */
  analytics_uuid?: Maybe<Scalars['String']>;
  avatar?: Maybe<Scalars['String']>;
  bio?: Maybe<Scalars['String']>;
  company_name?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['String']>;
  email: Scalars['String'];
  first_post_published?: Maybe<Scalars['Boolean']>;
  followers?: Maybe<Array<Maybe<FollowAuthor>>>;
  following?: Maybe<Array<Maybe<FollowAuthor>>>;
  id: Scalars['Int'];
  name: Scalars['String'];
  occupation?: Maybe<Scalars['String']>;
  permissions?: Maybe<Array<Permissions>>;
  profile_updated?: Maybe<Scalars['Boolean']>;
  register_step?: Maybe<RegisterStep>;
  role?: Maybe<Role>;
  settings_updated?: Maybe<Scalars['Boolean']>;
  signature?: Maybe<Scalars['String']>;
  social?: Maybe<Social>;
  stripe_customer_id?: Maybe<Scalars['String']>;
  stripe_subscription_id?: Maybe<Scalars['String']>;
  username: Scalars['String'];
  verified?: Maybe<Scalars['Boolean']>;
};

export type AuthorResponse = Author | Exception | Failed | NotFound | UnAuthorized;

export type CategoriesResponse = {
  __typename?: 'CategoriesResponse';
  message?: Maybe<Scalars['String']>;
  ok: Scalars['Boolean'];
  rows?: Maybe<Array<Maybe<Category>>>;
};

export type Category = {
  __typename?: 'Category';
  count?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  slug?: Maybe<Scalars['String']>;
};

export type CreatePostResponse = Post | PostError;

export type CreateSubscriptionResponse = {
  __typename?: 'CreateSubscriptionResponse';
  message?: Maybe<Scalars['String']>;
  ok: Scalars['Boolean'];
};

export type DeleteAuthorResponse = {
  __typename?: 'DeleteAuthorResponse';
  message?: Maybe<Scalars['String']>;
  ok: Scalars['Boolean'];
};

export type DeleteTagsResponse = DeleteTagsResult | UnAuthorized;

export type DeleteTagsResult = {
  __typename?: 'DeleteTagsResult';
  ok: Scalars['Boolean'];
};

export type Design = {
  __typename?: 'Design';
  brand_color?: Maybe<Scalars['String']>;
  primary_font?: Maybe<Scalars['String']>;
  secondary_font?: Maybe<Scalars['String']>;
};

export type Domain = {
  __typename?: 'Domain';
  configured?: Maybe<Scalars['Boolean']>;
  id: Scalars['Int'];
  /** @deprecated Use `configured` instead */
  mapped?: Maybe<Scalars['Boolean']>;
  name: Scalars['String'];
  ssl?: Maybe<Scalars['Boolean']>;
  verification?: Maybe<Array<Maybe<DomainVerification>>>;
};

export type DomainError = LetterpadError & {
  __typename?: 'DomainError';
  message: Scalars['String'];
};

export type DomainNotFound = LetterpadError & {
  __typename?: 'DomainNotFound';
  message: Scalars['String'];
};

export type DomainResponse = Domain | DomainNotFound;

export type DomainVerification = {
  __typename?: 'DomainVerification';
  domain: Scalars['String'];
  reason: Scalars['String'];
  type: Scalars['String'];
  value: Scalars['String'];
};

export type EditTaxResponse = {
  __typename?: 'EditTaxResponse';
  ok: Scalars['Boolean'];
};

export type Email = {
  __typename?: 'Email';
  body: Scalars['String'];
  subject: Scalars['String'];
  template_id: Scalars['String'];
};

export type EmailError = LetterpadError & {
  __typename?: 'EmailError';
  message: Scalars['String'];
};

export type EmailResponse = Email | EmailError;

export type Error = {
  __typename?: 'Error';
  message?: Maybe<Scalars['String']>;
  path: Scalars['String'];
};

export type Exception = LetterpadError & {
  __typename?: 'Exception';
  message: Scalars['String'];
};

export type Failed = LetterpadError & {
  __typename?: 'Failed';
  message: Scalars['String'];
  type?: Maybe<Failed>;
};

export type Feed = {
  __typename?: 'Feed';
  rows: Array<FeedNode>;
};

export type FeedError = {
  __typename?: 'FeedError';
  message?: Maybe<Scalars['String']>;
};

export type FeedNode = {
  __typename?: 'FeedNode';
  author: Scalars['String'];
  categories: Array<Scalars['String']>;
  description: Scalars['String'];
  guid: Scalars['String'];
  link: Scalars['String'];
  pubDate: Scalars['String'];
  title: Scalars['String'];
};

export type FeedResponse = Feed | FeedError;

export type FollowAuthor = {
  __typename?: 'FollowAuthor';
  avatar?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  username: Scalars['String'];
};

export type FollowAuthorResponse = {
  __typename?: 'FollowAuthorResponse';
  message?: Maybe<Scalars['String']>;
  ok: Scalars['Boolean'];
};

export type FollowerNewMeta = {
  __typename?: 'FollowerNewMeta';
  followed_id?: Maybe<Scalars['Int']>;
  follower_avatar?: Maybe<Scalars['String']>;
  follower_id?: Maybe<Scalars['Int']>;
  follower_name?: Maybe<Scalars['String']>;
  follower_username?: Maybe<Scalars['String']>;
};

export type Forbidden = LetterpadError & {
  __typename?: 'Forbidden';
  message: Scalars['String'];
  type?: Maybe<Failed>;
};

export type ForgotPasswordResponse = {
  __typename?: 'ForgotPasswordResponse';
  message?: Maybe<Scalars['String']>;
  ok: Scalars['Boolean'];
};

export type Image = {
  __typename?: 'Image';
  height?: Maybe<Scalars['Int']>;
  src?: Maybe<Scalars['String']>;
  width?: Maybe<Scalars['Int']>;
};

export type InputAuthor = {
  avatar?: InputMaybe<Scalars['String']>;
  bio?: InputMaybe<Scalars['String']>;
  company_name?: InputMaybe<Scalars['String']>;
  email?: InputMaybe<Scalars['String']>;
  first_post_published?: InputMaybe<Scalars['Boolean']>;
  id: Scalars['Int'];
  name?: InputMaybe<Scalars['String']>;
  occupation?: InputMaybe<Scalars['String']>;
  password?: InputMaybe<Scalars['String']>;
  profile_updated?: InputMaybe<Scalars['Boolean']>;
  register_step?: InputMaybe<RegisterStep>;
  roleId?: InputMaybe<Scalars['Int']>;
  settings_updated?: InputMaybe<Scalars['Boolean']>;
  signature?: InputMaybe<Scalars['String']>;
  social?: InputMaybe<InputSocial>;
  stripe_customer_id?: InputMaybe<Scalars['String']>;
  stripe_subscription_id?: InputMaybe<Scalars['String']>;
  username?: InputMaybe<Scalars['String']>;
};

export type InputCreateAuthor = {
  email: Scalars['String'];
  name?: InputMaybe<Scalars['String']>;
  password: Scalars['String'];
  register_step?: InputMaybe<RegisterStep>;
  setting?: InputMaybe<SettingInputType>;
  token: Scalars['String'];
  username?: InputMaybe<Scalars['String']>;
};

export type InputCreatePost = {
  cover_image?: InputMaybe<InputImage>;
  excerpt?: InputMaybe<Scalars['String']>;
  featured?: InputMaybe<Scalars['Boolean']>;
  html?: InputMaybe<Scalars['String']>;
  page_data?: InputMaybe<Scalars['String']>;
  page_type?: InputMaybe<Scalars['String']>;
  slug?: InputMaybe<Scalars['String']>;
  status?: InputMaybe<PostStatusOptions>;
  sub_title?: InputMaybe<Scalars['String']>;
  tags?: InputMaybe<Array<InputMaybe<TagsInputType>>>;
  title?: InputMaybe<Scalars['String']>;
  type?: InputMaybe<PostTypes>;
};

export type InputDesign = {
  brand_color?: InputMaybe<Scalars['String']>;
  primary_font?: InputMaybe<Scalars['String']>;
  secondary_font?: InputMaybe<Scalars['String']>;
};

export type InputDomain = {
  mapped?: InputMaybe<Scalars['Boolean']>;
  name?: InputMaybe<Scalars['String']>;
  ssl?: InputMaybe<Scalars['Boolean']>;
};

export type InputImage = {
  height?: InputMaybe<Scalars['Int']>;
  src: Scalars['String'];
  width?: InputMaybe<Scalars['Int']>;
};

export type InputNavigation = {
  label: Scalars['String'];
  original_name: Scalars['String'];
  slug: Scalars['String'];
  type: NavigationType;
};

export type InputPostStats = {
  characters?: InputMaybe<Scalars['Int']>;
  spaceless_characters?: InputMaybe<Scalars['Int']>;
  words?: InputMaybe<Scalars['Int']>;
};

export type InputPublishOptions = {
  sendMail?: InputMaybe<Scalars['Boolean']>;
  testMail?: InputMaybe<Scalars['Boolean']>;
};

export type InputSocial = {
  facebook?: InputMaybe<Scalars['String']>;
  github?: InputMaybe<Scalars['String']>;
  instagram?: InputMaybe<Scalars['String']>;
  linkedin?: InputMaybe<Scalars['String']>;
  twitter?: InputMaybe<Scalars['String']>;
};

export type InputTags = {
  name: Scalars['String'];
  old_name?: InputMaybe<Scalars['String']>;
  slug?: InputMaybe<Scalars['String']>;
};

export type InputUpdateMedia = {
  description?: InputMaybe<Scalars['String']>;
  id: Scalars['Int'];
  name?: InputMaybe<Scalars['String']>;
};

export type InputUpdatePost = {
  cover_image?: InputMaybe<InputImage>;
  excerpt?: InputMaybe<Scalars['String']>;
  featured?: InputMaybe<Scalars['Boolean']>;
  html?: InputMaybe<Scalars['String']>;
  html_draft?: InputMaybe<Scalars['String']>;
  id: Scalars['Int'];
  mail_status?: InputMaybe<MailStatus>;
  page_data?: InputMaybe<Scalars['String']>;
  page_type?: InputMaybe<Scalars['String']>;
  publishOptions?: InputMaybe<InputPublishOptions>;
  publishedAt?: InputMaybe<Scalars['Date']>;
  scheduledAt?: InputMaybe<Scalars['Date']>;
  slug?: InputMaybe<Scalars['String']>;
  stats?: InputMaybe<InputPostStats>;
  status?: InputMaybe<PostStatusOptions>;
  sub_title?: InputMaybe<Scalars['String']>;
  tags?: InputMaybe<Array<TagsInputType>>;
  title?: InputMaybe<Scalars['String']>;
  type?: InputMaybe<PostTypes>;
  updatedAt?: InputMaybe<Scalars['Date']>;
};

export type InputUpdateSubscriber = {
  secret_id?: InputMaybe<Scalars['String']>;
  verified?: InputMaybe<Scalars['Boolean']>;
};

export type InvalidArguments = LetterpadError & {
  __typename?: 'InvalidArguments';
  message: Scalars['String'];
};

export type IsFollowingResponse = {
  __typename?: 'IsFollowingResponse';
  following: Scalars['Boolean'];
  message?: Maybe<Scalars['String']>;
  ok: Scalars['Boolean'];
};

export type IsPostLikedResponse = {
  __typename?: 'IsPostLikedResponse';
  liked: Scalars['Boolean'];
  message?: Maybe<Scalars['String']>;
  ok: Scalars['Boolean'];
};

export type LetterpadError = {
  message: Scalars['String'];
};

export type LetterpadPostFilters = {
  slug: Scalars['String'];
  username: Scalars['String'];
};

export type Like = {
  __typename?: 'Like';
  avatar?: Maybe<Scalars['String']>;
  username?: Maybe<Scalars['String']>;
};

export type LoginData = {
  email: Scalars['String'];
  password: Scalars['String'];
};

export type LoginError = LetterpadError & {
  __typename?: 'LoginError';
  message: Scalars['String'];
};

export type LoginResponse = Author | LoginError;

export enum MailStatus {
  Active = 'ACTIVE',
  Inactive = 'INACTIVE',
  Sent = 'SENT'
}

export type Media = {
  __typename?: 'Media';
  authorId?: Maybe<Scalars['Int']>;
  createdAt: Scalars['Date'];
  description?: Maybe<Scalars['String']>;
  height: Scalars['Int'];
  id: Scalars['Int'];
  name: Scalars['String'];
  url: Scalars['String'];
  width: Scalars['Int'];
};

export type MediaDeleteResponse = MediaDeleteResult | UnAuthorized;

export type MediaDeleteResult = {
  __typename?: 'MediaDeleteResult';
  ok: Scalars['Boolean'];
};

export type MediaFilters = {
  authorId?: InputMaybe<Scalars['Int']>;
  cursor?: InputMaybe<Scalars['Int']>;
  id?: InputMaybe<Scalars['Int']>;
  limit?: InputMaybe<Scalars['Int']>;
  page?: InputMaybe<Scalars['Int']>;
};

export type MediaNode = {
  __typename?: 'MediaNode';
  count: Scalars['Int'];
  rows: Array<Media>;
};

export type MediaResponse = MediaNode | UnAuthorized;

export type MediaUpdateResponse = MediaUpdateResult | UnAuthorized;

export type MediaUpdateResult = {
  __typename?: 'MediaUpdateResult';
  ok: Scalars['Boolean'];
};

export type Mutation = {
  __typename?: 'Mutation';
  addDomain: AddDomainResponse;
  addSubscriber?: Maybe<SubscribersAddResult>;
  createAuthor?: Maybe<AuthorResponse>;
  createPost: CreatePostResponse;
  deleteAuthor?: Maybe<DeleteAuthorResponse>;
  deleteMedia?: Maybe<MediaDeleteResponse>;
  deleteTags: DeleteTagsResponse;
  followAuthor: FollowAuthorResponse;
  forgotPassword: ForgotPasswordResponse;
  likePost: ToggleLikePostResponse;
  login?: Maybe<LoginResponse>;
  markAllAsRead: NotificationUpdateResult;
  markAsRead: NotificationUpdateResult;
  removeDomain: RemoveDomainResponse;
  resetPassword: ForgotPasswordResponse;
  unFollowAuthor: FollowAuthorResponse;
  unLikePost: ToggleLikePostResponse;
  updateAuthor?: Maybe<AuthorResponse>;
  updateMedia?: Maybe<MediaUpdateResponse>;
  updateOptions?: Maybe<SettingResponse>;
  updatePost: UpdatePostResponse;
  updateSubscriber: SubscribersUpdateResult;
  updateTags: UpdateTagsResponse;
};


export type MutationAddDomainArgs = {
  domain?: InputMaybe<Scalars['String']>;
};


export type MutationAddSubscriberArgs = {
  email: Scalars['String'];
};


export type MutationCreateAuthorArgs = {
  data: InputCreateAuthor;
};


export type MutationCreatePostArgs = {
  data?: InputMaybe<InputCreatePost>;
};


export type MutationDeleteMediaArgs = {
  ids: Array<Scalars['Int']>;
};


export type MutationDeleteTagsArgs = {
  name: Scalars['String'];
};


export type MutationFollowAuthorArgs = {
  username: Scalars['String'];
};


export type MutationForgotPasswordArgs = {
  email: Scalars['String'];
};


export type MutationLikePostArgs = {
  postId: Scalars['Int'];
};


export type MutationLoginArgs = {
  data?: InputMaybe<LoginData>;
};


export type MutationMarkAsReadArgs = {
  notification_id: Scalars['String'];
};


export type MutationResetPasswordArgs = {
  password: Scalars['String'];
  token: Scalars['String'];
};


export type MutationUnFollowAuthorArgs = {
  username: Scalars['String'];
};


export type MutationUnLikePostArgs = {
  postId: Scalars['Int'];
};


export type MutationUpdateAuthorArgs = {
  author: InputAuthor;
};


export type MutationUpdateMediaArgs = {
  data: InputUpdateMedia;
};


export type MutationUpdateOptionsArgs = {
  options: Array<SettingInputType>;
};


export type MutationUpdatePostArgs = {
  data?: InputMaybe<InputUpdatePost>;
};


export type MutationUpdateSubscriberArgs = {
  data: InputUpdateSubscriber;
};


export type MutationUpdateTagsArgs = {
  data?: InputMaybe<InputTags>;
};

export type Navigation = {
  __typename?: 'Navigation';
  label: Scalars['String'];
  original_name: Scalars['String'];
  slug: Scalars['String'];
  type: NavigationType;
};

export enum NavigationType {
  Custom = 'custom',
  Page = 'page',
  Tag = 'tag'
}

export type NotFound = LetterpadError & {
  __typename?: 'NotFound';
  message: Scalars['String'];
};

export type Notification = {
  __typename?: 'Notification';
  author_id?: Maybe<Scalars['Int']>;
  createdAt: Scalars['Date'];
  is_read?: Maybe<Scalars['Boolean']>;
  mail_sent?: Maybe<Scalars['Boolean']>;
  meta?: Maybe<NotificationMeta>;
  notification_id?: Maybe<Scalars['String']>;
  updatedAt: Scalars['Date'];
};

export type NotificationAddResult = {
  __typename?: 'NotificationAddResult';
  message?: Maybe<Scalars['String']>;
  ok: Scalars['Boolean'];
};

export type NotificationDeleteResult = {
  __typename?: 'NotificationDeleteResult';
  message?: Maybe<Scalars['String']>;
  ok: Scalars['Boolean'];
};

export type NotificationFilters = {
  cursor?: InputMaybe<Scalars['Int']>;
  id?: InputMaybe<Scalars['Int']>;
  is_read?: InputMaybe<Scalars['Boolean']>;
  limit?: InputMaybe<Scalars['Int']>;
  mail_sent?: InputMaybe<Scalars['Boolean']>;
  page?: InputMaybe<Scalars['Int']>;
  post_id?: InputMaybe<Scalars['Int']>;
  sender_id?: InputMaybe<Scalars['Int']>;
};

export type NotificationMeta = FollowerNewMeta | PostLikeMeta | PostNewMeta | SubscriberNewMeta | SystemMeta;

export type NotificationNode = {
  __typename?: 'NotificationNode';
  count: Scalars['Int'];
  rows: Array<Maybe<Notification>>;
};

export type NotificationResponse = NotificationNode | UnAuthorized;

export enum NotificationType {
  FollowerNew = 'FOLLOWER_NEW',
  PostLike = 'POST_LIKE',
  PostNew = 'POST_NEW',
  SubscriberNew = 'SUBSCRIBER_NEW',
  System = 'SYSTEM'
}

export type NotificationUpdateResult = {
  __typename?: 'NotificationUpdateResult';
  message?: Maybe<Scalars['String']>;
  ok: Scalars['Boolean'];
};

export enum Permissions {
  ManageAllPosts = 'MANAGE_ALL_POSTS',
  ManageOwnPosts = 'MANAGE_OWN_POSTS',
  ManageSettings = 'MANAGE_SETTINGS',
  ManageUsers = 'MANAGE_USERS',
  ReadOnlyPosts = 'READ_ONLY_POSTS'
}

export type Post = {
  __typename?: 'Post';
  author?: Maybe<AuthorResponse>;
  cover_image: Image;
  createdAt: Scalars['Date'];
  excerpt?: Maybe<Scalars['String']>;
  featured: Scalars['Boolean'];
  html?: Maybe<Scalars['String']>;
  html_draft?: Maybe<Scalars['String']>;
  id: Scalars['Int'];
  likes?: Maybe<Array<Maybe<Like>>>;
  mail_status?: Maybe<MailStatus>;
  page_data?: Maybe<Scalars['String']>;
  page_type?: Maybe<Scalars['String']>;
  publishedAt?: Maybe<Scalars['Date']>;
  /** @deprecated Use stats.reading_time in Post */
  reading_time?: Maybe<Scalars['String']>;
  scheduledAt?: Maybe<Scalars['Date']>;
  slug?: Maybe<Scalars['String']>;
  stats?: Maybe<PostStats>;
  status: PostStatusOptions;
  sub_title?: Maybe<Scalars['String']>;
  tags?: Maybe<TagsResponse>;
  title: Scalars['String'];
  type: PostTypes;
  updatedAt: Scalars['Date'];
};

export type PostCountsByStatus = {
  __typename?: 'PostCountsByStatus';
  drafts: Scalars['Int'];
  published: Scalars['Int'];
  trashed: Scalars['Int'];
};

export type PostError = LetterpadError & {
  __typename?: 'PostError';
  message: Scalars['String'];
};

export type PostFilters = {
  featured?: InputMaybe<Scalars['Boolean']>;
  id?: InputMaybe<Scalars['Int']>;
  previewHash?: InputMaybe<Scalars['String']>;
  slug?: InputMaybe<Scalars['String']>;
  status?: InputMaybe<PostStatusOptions>;
  type?: InputMaybe<PostTypes>;
};

export type PostLikeMeta = {
  __typename?: 'PostLikeMeta';
  author_avatar?: Maybe<Scalars['String']>;
  author_name?: Maybe<Scalars['String']>;
  author_username?: Maybe<Scalars['String']>;
  post_id?: Maybe<Scalars['Int']>;
  post_slug?: Maybe<Scalars['String']>;
  post_title?: Maybe<Scalars['String']>;
};

export type PostNewMeta = {
  __typename?: 'PostNewMeta';
  author_avatar?: Maybe<Scalars['String']>;
  author_name?: Maybe<Scalars['String']>;
  author_username?: Maybe<Scalars['String']>;
  post_id?: Maybe<Scalars['Int']>;
  post_slug?: Maybe<Scalars['String']>;
  post_title?: Maybe<Scalars['String']>;
};

export type PostResponse = Exception | InvalidArguments | NotFound | Post | UnAuthorized;

export type PostStats = {
  __typename?: 'PostStats';
  characters?: Maybe<Scalars['Int']>;
  reading_time?: Maybe<Scalars['String']>;
  spaceless_characters?: Maybe<Scalars['Int']>;
  words?: Maybe<Scalars['Int']>;
};

export enum PostStatusOptions {
  Draft = 'draft',
  Published = 'published',
  Trashed = 'trashed'
}

export type PostTrashed = {
  __typename?: 'PostTrashed';
  message: Scalars['String'];
};

export enum PostTypes {
  Page = 'page',
  Post = 'post'
}

export type PostsFilters = {
  author?: InputMaybe<Scalars['String']>;
  cursor?: InputMaybe<Scalars['Int']>;
  featured?: InputMaybe<Scalars['Boolean']>;
  id?: InputMaybe<Scalars['Int']>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  page?: InputMaybe<Scalars['Int']>;
  page_type?: InputMaybe<Scalars['String']>;
  previewHash?: InputMaybe<Scalars['String']>;
  search?: InputMaybe<Scalars['String']>;
  slug?: InputMaybe<Scalars['String']>;
  sortBy?: InputMaybe<SortBy>;
  status?: InputMaybe<Array<InputMaybe<PostStatusOptions>>>;
  tag?: InputMaybe<Scalars['String']>;
  tagSlug?: InputMaybe<Scalars['String']>;
  type?: InputMaybe<PostTypes>;
};

export type PostsNode = {
  __typename?: 'PostsNode';
  count: Scalars['Int'];
  rows: Array<Post>;
};

export type PostsResponse = Exception | PostsNode | UnAuthorized;

export type Query = {
  __typename?: 'Query';
  aboutStats: AboutStatsResponse;
  categories: CategoriesResponse;
  certs: Scalars['Boolean'];
  createSubscription: CreateSubscriptionResponse;
  domain: DomainResponse;
  email: EmailResponse;
  emails: Array<Maybe<Email>>;
  feed: FeedResponse;
  isFollowing: IsFollowingResponse;
  isPostLiked: IsPostLikedResponse;
  letterpadLatestPost: PostResponse;
  letterpadLatestPosts: PostsResponse;
  me?: Maybe<AuthorResponse>;
  media: MediaResponse;
  notifications: NotificationResponse;
  post: PostResponse;
  posts: PostsResponse;
  settings: SettingResponse;
  sitemap: SiteMapResponse;
  sitemaps: SiteMapResponse;
  stats?: Maybe<StatsResponse>;
  subscriber: SubscriberResponse;
  subscribers: SubscribersNode;
  tag: TagResponse;
  tags: TagsResponse;
  updateSubscription: UpdateSubscriptionResponse;
};


export type QueryAboutStatsArgs = {
  username: Scalars['String'];
};


export type QueryCreateSubscriptionArgs = {
  type?: InputMaybe<Scalars['String']>;
};


export type QueryEmailArgs = {
  template_id?: InputMaybe<Scalars['String']>;
};


export type QueryIsFollowingArgs = {
  username: Scalars['String'];
};


export type QueryIsPostLikedArgs = {
  postId: Scalars['Int'];
};


export type QueryLetterpadLatestPostArgs = {
  filters?: InputMaybe<LetterpadPostFilters>;
};


export type QueryLetterpadLatestPostsArgs = {
  cursor?: InputMaybe<Scalars['Int']>;
};


export type QueryMediaArgs = {
  filters?: InputMaybe<MediaFilters>;
};


export type QueryNotificationsArgs = {
  filters?: InputMaybe<NotificationFilters>;
};


export type QueryPostArgs = {
  filters?: InputMaybe<PostFilters>;
};


export type QueryPostsArgs = {
  filters?: InputMaybe<PostsFilters>;
};


export type QuerySubscriberArgs = {
  subscriber_id?: InputMaybe<Scalars['Int']>;
};


export type QuerySubscribersArgs = {
  author_id?: InputMaybe<Scalars['Int']>;
};


export type QueryTagArgs = {
  slug: Scalars['String'];
};


export type QueryTagsArgs = {
  filters?: InputMaybe<TagsFilters>;
};


export type QueryUpdateSubscriptionArgs = {
  type?: InputMaybe<Scalars['String']>;
};

export enum RegisterStep {
  ProfileInfo = 'ProfileInfo',
  Registered = 'Registered',
  SiteInfo = 'SiteInfo'
}

export type RemoveDomainResponse = {
  __typename?: 'RemoveDomainResponse';
  message?: Maybe<Scalars['String']>;
  ok: Scalars['Boolean'];
};

export type Response = {
  __typename?: 'Response';
  errors?: Maybe<Array<Error>>;
  ok: Scalars['Boolean'];
  post?: Maybe<Post>;
};

export enum Role {
  Admin = 'ADMIN',
  Author = 'AUTHOR',
  Reader = 'READER',
  Reviewer = 'REVIEWER'
}

export type Setting = {
  __typename?: 'Setting';
  banner?: Maybe<Image>;
  client_token: Scalars['String'];
  cloudinary_key?: Maybe<Scalars['String']>;
  cloudinary_name?: Maybe<Scalars['String']>;
  cloudinary_secret?: Maybe<Scalars['String']>;
  css?: Maybe<Scalars['String']>;
  design?: Maybe<Design>;
  display_author_info: Scalars['Boolean'];
  id: Scalars['Int'];
  intro_dismissed: Scalars['Boolean'];
  menu: Array<Navigation>;
  openai_key?: Maybe<Scalars['String']>;
  scripts?: Maybe<Scalars['String']>;
  show_about_page?: Maybe<Scalars['Boolean']>;
  show_tags_page?: Maybe<Scalars['Boolean']>;
  site_description?: Maybe<Scalars['String']>;
  site_email: Scalars['String'];
  site_favicon?: Maybe<Image>;
  site_footer?: Maybe<Scalars['String']>;
  site_logo?: Maybe<Image>;
  site_tagline?: Maybe<Scalars['String']>;
  site_title: Scalars['String'];
  site_url: Scalars['String'];
  subscribe_embed?: Maybe<Scalars['String']>;
  theme?: Maybe<Scalars['String']>;
};

export type SettingError = LetterpadError & {
  __typename?: 'SettingError';
  message: Scalars['String'];
};

export type SettingInputType = {
  banner?: InputMaybe<InputImage>;
  cloudinary_key?: InputMaybe<Scalars['String']>;
  cloudinary_name?: InputMaybe<Scalars['String']>;
  cloudinary_secret?: InputMaybe<Scalars['String']>;
  css?: InputMaybe<Scalars['String']>;
  design?: InputMaybe<InputDesign>;
  display_author_info?: InputMaybe<Scalars['Boolean']>;
  intro_dismissed?: InputMaybe<Scalars['Boolean']>;
  menu?: InputMaybe<Array<InputNavigation>>;
  openai_key?: InputMaybe<Scalars['String']>;
  scripts?: InputMaybe<Scalars['String']>;
  show_about_page?: InputMaybe<Scalars['Boolean']>;
  show_tags_page?: InputMaybe<Scalars['Boolean']>;
  site_description?: InputMaybe<Scalars['String']>;
  site_email?: InputMaybe<Scalars['String']>;
  site_favicon?: InputMaybe<InputImage>;
  site_footer?: InputMaybe<Scalars['String']>;
  site_logo?: InputMaybe<InputImage>;
  site_tagline?: InputMaybe<Scalars['String']>;
  site_title?: InputMaybe<Scalars['String']>;
  site_url?: InputMaybe<Scalars['String']>;
  subscribe_embed?: InputMaybe<Scalars['String']>;
  theme?: InputMaybe<Scalars['String']>;
};

export type SettingResponse = NotFound | Setting | UnAuthorized;

export type SiteMapError = {
  __typename?: 'SiteMapError';
  message?: Maybe<Scalars['String']>;
};

export type SiteMapList = {
  __typename?: 'SiteMapList';
  rows: Array<SiteMapNode>;
};

export type SiteMapNode = {
  __typename?: 'SiteMapNode';
  changefreq?: Maybe<Scalars['String']>;
  lastmod?: Maybe<Scalars['String']>;
  priority: Scalars['Int'];
  route: Scalars['String'];
};

export type SiteMapResponse = SiteMapError | SiteMapList;

export type Social = {
  __typename?: 'Social';
  facebook?: Maybe<Scalars['String']>;
  github?: Maybe<Scalars['String']>;
  instagram?: Maybe<Scalars['String']>;
  linkedin?: Maybe<Scalars['String']>;
  twitter?: Maybe<Scalars['String']>;
};

export enum SortBy {
  Asc = 'asc',
  Desc = 'desc'
}

export type Stats = {
  __typename?: 'Stats';
  media: Scalars['Int'];
  pages: PostCountsByStatus;
  posts: PostCountsByStatus;
  tags: Scalars['Int'];
};

export type StatsError = LetterpadError & {
  __typename?: 'StatsError';
  message: Scalars['String'];
};

export type StatsResponse = Stats | StatsError;

export type Subscriber = {
  __typename?: 'Subscriber';
  author_id: Scalars['Int'];
  createdAt: Scalars['Date'];
  email: Scalars['String'];
  id: Scalars['Int'];
  verified: Scalars['Boolean'];
};

export type SubscriberError = {
  __typename?: 'SubscriberError';
  message?: Maybe<Scalars['String']>;
};

export type SubscriberNewMeta = {
  __typename?: 'SubscriberNewMeta';
  subscriber_email?: Maybe<Scalars['String']>;
};

export type SubscriberResponse = Subscriber | SubscriberError;

export type SubscribersAddResult = {
  __typename?: 'SubscribersAddResult';
  message?: Maybe<Scalars['String']>;
  ok: Scalars['Boolean'];
};

export type SubscribersNode = {
  __typename?: 'SubscribersNode';
  count: Scalars['Int'];
  rows: Array<Subscriber>;
};

export type SubscribersUpdateResult = {
  __typename?: 'SubscribersUpdateResult';
  message?: Maybe<Scalars['String']>;
  ok: Scalars['Boolean'];
};

export type Subscription = {
  __typename?: 'Subscription';
  created_at: Scalars['String'];
  customer_id: Scalars['Int'];
  id: Scalars['Int'];
  plan_id: Scalars['Int'];
  status: Scalars['String'];
  subscription_id: Scalars['Int'];
  updated_at: Scalars['String'];
};

export type SystemMeta = {
  __typename?: 'SystemMeta';
  message?: Maybe<Scalars['String']>;
  slug?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
};

export type Tag = {
  __typename?: 'Tag';
  category?: Maybe<Scalars['String']>;
  id: Scalars['String'];
  name: Scalars['String'];
  posts?: Maybe<PostsResponse>;
  slug: Scalars['String'];
  type: TagType;
};

export type TagResponse = Exception | Tag | UnAuthorized;

export type TagResultError = LetterpadError & {
  __typename?: 'TagResultError';
  message: Scalars['String'];
};

export enum TagType {
  Category = 'category',
  Tag = 'tag'
}

export type TagsFilters = {
  active?: InputMaybe<Scalars['Boolean']>;
  name?: InputMaybe<Scalars['String']>;
  suggest?: InputMaybe<Scalars['Boolean']>;
};

export type TagsInputType = {
  name: Scalars['String'];
  slug: Scalars['String'];
};

export type TagsNode = {
  __typename?: 'TagsNode';
  rows: Array<Tag>;
};

export type TagsResponse = Exception | TagsNode | UnAuthorized;

export type ToggleLikePostResponse = {
  __typename?: 'ToggleLikePostResponse';
  message: Scalars['String'];
  ok: Scalars['Boolean'];
};

export type UnAuthorized = LetterpadError & {
  __typename?: 'UnAuthorized';
  message: Scalars['String'];
};

export type Unexpected = LetterpadError & {
  __typename?: 'Unexpected';
  message: Scalars['String'];
};

export type UpdateDomainResponse = {
  __typename?: 'UpdateDomainResponse';
  message?: Maybe<Scalars['String']>;
  ok: Scalars['Boolean'];
};

export type UpdatePostResponse = Post | PostError | PostTrashed;

export type UpdateSubscriptionResponse = {
  __typename?: 'UpdateSubscriptionResponse';
  message?: Maybe<Scalars['String']>;
  ok: Scalars['Boolean'];
};

export type UpdateTagsResponse = EditTaxResponse | UnAuthorized;



export type ResolverTypeWrapper<T> = Promise<T> | T;


export type ResolverWithResolve<TResult, TParent, TContext, TArgs> = {
  resolve: ResolverFn<TResult, TParent, TContext, TArgs>;
};
export type Resolver<TResult, TParent = {}, TContext = {}, TArgs = {}> = ResolverFn<TResult, TParent, TContext, TArgs> | ResolverWithResolve<TResult, TParent, TContext, TArgs>;

export type ResolverFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => Promise<TResult> | TResult;

export type SubscriptionSubscribeFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => AsyncIterable<TResult> | Promise<AsyncIterable<TResult>>;

export type SubscriptionResolveFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => TResult | Promise<TResult>;

export interface SubscriptionSubscriberObject<TResult, TKey extends string, TParent, TContext, TArgs> {
  subscribe: SubscriptionSubscribeFn<{ [key in TKey]: TResult }, TParent, TContext, TArgs>;
  resolve?: SubscriptionResolveFn<TResult, { [key in TKey]: TResult }, TContext, TArgs>;
}

export interface SubscriptionResolverObject<TResult, TParent, TContext, TArgs> {
  subscribe: SubscriptionSubscribeFn<any, TParent, TContext, TArgs>;
  resolve: SubscriptionResolveFn<TResult, any, TContext, TArgs>;
}

export type SubscriptionObject<TResult, TKey extends string, TParent, TContext, TArgs> =
  | SubscriptionSubscriberObject<TResult, TKey, TParent, TContext, TArgs>
  | SubscriptionResolverObject<TResult, TParent, TContext, TArgs>;

export type SubscriptionResolver<TResult, TKey extends string, TParent = {}, TContext = {}, TArgs = {}> =
  | ((...args: any[]) => SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>)
  | SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>;

export type TypeResolveFn<TTypes, TParent = {}, TContext = {}> = (
  parent: TParent,
  context: TContext,
  info: GraphQLResolveInfo
) => Maybe<TTypes> | Promise<Maybe<TTypes>>;

export type IsTypeOfResolverFn<T = {}, TContext = {}> = (obj: T, context: TContext, info: GraphQLResolveInfo) => boolean | Promise<boolean>;

export type NextResolverFn<T> = () => Promise<T>;

export type DirectiveResolverFn<TResult = {}, TParent = {}, TContext = {}, TArgs = {}> = (
  next: NextResolverFn<TResult>,
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => TResult | Promise<TResult>;

/** Mapping between all available schema types and the resolvers types */
export type ResolversTypes = {
  AboutStats: ResolverTypeWrapper<AboutStats>;
  AboutStatsResponse: ResolverTypeWrapper<AboutStatsResponse>;
  AddDomainResponse: ResolversTypes['Domain'] | ResolversTypes['DomainError'];
  Author: ResolverTypeWrapper<Author>;
  AuthorResponse: ResolversTypes['Author'] | ResolversTypes['Exception'] | ResolversTypes['Failed'] | ResolversTypes['NotFound'] | ResolversTypes['UnAuthorized'];
  Boolean: ResolverTypeWrapper<Scalars['Boolean']>;
  CategoriesResponse: ResolverTypeWrapper<CategoriesResponse>;
  Category: ResolverTypeWrapper<Category>;
  CreatePostResponse: ResolversTypes['Post'] | ResolversTypes['PostError'];
  CreateSubscriptionResponse: ResolverTypeWrapper<CreateSubscriptionResponse>;
  Date: ResolverTypeWrapper<Scalars['Date']>;
  DeleteAuthorResponse: ResolverTypeWrapper<DeleteAuthorResponse>;
  DeleteTagsResponse: ResolversTypes['DeleteTagsResult'] | ResolversTypes['UnAuthorized'];
  DeleteTagsResult: ResolverTypeWrapper<DeleteTagsResult>;
  Design: ResolverTypeWrapper<Design>;
  Domain: ResolverTypeWrapper<Domain>;
  DomainError: ResolverTypeWrapper<DomainError>;
  DomainNotFound: ResolverTypeWrapper<DomainNotFound>;
  DomainResponse: ResolversTypes['Domain'] | ResolversTypes['DomainNotFound'];
  DomainVerification: ResolverTypeWrapper<DomainVerification>;
  EditTaxResponse: ResolverTypeWrapper<EditTaxResponse>;
  Email: ResolverTypeWrapper<Email>;
  EmailError: ResolverTypeWrapper<EmailError>;
  EmailResponse: ResolversTypes['Email'] | ResolversTypes['EmailError'];
  Error: ResolverTypeWrapper<Error>;
  Exception: ResolverTypeWrapper<Exception>;
  Failed: ResolverTypeWrapper<Failed>;
  Feed: ResolverTypeWrapper<Feed>;
  FeedError: ResolverTypeWrapper<FeedError>;
  FeedNode: ResolverTypeWrapper<FeedNode>;
  FeedResponse: ResolversTypes['Feed'] | ResolversTypes['FeedError'];
  FollowAuthor: ResolverTypeWrapper<FollowAuthor>;
  FollowAuthorResponse: ResolverTypeWrapper<FollowAuthorResponse>;
  FollowerNewMeta: ResolverTypeWrapper<FollowerNewMeta>;
  Forbidden: ResolverTypeWrapper<Forbidden>;
  ForgotPasswordResponse: ResolverTypeWrapper<ForgotPasswordResponse>;
  Image: ResolverTypeWrapper<Image>;
  InputAuthor: InputAuthor;
  InputCreateAuthor: InputCreateAuthor;
  InputCreatePost: InputCreatePost;
  InputDesign: InputDesign;
  InputDomain: InputDomain;
  InputImage: InputImage;
  InputNavigation: InputNavigation;
  InputPostStats: InputPostStats;
  InputPublishOptions: InputPublishOptions;
  InputSocial: InputSocial;
  InputTags: InputTags;
  InputUpdateMedia: InputUpdateMedia;
  InputUpdatePost: InputUpdatePost;
  InputUpdateSubscriber: InputUpdateSubscriber;
  Int: ResolverTypeWrapper<Scalars['Int']>;
  InvalidArguments: ResolverTypeWrapper<InvalidArguments>;
  IsFollowingResponse: ResolverTypeWrapper<IsFollowingResponse>;
  IsPostLikedResponse: ResolverTypeWrapper<IsPostLikedResponse>;
  LetterpadError: ResolversTypes['DomainError'] | ResolversTypes['DomainNotFound'] | ResolversTypes['EmailError'] | ResolversTypes['Exception'] | ResolversTypes['Failed'] | ResolversTypes['Forbidden'] | ResolversTypes['InvalidArguments'] | ResolversTypes['LoginError'] | ResolversTypes['NotFound'] | ResolversTypes['PostError'] | ResolversTypes['SettingError'] | ResolversTypes['StatsError'] | ResolversTypes['TagResultError'] | ResolversTypes['UnAuthorized'] | ResolversTypes['Unexpected'];
  LetterpadPostFilters: LetterpadPostFilters;
  Like: ResolverTypeWrapper<Like>;
  LoginData: LoginData;
  LoginError: ResolverTypeWrapper<LoginError>;
  LoginResponse: ResolversTypes['Author'] | ResolversTypes['LoginError'];
  MailStatus: MailStatus;
  Media: ResolverTypeWrapper<Media>;
  MediaDeleteResponse: ResolversTypes['MediaDeleteResult'] | ResolversTypes['UnAuthorized'];
  MediaDeleteResult: ResolverTypeWrapper<MediaDeleteResult>;
  MediaFilters: MediaFilters;
  MediaNode: ResolverTypeWrapper<MediaNode>;
  MediaResponse: ResolversTypes['MediaNode'] | ResolversTypes['UnAuthorized'];
  MediaUpdateResponse: ResolversTypes['MediaUpdateResult'] | ResolversTypes['UnAuthorized'];
  MediaUpdateResult: ResolverTypeWrapper<MediaUpdateResult>;
  Mutation: ResolverTypeWrapper<{}>;
  Navigation: ResolverTypeWrapper<Navigation>;
  NavigationType: NavigationType;
  NotFound: ResolverTypeWrapper<NotFound>;
  Notification: ResolverTypeWrapper<Omit<Notification, 'meta'> & { meta?: Maybe<ResolversTypes['NotificationMeta']> }>;
  NotificationAddResult: ResolverTypeWrapper<NotificationAddResult>;
  NotificationDeleteResult: ResolverTypeWrapper<NotificationDeleteResult>;
  NotificationFilters: NotificationFilters;
  NotificationMeta: ResolversTypes['FollowerNewMeta'] | ResolversTypes['PostLikeMeta'] | ResolversTypes['PostNewMeta'] | ResolversTypes['SubscriberNewMeta'] | ResolversTypes['SystemMeta'];
  NotificationNode: ResolverTypeWrapper<NotificationNode>;
  NotificationResponse: ResolversTypes['NotificationNode'] | ResolversTypes['UnAuthorized'];
  NotificationType: NotificationType;
  NotificationUpdateResult: ResolverTypeWrapper<NotificationUpdateResult>;
  Permissions: Permissions;
  Post: ResolverTypeWrapper<Omit<Post, 'author' | 'tags'> & { author?: Maybe<ResolversTypes['AuthorResponse']>, tags?: Maybe<ResolversTypes['TagsResponse']> }>;
  PostCountsByStatus: ResolverTypeWrapper<PostCountsByStatus>;
  PostError: ResolverTypeWrapper<PostError>;
  PostFilters: PostFilters;
  PostLikeMeta: ResolverTypeWrapper<PostLikeMeta>;
  PostNewMeta: ResolverTypeWrapper<PostNewMeta>;
  PostResponse: ResolversTypes['Exception'] | ResolversTypes['InvalidArguments'] | ResolversTypes['NotFound'] | ResolversTypes['Post'] | ResolversTypes['UnAuthorized'];
  PostStats: ResolverTypeWrapper<PostStats>;
  PostStatusOptions: PostStatusOptions;
  PostTrashed: ResolverTypeWrapper<PostTrashed>;
  PostTypes: PostTypes;
  PostsFilters: PostsFilters;
  PostsNode: ResolverTypeWrapper<PostsNode>;
  PostsResponse: ResolversTypes['Exception'] | ResolversTypes['PostsNode'] | ResolversTypes['UnAuthorized'];
  Query: ResolverTypeWrapper<{}>;
  RegisterStep: RegisterStep;
  RemoveDomainResponse: ResolverTypeWrapper<RemoveDomainResponse>;
  Response: ResolverTypeWrapper<Response>;
  Role: Role;
  Setting: ResolverTypeWrapper<Setting>;
  SettingError: ResolverTypeWrapper<SettingError>;
  SettingInputType: SettingInputType;
  SettingResponse: ResolversTypes['NotFound'] | ResolversTypes['Setting'] | ResolversTypes['UnAuthorized'];
  SiteMapError: ResolverTypeWrapper<SiteMapError>;
  SiteMapList: ResolverTypeWrapper<SiteMapList>;
  SiteMapNode: ResolverTypeWrapper<SiteMapNode>;
  SiteMapResponse: ResolversTypes['SiteMapError'] | ResolversTypes['SiteMapList'];
  Social: ResolverTypeWrapper<Social>;
  SortBy: SortBy;
  Stats: ResolverTypeWrapper<Stats>;
  StatsError: ResolverTypeWrapper<StatsError>;
  StatsResponse: ResolversTypes['Stats'] | ResolversTypes['StatsError'];
  String: ResolverTypeWrapper<Scalars['String']>;
  Subscriber: ResolverTypeWrapper<Subscriber>;
  SubscriberError: ResolverTypeWrapper<SubscriberError>;
  SubscriberNewMeta: ResolverTypeWrapper<SubscriberNewMeta>;
  SubscriberResponse: ResolversTypes['Subscriber'] | ResolversTypes['SubscriberError'];
  SubscribersAddResult: ResolverTypeWrapper<SubscribersAddResult>;
  SubscribersNode: ResolverTypeWrapper<SubscribersNode>;
  SubscribersUpdateResult: ResolverTypeWrapper<SubscribersUpdateResult>;
  Subscription: ResolverTypeWrapper<{}>;
  SystemMeta: ResolverTypeWrapper<SystemMeta>;
  Tag: ResolverTypeWrapper<Omit<Tag, 'posts'> & { posts?: Maybe<ResolversTypes['PostsResponse']> }>;
  TagResponse: ResolversTypes['Exception'] | ResolversTypes['Tag'] | ResolversTypes['UnAuthorized'];
  TagResultError: ResolverTypeWrapper<TagResultError>;
  TagType: TagType;
  TagsFilters: TagsFilters;
  TagsInputType: TagsInputType;
  TagsNode: ResolverTypeWrapper<TagsNode>;
  TagsResponse: ResolversTypes['Exception'] | ResolversTypes['TagsNode'] | ResolversTypes['UnAuthorized'];
  ToggleLikePostResponse: ResolverTypeWrapper<ToggleLikePostResponse>;
  UnAuthorized: ResolverTypeWrapper<UnAuthorized>;
  Unexpected: ResolverTypeWrapper<Unexpected>;
  UpdateDomainResponse: ResolverTypeWrapper<UpdateDomainResponse>;
  UpdatePostResponse: ResolversTypes['Post'] | ResolversTypes['PostError'] | ResolversTypes['PostTrashed'];
  UpdateSubscriptionResponse: ResolverTypeWrapper<UpdateSubscriptionResponse>;
  UpdateTagsResponse: ResolversTypes['EditTaxResponse'] | ResolversTypes['UnAuthorized'];
};

/** Mapping between all available schema types and the resolvers parents */
export type ResolversParentTypes = {
  AboutStats: AboutStats;
  AboutStatsResponse: AboutStatsResponse;
  AddDomainResponse: ResolversParentTypes['Domain'] | ResolversParentTypes['DomainError'];
  Author: Author;
  AuthorResponse: ResolversParentTypes['Author'] | ResolversParentTypes['Exception'] | ResolversParentTypes['Failed'] | ResolversParentTypes['NotFound'] | ResolversParentTypes['UnAuthorized'];
  Boolean: Scalars['Boolean'];
  CategoriesResponse: CategoriesResponse;
  Category: Category;
  CreatePostResponse: ResolversParentTypes['Post'] | ResolversParentTypes['PostError'];
  CreateSubscriptionResponse: CreateSubscriptionResponse;
  Date: Scalars['Date'];
  DeleteAuthorResponse: DeleteAuthorResponse;
  DeleteTagsResponse: ResolversParentTypes['DeleteTagsResult'] | ResolversParentTypes['UnAuthorized'];
  DeleteTagsResult: DeleteTagsResult;
  Design: Design;
  Domain: Domain;
  DomainError: DomainError;
  DomainNotFound: DomainNotFound;
  DomainResponse: ResolversParentTypes['Domain'] | ResolversParentTypes['DomainNotFound'];
  DomainVerification: DomainVerification;
  EditTaxResponse: EditTaxResponse;
  Email: Email;
  EmailError: EmailError;
  EmailResponse: ResolversParentTypes['Email'] | ResolversParentTypes['EmailError'];
  Error: Error;
  Exception: Exception;
  Failed: Failed;
  Feed: Feed;
  FeedError: FeedError;
  FeedNode: FeedNode;
  FeedResponse: ResolversParentTypes['Feed'] | ResolversParentTypes['FeedError'];
  FollowAuthor: FollowAuthor;
  FollowAuthorResponse: FollowAuthorResponse;
  FollowerNewMeta: FollowerNewMeta;
  Forbidden: Forbidden;
  ForgotPasswordResponse: ForgotPasswordResponse;
  Image: Image;
  InputAuthor: InputAuthor;
  InputCreateAuthor: InputCreateAuthor;
  InputCreatePost: InputCreatePost;
  InputDesign: InputDesign;
  InputDomain: InputDomain;
  InputImage: InputImage;
  InputNavigation: InputNavigation;
  InputPostStats: InputPostStats;
  InputPublishOptions: InputPublishOptions;
  InputSocial: InputSocial;
  InputTags: InputTags;
  InputUpdateMedia: InputUpdateMedia;
  InputUpdatePost: InputUpdatePost;
  InputUpdateSubscriber: InputUpdateSubscriber;
  Int: Scalars['Int'];
  InvalidArguments: InvalidArguments;
  IsFollowingResponse: IsFollowingResponse;
  IsPostLikedResponse: IsPostLikedResponse;
  LetterpadError: ResolversParentTypes['DomainError'] | ResolversParentTypes['DomainNotFound'] | ResolversParentTypes['EmailError'] | ResolversParentTypes['Exception'] | ResolversParentTypes['Failed'] | ResolversParentTypes['Forbidden'] | ResolversParentTypes['InvalidArguments'] | ResolversParentTypes['LoginError'] | ResolversParentTypes['NotFound'] | ResolversParentTypes['PostError'] | ResolversParentTypes['SettingError'] | ResolversParentTypes['StatsError'] | ResolversParentTypes['TagResultError'] | ResolversParentTypes['UnAuthorized'] | ResolversParentTypes['Unexpected'];
  LetterpadPostFilters: LetterpadPostFilters;
  Like: Like;
  LoginData: LoginData;
  LoginError: LoginError;
  LoginResponse: ResolversParentTypes['Author'] | ResolversParentTypes['LoginError'];
  Media: Media;
  MediaDeleteResponse: ResolversParentTypes['MediaDeleteResult'] | ResolversParentTypes['UnAuthorized'];
  MediaDeleteResult: MediaDeleteResult;
  MediaFilters: MediaFilters;
  MediaNode: MediaNode;
  MediaResponse: ResolversParentTypes['MediaNode'] | ResolversParentTypes['UnAuthorized'];
  MediaUpdateResponse: ResolversParentTypes['MediaUpdateResult'] | ResolversParentTypes['UnAuthorized'];
  MediaUpdateResult: MediaUpdateResult;
  Mutation: {};
  Navigation: Navigation;
  NotFound: NotFound;
  Notification: Omit<Notification, 'meta'> & { meta?: Maybe<ResolversParentTypes['NotificationMeta']> };
  NotificationAddResult: NotificationAddResult;
  NotificationDeleteResult: NotificationDeleteResult;
  NotificationFilters: NotificationFilters;
  NotificationMeta: ResolversParentTypes['FollowerNewMeta'] | ResolversParentTypes['PostLikeMeta'] | ResolversParentTypes['PostNewMeta'] | ResolversParentTypes['SubscriberNewMeta'] | ResolversParentTypes['SystemMeta'];
  NotificationNode: NotificationNode;
  NotificationResponse: ResolversParentTypes['NotificationNode'] | ResolversParentTypes['UnAuthorized'];
  NotificationUpdateResult: NotificationUpdateResult;
  Post: Omit<Post, 'author' | 'tags'> & { author?: Maybe<ResolversParentTypes['AuthorResponse']>, tags?: Maybe<ResolversParentTypes['TagsResponse']> };
  PostCountsByStatus: PostCountsByStatus;
  PostError: PostError;
  PostFilters: PostFilters;
  PostLikeMeta: PostLikeMeta;
  PostNewMeta: PostNewMeta;
  PostResponse: ResolversParentTypes['Exception'] | ResolversParentTypes['InvalidArguments'] | ResolversParentTypes['NotFound'] | ResolversParentTypes['Post'] | ResolversParentTypes['UnAuthorized'];
  PostStats: PostStats;
  PostTrashed: PostTrashed;
  PostsFilters: PostsFilters;
  PostsNode: PostsNode;
  PostsResponse: ResolversParentTypes['Exception'] | ResolversParentTypes['PostsNode'] | ResolversParentTypes['UnAuthorized'];
  Query: {};
  RemoveDomainResponse: RemoveDomainResponse;
  Response: Response;
  Setting: Setting;
  SettingError: SettingError;
  SettingInputType: SettingInputType;
  SettingResponse: ResolversParentTypes['NotFound'] | ResolversParentTypes['Setting'] | ResolversParentTypes['UnAuthorized'];
  SiteMapError: SiteMapError;
  SiteMapList: SiteMapList;
  SiteMapNode: SiteMapNode;
  SiteMapResponse: ResolversParentTypes['SiteMapError'] | ResolversParentTypes['SiteMapList'];
  Social: Social;
  Stats: Stats;
  StatsError: StatsError;
  StatsResponse: ResolversParentTypes['Stats'] | ResolversParentTypes['StatsError'];
  String: Scalars['String'];
  Subscriber: Subscriber;
  SubscriberError: SubscriberError;
  SubscriberNewMeta: SubscriberNewMeta;
  SubscriberResponse: ResolversParentTypes['Subscriber'] | ResolversParentTypes['SubscriberError'];
  SubscribersAddResult: SubscribersAddResult;
  SubscribersNode: SubscribersNode;
  SubscribersUpdateResult: SubscribersUpdateResult;
  Subscription: {};
  SystemMeta: SystemMeta;
  Tag: Omit<Tag, 'posts'> & { posts?: Maybe<ResolversParentTypes['PostsResponse']> };
  TagResponse: ResolversParentTypes['Exception'] | ResolversParentTypes['Tag'] | ResolversParentTypes['UnAuthorized'];
  TagResultError: TagResultError;
  TagsFilters: TagsFilters;
  TagsInputType: TagsInputType;
  TagsNode: TagsNode;
  TagsResponse: ResolversParentTypes['Exception'] | ResolversParentTypes['TagsNode'] | ResolversParentTypes['UnAuthorized'];
  ToggleLikePostResponse: ToggleLikePostResponse;
  UnAuthorized: UnAuthorized;
  Unexpected: Unexpected;
  UpdateDomainResponse: UpdateDomainResponse;
  UpdatePostResponse: ResolversParentTypes['Post'] | ResolversParentTypes['PostError'] | ResolversParentTypes['PostTrashed'];
  UpdateSubscriptionResponse: UpdateSubscriptionResponse;
  UpdateTagsResponse: ResolversParentTypes['EditTaxResponse'] | ResolversParentTypes['UnAuthorized'];
};

export type IsAuthDirectiveArgs = { };

export type IsAuthDirectiveResolver<Result, Parent, ContextType = any, Args = IsAuthDirectiveArgs> = DirectiveResolverFn<Result, Parent, ContextType, Args>;

export type MaskIfUnauthDirectiveArgs = { };

export type MaskIfUnauthDirectiveResolver<Result, Parent, ContextType = any, Args = MaskIfUnauthDirectiveArgs> = DirectiveResolverFn<Result, Parent, ContextType, Args>;

export type AboutStatsResolvers<ContextType = any, ParentType extends ResolversParentTypes['AboutStats'] = ResolversParentTypes['AboutStats']> = {
  followerCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  followingCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  postCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AboutStatsResponseResolvers<ContextType = any, ParentType extends ResolversParentTypes['AboutStatsResponse'] = ResolversParentTypes['AboutStatsResponse']> = {
  ok?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  stats?: Resolver<Maybe<ResolversTypes['AboutStats']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AddDomainResponseResolvers<ContextType = any, ParentType extends ResolversParentTypes['AddDomainResponse'] = ResolversParentTypes['AddDomainResponse']> = {
  __resolveType: TypeResolveFn<'Domain' | 'DomainError', ParentType, ContextType>;
};

export type AuthorResolvers<ContextType = any, ParentType extends ResolversParentTypes['Author'] = ResolversParentTypes['Author']> = {
  accessToken?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  analytics_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  analytics_uuid?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  avatar?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  bio?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  company_name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  createdAt?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  email?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  first_post_published?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  followers?: Resolver<Maybe<Array<Maybe<ResolversTypes['FollowAuthor']>>>, ParentType, ContextType>;
  following?: Resolver<Maybe<Array<Maybe<ResolversTypes['FollowAuthor']>>>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  occupation?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  permissions?: Resolver<Maybe<Array<ResolversTypes['Permissions']>>, ParentType, ContextType>;
  profile_updated?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  register_step?: Resolver<Maybe<ResolversTypes['RegisterStep']>, ParentType, ContextType>;
  role?: Resolver<Maybe<ResolversTypes['Role']>, ParentType, ContextType>;
  settings_updated?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  signature?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  social?: Resolver<Maybe<ResolversTypes['Social']>, ParentType, ContextType>;
  stripe_customer_id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  stripe_subscription_id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  username?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  verified?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AuthorResponseResolvers<ContextType = any, ParentType extends ResolversParentTypes['AuthorResponse'] = ResolversParentTypes['AuthorResponse']> = {
  __resolveType: TypeResolveFn<'Author' | 'Exception' | 'Failed' | 'NotFound' | 'UnAuthorized', ParentType, ContextType>;
};

export type CategoriesResponseResolvers<ContextType = any, ParentType extends ResolversParentTypes['CategoriesResponse'] = ResolversParentTypes['CategoriesResponse']> = {
  message?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  ok?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  rows?: Resolver<Maybe<Array<Maybe<ResolversTypes['Category']>>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CategoryResolvers<ContextType = any, ParentType extends ResolversParentTypes['Category'] = ResolversParentTypes['Category']> = {
  count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  slug?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CreatePostResponseResolvers<ContextType = any, ParentType extends ResolversParentTypes['CreatePostResponse'] = ResolversParentTypes['CreatePostResponse']> = {
  __resolveType: TypeResolveFn<'Post' | 'PostError', ParentType, ContextType>;
};

export type CreateSubscriptionResponseResolvers<ContextType = any, ParentType extends ResolversParentTypes['CreateSubscriptionResponse'] = ResolversParentTypes['CreateSubscriptionResponse']> = {
  message?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  ok?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export interface DateScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['Date'], any> {
  name: 'Date';
}

export type DeleteAuthorResponseResolvers<ContextType = any, ParentType extends ResolversParentTypes['DeleteAuthorResponse'] = ResolversParentTypes['DeleteAuthorResponse']> = {
  message?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  ok?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type DeleteTagsResponseResolvers<ContextType = any, ParentType extends ResolversParentTypes['DeleteTagsResponse'] = ResolversParentTypes['DeleteTagsResponse']> = {
  __resolveType: TypeResolveFn<'DeleteTagsResult' | 'UnAuthorized', ParentType, ContextType>;
};

export type DeleteTagsResultResolvers<ContextType = any, ParentType extends ResolversParentTypes['DeleteTagsResult'] = ResolversParentTypes['DeleteTagsResult']> = {
  ok?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type DesignResolvers<ContextType = any, ParentType extends ResolversParentTypes['Design'] = ResolversParentTypes['Design']> = {
  brand_color?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  primary_font?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  secondary_font?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type DomainResolvers<ContextType = any, ParentType extends ResolversParentTypes['Domain'] = ResolversParentTypes['Domain']> = {
  configured?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  mapped?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  ssl?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  verification?: Resolver<Maybe<Array<Maybe<ResolversTypes['DomainVerification']>>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type DomainErrorResolvers<ContextType = any, ParentType extends ResolversParentTypes['DomainError'] = ResolversParentTypes['DomainError']> = {
  message?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type DomainNotFoundResolvers<ContextType = any, ParentType extends ResolversParentTypes['DomainNotFound'] = ResolversParentTypes['DomainNotFound']> = {
  message?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type DomainResponseResolvers<ContextType = any, ParentType extends ResolversParentTypes['DomainResponse'] = ResolversParentTypes['DomainResponse']> = {
  __resolveType: TypeResolveFn<'Domain' | 'DomainNotFound', ParentType, ContextType>;
};

export type DomainVerificationResolvers<ContextType = any, ParentType extends ResolversParentTypes['DomainVerification'] = ResolversParentTypes['DomainVerification']> = {
  domain?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  reason?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  type?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  value?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type EditTaxResponseResolvers<ContextType = any, ParentType extends ResolversParentTypes['EditTaxResponse'] = ResolversParentTypes['EditTaxResponse']> = {
  ok?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type EmailResolvers<ContextType = any, ParentType extends ResolversParentTypes['Email'] = ResolversParentTypes['Email']> = {
  body?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  subject?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  template_id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type EmailErrorResolvers<ContextType = any, ParentType extends ResolversParentTypes['EmailError'] = ResolversParentTypes['EmailError']> = {
  message?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type EmailResponseResolvers<ContextType = any, ParentType extends ResolversParentTypes['EmailResponse'] = ResolversParentTypes['EmailResponse']> = {
  __resolveType: TypeResolveFn<'Email' | 'EmailError', ParentType, ContextType>;
};

export type ErrorResolvers<ContextType = any, ParentType extends ResolversParentTypes['Error'] = ResolversParentTypes['Error']> = {
  message?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  path?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ExceptionResolvers<ContextType = any, ParentType extends ResolversParentTypes['Exception'] = ResolversParentTypes['Exception']> = {
  message?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type FailedResolvers<ContextType = any, ParentType extends ResolversParentTypes['Failed'] = ResolversParentTypes['Failed']> = {
  message?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  type?: Resolver<Maybe<ResolversTypes['Failed']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type FeedResolvers<ContextType = any, ParentType extends ResolversParentTypes['Feed'] = ResolversParentTypes['Feed']> = {
  rows?: Resolver<Array<ResolversTypes['FeedNode']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type FeedErrorResolvers<ContextType = any, ParentType extends ResolversParentTypes['FeedError'] = ResolversParentTypes['FeedError']> = {
  message?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type FeedNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['FeedNode'] = ResolversParentTypes['FeedNode']> = {
  author?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  categories?: Resolver<Array<ResolversTypes['String']>, ParentType, ContextType>;
  description?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  guid?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  link?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  pubDate?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type FeedResponseResolvers<ContextType = any, ParentType extends ResolversParentTypes['FeedResponse'] = ResolversParentTypes['FeedResponse']> = {
  __resolveType: TypeResolveFn<'Feed' | 'FeedError', ParentType, ContextType>;
};

export type FollowAuthorResolvers<ContextType = any, ParentType extends ResolversParentTypes['FollowAuthor'] = ResolversParentTypes['FollowAuthor']> = {
  avatar?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  createdAt?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  username?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type FollowAuthorResponseResolvers<ContextType = any, ParentType extends ResolversParentTypes['FollowAuthorResponse'] = ResolversParentTypes['FollowAuthorResponse']> = {
  message?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  ok?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type FollowerNewMetaResolvers<ContextType = any, ParentType extends ResolversParentTypes['FollowerNewMeta'] = ResolversParentTypes['FollowerNewMeta']> = {
  followed_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  follower_avatar?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  follower_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  follower_name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  follower_username?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ForbiddenResolvers<ContextType = any, ParentType extends ResolversParentTypes['Forbidden'] = ResolversParentTypes['Forbidden']> = {
  message?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  type?: Resolver<Maybe<ResolversTypes['Failed']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ForgotPasswordResponseResolvers<ContextType = any, ParentType extends ResolversParentTypes['ForgotPasswordResponse'] = ResolversParentTypes['ForgotPasswordResponse']> = {
  message?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  ok?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ImageResolvers<ContextType = any, ParentType extends ResolversParentTypes['Image'] = ResolversParentTypes['Image']> = {
  height?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  src?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  width?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type InvalidArgumentsResolvers<ContextType = any, ParentType extends ResolversParentTypes['InvalidArguments'] = ResolversParentTypes['InvalidArguments']> = {
  message?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type IsFollowingResponseResolvers<ContextType = any, ParentType extends ResolversParentTypes['IsFollowingResponse'] = ResolversParentTypes['IsFollowingResponse']> = {
  following?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  message?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  ok?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type IsPostLikedResponseResolvers<ContextType = any, ParentType extends ResolversParentTypes['IsPostLikedResponse'] = ResolversParentTypes['IsPostLikedResponse']> = {
  liked?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  message?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  ok?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type LetterpadErrorResolvers<ContextType = any, ParentType extends ResolversParentTypes['LetterpadError'] = ResolversParentTypes['LetterpadError']> = {
  __resolveType: TypeResolveFn<'DomainError' | 'DomainNotFound' | 'EmailError' | 'Exception' | 'Failed' | 'Forbidden' | 'InvalidArguments' | 'LoginError' | 'NotFound' | 'PostError' | 'SettingError' | 'StatsError' | 'TagResultError' | 'UnAuthorized' | 'Unexpected', ParentType, ContextType>;
  message?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
};

export type LikeResolvers<ContextType = any, ParentType extends ResolversParentTypes['Like'] = ResolversParentTypes['Like']> = {
  avatar?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  username?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type LoginErrorResolvers<ContextType = any, ParentType extends ResolversParentTypes['LoginError'] = ResolversParentTypes['LoginError']> = {
  message?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type LoginResponseResolvers<ContextType = any, ParentType extends ResolversParentTypes['LoginResponse'] = ResolversParentTypes['LoginResponse']> = {
  __resolveType: TypeResolveFn<'Author' | 'LoginError', ParentType, ContextType>;
};

export type MediaResolvers<ContextType = any, ParentType extends ResolversParentTypes['Media'] = ResolversParentTypes['Media']> = {
  authorId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['Date'], ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  height?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  width?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type MediaDeleteResponseResolvers<ContextType = any, ParentType extends ResolversParentTypes['MediaDeleteResponse'] = ResolversParentTypes['MediaDeleteResponse']> = {
  __resolveType: TypeResolveFn<'MediaDeleteResult' | 'UnAuthorized', ParentType, ContextType>;
};

export type MediaDeleteResultResolvers<ContextType = any, ParentType extends ResolversParentTypes['MediaDeleteResult'] = ResolversParentTypes['MediaDeleteResult']> = {
  ok?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type MediaNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['MediaNode'] = ResolversParentTypes['MediaNode']> = {
  count?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  rows?: Resolver<Array<ResolversTypes['Media']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type MediaResponseResolvers<ContextType = any, ParentType extends ResolversParentTypes['MediaResponse'] = ResolversParentTypes['MediaResponse']> = {
  __resolveType: TypeResolveFn<'MediaNode' | 'UnAuthorized', ParentType, ContextType>;
};

export type MediaUpdateResponseResolvers<ContextType = any, ParentType extends ResolversParentTypes['MediaUpdateResponse'] = ResolversParentTypes['MediaUpdateResponse']> = {
  __resolveType: TypeResolveFn<'MediaUpdateResult' | 'UnAuthorized', ParentType, ContextType>;
};

export type MediaUpdateResultResolvers<ContextType = any, ParentType extends ResolversParentTypes['MediaUpdateResult'] = ResolversParentTypes['MediaUpdateResult']> = {
  ok?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type MutationResolvers<ContextType = any, ParentType extends ResolversParentTypes['Mutation'] = ResolversParentTypes['Mutation']> = {
  addDomain?: Resolver<ResolversTypes['AddDomainResponse'], ParentType, ContextType, Partial<MutationAddDomainArgs>>;
  addSubscriber?: Resolver<Maybe<ResolversTypes['SubscribersAddResult']>, ParentType, ContextType, RequireFields<MutationAddSubscriberArgs, 'email'>>;
  createAuthor?: Resolver<Maybe<ResolversTypes['AuthorResponse']>, ParentType, ContextType, RequireFields<MutationCreateAuthorArgs, 'data'>>;
  createPost?: Resolver<ResolversTypes['CreatePostResponse'], ParentType, ContextType, Partial<MutationCreatePostArgs>>;
  deleteAuthor?: Resolver<Maybe<ResolversTypes['DeleteAuthorResponse']>, ParentType, ContextType>;
  deleteMedia?: Resolver<Maybe<ResolversTypes['MediaDeleteResponse']>, ParentType, ContextType, RequireFields<MutationDeleteMediaArgs, 'ids'>>;
  deleteTags?: Resolver<ResolversTypes['DeleteTagsResponse'], ParentType, ContextType, RequireFields<MutationDeleteTagsArgs, 'name'>>;
  followAuthor?: Resolver<ResolversTypes['FollowAuthorResponse'], ParentType, ContextType, RequireFields<MutationFollowAuthorArgs, 'username'>>;
  forgotPassword?: Resolver<ResolversTypes['ForgotPasswordResponse'], ParentType, ContextType, RequireFields<MutationForgotPasswordArgs, 'email'>>;
  likePost?: Resolver<ResolversTypes['ToggleLikePostResponse'], ParentType, ContextType, RequireFields<MutationLikePostArgs, 'postId'>>;
  login?: Resolver<Maybe<ResolversTypes['LoginResponse']>, ParentType, ContextType, Partial<MutationLoginArgs>>;
  markAllAsRead?: Resolver<ResolversTypes['NotificationUpdateResult'], ParentType, ContextType>;
  markAsRead?: Resolver<ResolversTypes['NotificationUpdateResult'], ParentType, ContextType, RequireFields<MutationMarkAsReadArgs, 'notification_id'>>;
  removeDomain?: Resolver<ResolversTypes['RemoveDomainResponse'], ParentType, ContextType>;
  resetPassword?: Resolver<ResolversTypes['ForgotPasswordResponse'], ParentType, ContextType, RequireFields<MutationResetPasswordArgs, 'password' | 'token'>>;
  unFollowAuthor?: Resolver<ResolversTypes['FollowAuthorResponse'], ParentType, ContextType, RequireFields<MutationUnFollowAuthorArgs, 'username'>>;
  unLikePost?: Resolver<ResolversTypes['ToggleLikePostResponse'], ParentType, ContextType, RequireFields<MutationUnLikePostArgs, 'postId'>>;
  updateAuthor?: Resolver<Maybe<ResolversTypes['AuthorResponse']>, ParentType, ContextType, RequireFields<MutationUpdateAuthorArgs, 'author'>>;
  updateMedia?: Resolver<Maybe<ResolversTypes['MediaUpdateResponse']>, ParentType, ContextType, RequireFields<MutationUpdateMediaArgs, 'data'>>;
  updateOptions?: Resolver<Maybe<ResolversTypes['SettingResponse']>, ParentType, ContextType, RequireFields<MutationUpdateOptionsArgs, 'options'>>;
  updatePost?: Resolver<ResolversTypes['UpdatePostResponse'], ParentType, ContextType, Partial<MutationUpdatePostArgs>>;
  updateSubscriber?: Resolver<ResolversTypes['SubscribersUpdateResult'], ParentType, ContextType, RequireFields<MutationUpdateSubscriberArgs, 'data'>>;
  updateTags?: Resolver<ResolversTypes['UpdateTagsResponse'], ParentType, ContextType, Partial<MutationUpdateTagsArgs>>;
};

export type NavigationResolvers<ContextType = any, ParentType extends ResolversParentTypes['Navigation'] = ResolversParentTypes['Navigation']> = {
  label?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  original_name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  slug?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  type?: Resolver<ResolversTypes['NavigationType'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type NotFoundResolvers<ContextType = any, ParentType extends ResolversParentTypes['NotFound'] = ResolversParentTypes['NotFound']> = {
  message?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type NotificationResolvers<ContextType = any, ParentType extends ResolversParentTypes['Notification'] = ResolversParentTypes['Notification']> = {
  author_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['Date'], ParentType, ContextType>;
  is_read?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  mail_sent?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  meta?: Resolver<Maybe<ResolversTypes['NotificationMeta']>, ParentType, ContextType>;
  notification_id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['Date'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type NotificationAddResultResolvers<ContextType = any, ParentType extends ResolversParentTypes['NotificationAddResult'] = ResolversParentTypes['NotificationAddResult']> = {
  message?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  ok?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type NotificationDeleteResultResolvers<ContextType = any, ParentType extends ResolversParentTypes['NotificationDeleteResult'] = ResolversParentTypes['NotificationDeleteResult']> = {
  message?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  ok?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type NotificationMetaResolvers<ContextType = any, ParentType extends ResolversParentTypes['NotificationMeta'] = ResolversParentTypes['NotificationMeta']> = {
  __resolveType: TypeResolveFn<'FollowerNewMeta' | 'PostLikeMeta' | 'PostNewMeta' | 'SubscriberNewMeta' | 'SystemMeta', ParentType, ContextType>;
};

export type NotificationNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['NotificationNode'] = ResolversParentTypes['NotificationNode']> = {
  count?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  rows?: Resolver<Array<Maybe<ResolversTypes['Notification']>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type NotificationResponseResolvers<ContextType = any, ParentType extends ResolversParentTypes['NotificationResponse'] = ResolversParentTypes['NotificationResponse']> = {
  __resolveType: TypeResolveFn<'NotificationNode' | 'UnAuthorized', ParentType, ContextType>;
};

export type NotificationUpdateResultResolvers<ContextType = any, ParentType extends ResolversParentTypes['NotificationUpdateResult'] = ResolversParentTypes['NotificationUpdateResult']> = {
  message?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  ok?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type PostResolvers<ContextType = any, ParentType extends ResolversParentTypes['Post'] = ResolversParentTypes['Post']> = {
  author?: Resolver<Maybe<ResolversTypes['AuthorResponse']>, ParentType, ContextType>;
  cover_image?: Resolver<ResolversTypes['Image'], ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['Date'], ParentType, ContextType>;
  excerpt?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  featured?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  html?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  html_draft?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  likes?: Resolver<Maybe<Array<Maybe<ResolversTypes['Like']>>>, ParentType, ContextType>;
  mail_status?: Resolver<Maybe<ResolversTypes['MailStatus']>, ParentType, ContextType>;
  page_data?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  page_type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  publishedAt?: Resolver<Maybe<ResolversTypes['Date']>, ParentType, ContextType>;
  reading_time?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  scheduledAt?: Resolver<Maybe<ResolversTypes['Date']>, ParentType, ContextType>;
  slug?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  stats?: Resolver<Maybe<ResolversTypes['PostStats']>, ParentType, ContextType>;
  status?: Resolver<ResolversTypes['PostStatusOptions'], ParentType, ContextType>;
  sub_title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  tags?: Resolver<Maybe<ResolversTypes['TagsResponse']>, ParentType, ContextType>;
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  type?: Resolver<ResolversTypes['PostTypes'], ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['Date'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type PostCountsByStatusResolvers<ContextType = any, ParentType extends ResolversParentTypes['PostCountsByStatus'] = ResolversParentTypes['PostCountsByStatus']> = {
  drafts?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  published?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  trashed?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type PostErrorResolvers<ContextType = any, ParentType extends ResolversParentTypes['PostError'] = ResolversParentTypes['PostError']> = {
  message?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type PostLikeMetaResolvers<ContextType = any, ParentType extends ResolversParentTypes['PostLikeMeta'] = ResolversParentTypes['PostLikeMeta']> = {
  author_avatar?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  author_name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  author_username?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  post_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  post_slug?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  post_title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type PostNewMetaResolvers<ContextType = any, ParentType extends ResolversParentTypes['PostNewMeta'] = ResolversParentTypes['PostNewMeta']> = {
  author_avatar?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  author_name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  author_username?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  post_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  post_slug?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  post_title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type PostResponseResolvers<ContextType = any, ParentType extends ResolversParentTypes['PostResponse'] = ResolversParentTypes['PostResponse']> = {
  __resolveType: TypeResolveFn<'Exception' | 'InvalidArguments' | 'NotFound' | 'Post' | 'UnAuthorized', ParentType, ContextType>;
};

export type PostStatsResolvers<ContextType = any, ParentType extends ResolversParentTypes['PostStats'] = ResolversParentTypes['PostStats']> = {
  characters?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  reading_time?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  spaceless_characters?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  words?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type PostTrashedResolvers<ContextType = any, ParentType extends ResolversParentTypes['PostTrashed'] = ResolversParentTypes['PostTrashed']> = {
  message?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type PostsNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['PostsNode'] = ResolversParentTypes['PostsNode']> = {
  count?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  rows?: Resolver<Array<ResolversTypes['Post']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type PostsResponseResolvers<ContextType = any, ParentType extends ResolversParentTypes['PostsResponse'] = ResolversParentTypes['PostsResponse']> = {
  __resolveType: TypeResolveFn<'Exception' | 'PostsNode' | 'UnAuthorized', ParentType, ContextType>;
};

export type QueryResolvers<ContextType = any, ParentType extends ResolversParentTypes['Query'] = ResolversParentTypes['Query']> = {
  aboutStats?: Resolver<ResolversTypes['AboutStatsResponse'], ParentType, ContextType, RequireFields<QueryAboutStatsArgs, 'username'>>;
  categories?: Resolver<ResolversTypes['CategoriesResponse'], ParentType, ContextType>;
  certs?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  createSubscription?: Resolver<ResolversTypes['CreateSubscriptionResponse'], ParentType, ContextType, Partial<QueryCreateSubscriptionArgs>>;
  domain?: Resolver<ResolversTypes['DomainResponse'], ParentType, ContextType>;
  email?: Resolver<ResolversTypes['EmailResponse'], ParentType, ContextType, Partial<QueryEmailArgs>>;
  emails?: Resolver<Array<Maybe<ResolversTypes['Email']>>, ParentType, ContextType>;
  feed?: Resolver<ResolversTypes['FeedResponse'], ParentType, ContextType>;
  isFollowing?: Resolver<ResolversTypes['IsFollowingResponse'], ParentType, ContextType, RequireFields<QueryIsFollowingArgs, 'username'>>;
  isPostLiked?: Resolver<ResolversTypes['IsPostLikedResponse'], ParentType, ContextType, RequireFields<QueryIsPostLikedArgs, 'postId'>>;
  letterpadLatestPost?: Resolver<ResolversTypes['PostResponse'], ParentType, ContextType, Partial<QueryLetterpadLatestPostArgs>>;
  letterpadLatestPosts?: Resolver<ResolversTypes['PostsResponse'], ParentType, ContextType, Partial<QueryLetterpadLatestPostsArgs>>;
  me?: Resolver<Maybe<ResolversTypes['AuthorResponse']>, ParentType, ContextType>;
  media?: Resolver<ResolversTypes['MediaResponse'], ParentType, ContextType, Partial<QueryMediaArgs>>;
  notifications?: Resolver<ResolversTypes['NotificationResponse'], ParentType, ContextType, Partial<QueryNotificationsArgs>>;
  post?: Resolver<ResolversTypes['PostResponse'], ParentType, ContextType, Partial<QueryPostArgs>>;
  posts?: Resolver<ResolversTypes['PostsResponse'], ParentType, ContextType, Partial<QueryPostsArgs>>;
  settings?: Resolver<ResolversTypes['SettingResponse'], ParentType, ContextType>;
  sitemap?: Resolver<ResolversTypes['SiteMapResponse'], ParentType, ContextType>;
  sitemaps?: Resolver<ResolversTypes['SiteMapResponse'], ParentType, ContextType>;
  stats?: Resolver<Maybe<ResolversTypes['StatsResponse']>, ParentType, ContextType>;
  subscriber?: Resolver<ResolversTypes['SubscriberResponse'], ParentType, ContextType, Partial<QuerySubscriberArgs>>;
  subscribers?: Resolver<ResolversTypes['SubscribersNode'], ParentType, ContextType, Partial<QuerySubscribersArgs>>;
  tag?: Resolver<ResolversTypes['TagResponse'], ParentType, ContextType, RequireFields<QueryTagArgs, 'slug'>>;
  tags?: Resolver<ResolversTypes['TagsResponse'], ParentType, ContextType, Partial<QueryTagsArgs>>;
  updateSubscription?: Resolver<ResolversTypes['UpdateSubscriptionResponse'], ParentType, ContextType, Partial<QueryUpdateSubscriptionArgs>>;
};

export type RemoveDomainResponseResolvers<ContextType = any, ParentType extends ResolversParentTypes['RemoveDomainResponse'] = ResolversParentTypes['RemoveDomainResponse']> = {
  message?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  ok?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ResponseResolvers<ContextType = any, ParentType extends ResolversParentTypes['Response'] = ResolversParentTypes['Response']> = {
  errors?: Resolver<Maybe<Array<ResolversTypes['Error']>>, ParentType, ContextType>;
  ok?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  post?: Resolver<Maybe<ResolversTypes['Post']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SettingResolvers<ContextType = any, ParentType extends ResolversParentTypes['Setting'] = ResolversParentTypes['Setting']> = {
  banner?: Resolver<Maybe<ResolversTypes['Image']>, ParentType, ContextType>;
  client_token?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  cloudinary_key?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  cloudinary_name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  cloudinary_secret?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  css?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  design?: Resolver<Maybe<ResolversTypes['Design']>, ParentType, ContextType>;
  display_author_info?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  intro_dismissed?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  menu?: Resolver<Array<ResolversTypes['Navigation']>, ParentType, ContextType>;
  openai_key?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  scripts?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  show_about_page?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  show_tags_page?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  site_description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  site_email?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  site_favicon?: Resolver<Maybe<ResolversTypes['Image']>, ParentType, ContextType>;
  site_footer?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  site_logo?: Resolver<Maybe<ResolversTypes['Image']>, ParentType, ContextType>;
  site_tagline?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  site_title?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  site_url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  subscribe_embed?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  theme?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SettingErrorResolvers<ContextType = any, ParentType extends ResolversParentTypes['SettingError'] = ResolversParentTypes['SettingError']> = {
  message?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SettingResponseResolvers<ContextType = any, ParentType extends ResolversParentTypes['SettingResponse'] = ResolversParentTypes['SettingResponse']> = {
  __resolveType: TypeResolveFn<'NotFound' | 'Setting' | 'UnAuthorized', ParentType, ContextType>;
};

export type SiteMapErrorResolvers<ContextType = any, ParentType extends ResolversParentTypes['SiteMapError'] = ResolversParentTypes['SiteMapError']> = {
  message?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SiteMapListResolvers<ContextType = any, ParentType extends ResolversParentTypes['SiteMapList'] = ResolversParentTypes['SiteMapList']> = {
  rows?: Resolver<Array<ResolversTypes['SiteMapNode']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SiteMapNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['SiteMapNode'] = ResolversParentTypes['SiteMapNode']> = {
  changefreq?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  lastmod?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  priority?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  route?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SiteMapResponseResolvers<ContextType = any, ParentType extends ResolversParentTypes['SiteMapResponse'] = ResolversParentTypes['SiteMapResponse']> = {
  __resolveType: TypeResolveFn<'SiteMapError' | 'SiteMapList', ParentType, ContextType>;
};

export type SocialResolvers<ContextType = any, ParentType extends ResolversParentTypes['Social'] = ResolversParentTypes['Social']> = {
  facebook?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  github?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  instagram?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  linkedin?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  twitter?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type StatsResolvers<ContextType = any, ParentType extends ResolversParentTypes['Stats'] = ResolversParentTypes['Stats']> = {
  media?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  pages?: Resolver<ResolversTypes['PostCountsByStatus'], ParentType, ContextType>;
  posts?: Resolver<ResolversTypes['PostCountsByStatus'], ParentType, ContextType>;
  tags?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type StatsErrorResolvers<ContextType = any, ParentType extends ResolversParentTypes['StatsError'] = ResolversParentTypes['StatsError']> = {
  message?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type StatsResponseResolvers<ContextType = any, ParentType extends ResolversParentTypes['StatsResponse'] = ResolversParentTypes['StatsResponse']> = {
  __resolveType: TypeResolveFn<'Stats' | 'StatsError', ParentType, ContextType>;
};

export type SubscriberResolvers<ContextType = any, ParentType extends ResolversParentTypes['Subscriber'] = ResolversParentTypes['Subscriber']> = {
  author_id?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['Date'], ParentType, ContextType>;
  email?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  verified?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SubscriberErrorResolvers<ContextType = any, ParentType extends ResolversParentTypes['SubscriberError'] = ResolversParentTypes['SubscriberError']> = {
  message?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SubscriberNewMetaResolvers<ContextType = any, ParentType extends ResolversParentTypes['SubscriberNewMeta'] = ResolversParentTypes['SubscriberNewMeta']> = {
  subscriber_email?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SubscriberResponseResolvers<ContextType = any, ParentType extends ResolversParentTypes['SubscriberResponse'] = ResolversParentTypes['SubscriberResponse']> = {
  __resolveType: TypeResolveFn<'Subscriber' | 'SubscriberError', ParentType, ContextType>;
};

export type SubscribersAddResultResolvers<ContextType = any, ParentType extends ResolversParentTypes['SubscribersAddResult'] = ResolversParentTypes['SubscribersAddResult']> = {
  message?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  ok?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SubscribersNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['SubscribersNode'] = ResolversParentTypes['SubscribersNode']> = {
  count?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  rows?: Resolver<Array<ResolversTypes['Subscriber']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SubscribersUpdateResultResolvers<ContextType = any, ParentType extends ResolversParentTypes['SubscribersUpdateResult'] = ResolversParentTypes['SubscribersUpdateResult']> = {
  message?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  ok?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SubscriptionResolvers<ContextType = any, ParentType extends ResolversParentTypes['Subscription'] = ResolversParentTypes['Subscription']> = {
  created_at?: SubscriptionResolver<ResolversTypes['String'], "created_at", ParentType, ContextType>;
  customer_id?: SubscriptionResolver<ResolversTypes['Int'], "customer_id", ParentType, ContextType>;
  id?: SubscriptionResolver<ResolversTypes['Int'], "id", ParentType, ContextType>;
  plan_id?: SubscriptionResolver<ResolversTypes['Int'], "plan_id", ParentType, ContextType>;
  status?: SubscriptionResolver<ResolversTypes['String'], "status", ParentType, ContextType>;
  subscription_id?: SubscriptionResolver<ResolversTypes['Int'], "subscription_id", ParentType, ContextType>;
  updated_at?: SubscriptionResolver<ResolversTypes['String'], "updated_at", ParentType, ContextType>;
};

export type SystemMetaResolvers<ContextType = any, ParentType extends ResolversParentTypes['SystemMeta'] = ResolversParentTypes['SystemMeta']> = {
  message?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  slug?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type TagResolvers<ContextType = any, ParentType extends ResolversParentTypes['Tag'] = ResolversParentTypes['Tag']> = {
  category?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  posts?: Resolver<Maybe<ResolversTypes['PostsResponse']>, ParentType, ContextType>;
  slug?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  type?: Resolver<ResolversTypes['TagType'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type TagResponseResolvers<ContextType = any, ParentType extends ResolversParentTypes['TagResponse'] = ResolversParentTypes['TagResponse']> = {
  __resolveType: TypeResolveFn<'Exception' | 'Tag' | 'UnAuthorized', ParentType, ContextType>;
};

export type TagResultErrorResolvers<ContextType = any, ParentType extends ResolversParentTypes['TagResultError'] = ResolversParentTypes['TagResultError']> = {
  message?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type TagsNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['TagsNode'] = ResolversParentTypes['TagsNode']> = {
  rows?: Resolver<Array<ResolversTypes['Tag']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type TagsResponseResolvers<ContextType = any, ParentType extends ResolversParentTypes['TagsResponse'] = ResolversParentTypes['TagsResponse']> = {
  __resolveType: TypeResolveFn<'Exception' | 'TagsNode' | 'UnAuthorized', ParentType, ContextType>;
};

export type ToggleLikePostResponseResolvers<ContextType = any, ParentType extends ResolversParentTypes['ToggleLikePostResponse'] = ResolversParentTypes['ToggleLikePostResponse']> = {
  message?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  ok?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type UnAuthorizedResolvers<ContextType = any, ParentType extends ResolversParentTypes['UnAuthorized'] = ResolversParentTypes['UnAuthorized']> = {
  message?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type UnexpectedResolvers<ContextType = any, ParentType extends ResolversParentTypes['Unexpected'] = ResolversParentTypes['Unexpected']> = {
  message?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type UpdateDomainResponseResolvers<ContextType = any, ParentType extends ResolversParentTypes['UpdateDomainResponse'] = ResolversParentTypes['UpdateDomainResponse']> = {
  message?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  ok?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type UpdatePostResponseResolvers<ContextType = any, ParentType extends ResolversParentTypes['UpdatePostResponse'] = ResolversParentTypes['UpdatePostResponse']> = {
  __resolveType: TypeResolveFn<'Post' | 'PostError' | 'PostTrashed', ParentType, ContextType>;
};

export type UpdateSubscriptionResponseResolvers<ContextType = any, ParentType extends ResolversParentTypes['UpdateSubscriptionResponse'] = ResolversParentTypes['UpdateSubscriptionResponse']> = {
  message?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  ok?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type UpdateTagsResponseResolvers<ContextType = any, ParentType extends ResolversParentTypes['UpdateTagsResponse'] = ResolversParentTypes['UpdateTagsResponse']> = {
  __resolveType: TypeResolveFn<'EditTaxResponse' | 'UnAuthorized', ParentType, ContextType>;
};

export type Resolvers<ContextType = any> = {
  AboutStats?: AboutStatsResolvers<ContextType>;
  AboutStatsResponse?: AboutStatsResponseResolvers<ContextType>;
  AddDomainResponse?: AddDomainResponseResolvers<ContextType>;
  Author?: AuthorResolvers<ContextType>;
  AuthorResponse?: AuthorResponseResolvers<ContextType>;
  CategoriesResponse?: CategoriesResponseResolvers<ContextType>;
  Category?: CategoryResolvers<ContextType>;
  CreatePostResponse?: CreatePostResponseResolvers<ContextType>;
  CreateSubscriptionResponse?: CreateSubscriptionResponseResolvers<ContextType>;
  Date?: GraphQLScalarType;
  DeleteAuthorResponse?: DeleteAuthorResponseResolvers<ContextType>;
  DeleteTagsResponse?: DeleteTagsResponseResolvers<ContextType>;
  DeleteTagsResult?: DeleteTagsResultResolvers<ContextType>;
  Design?: DesignResolvers<ContextType>;
  Domain?: DomainResolvers<ContextType>;
  DomainError?: DomainErrorResolvers<ContextType>;
  DomainNotFound?: DomainNotFoundResolvers<ContextType>;
  DomainResponse?: DomainResponseResolvers<ContextType>;
  DomainVerification?: DomainVerificationResolvers<ContextType>;
  EditTaxResponse?: EditTaxResponseResolvers<ContextType>;
  Email?: EmailResolvers<ContextType>;
  EmailError?: EmailErrorResolvers<ContextType>;
  EmailResponse?: EmailResponseResolvers<ContextType>;
  Error?: ErrorResolvers<ContextType>;
  Exception?: ExceptionResolvers<ContextType>;
  Failed?: FailedResolvers<ContextType>;
  Feed?: FeedResolvers<ContextType>;
  FeedError?: FeedErrorResolvers<ContextType>;
  FeedNode?: FeedNodeResolvers<ContextType>;
  FeedResponse?: FeedResponseResolvers<ContextType>;
  FollowAuthor?: FollowAuthorResolvers<ContextType>;
  FollowAuthorResponse?: FollowAuthorResponseResolvers<ContextType>;
  FollowerNewMeta?: FollowerNewMetaResolvers<ContextType>;
  Forbidden?: ForbiddenResolvers<ContextType>;
  ForgotPasswordResponse?: ForgotPasswordResponseResolvers<ContextType>;
  Image?: ImageResolvers<ContextType>;
  InvalidArguments?: InvalidArgumentsResolvers<ContextType>;
  IsFollowingResponse?: IsFollowingResponseResolvers<ContextType>;
  IsPostLikedResponse?: IsPostLikedResponseResolvers<ContextType>;
  LetterpadError?: LetterpadErrorResolvers<ContextType>;
  Like?: LikeResolvers<ContextType>;
  LoginError?: LoginErrorResolvers<ContextType>;
  LoginResponse?: LoginResponseResolvers<ContextType>;
  Media?: MediaResolvers<ContextType>;
  MediaDeleteResponse?: MediaDeleteResponseResolvers<ContextType>;
  MediaDeleteResult?: MediaDeleteResultResolvers<ContextType>;
  MediaNode?: MediaNodeResolvers<ContextType>;
  MediaResponse?: MediaResponseResolvers<ContextType>;
  MediaUpdateResponse?: MediaUpdateResponseResolvers<ContextType>;
  MediaUpdateResult?: MediaUpdateResultResolvers<ContextType>;
  Mutation?: MutationResolvers<ContextType>;
  Navigation?: NavigationResolvers<ContextType>;
  NotFound?: NotFoundResolvers<ContextType>;
  Notification?: NotificationResolvers<ContextType>;
  NotificationAddResult?: NotificationAddResultResolvers<ContextType>;
  NotificationDeleteResult?: NotificationDeleteResultResolvers<ContextType>;
  NotificationMeta?: NotificationMetaResolvers<ContextType>;
  NotificationNode?: NotificationNodeResolvers<ContextType>;
  NotificationResponse?: NotificationResponseResolvers<ContextType>;
  NotificationUpdateResult?: NotificationUpdateResultResolvers<ContextType>;
  Post?: PostResolvers<ContextType>;
  PostCountsByStatus?: PostCountsByStatusResolvers<ContextType>;
  PostError?: PostErrorResolvers<ContextType>;
  PostLikeMeta?: PostLikeMetaResolvers<ContextType>;
  PostNewMeta?: PostNewMetaResolvers<ContextType>;
  PostResponse?: PostResponseResolvers<ContextType>;
  PostStats?: PostStatsResolvers<ContextType>;
  PostTrashed?: PostTrashedResolvers<ContextType>;
  PostsNode?: PostsNodeResolvers<ContextType>;
  PostsResponse?: PostsResponseResolvers<ContextType>;
  Query?: QueryResolvers<ContextType>;
  RemoveDomainResponse?: RemoveDomainResponseResolvers<ContextType>;
  Response?: ResponseResolvers<ContextType>;
  Setting?: SettingResolvers<ContextType>;
  SettingError?: SettingErrorResolvers<ContextType>;
  SettingResponse?: SettingResponseResolvers<ContextType>;
  SiteMapError?: SiteMapErrorResolvers<ContextType>;
  SiteMapList?: SiteMapListResolvers<ContextType>;
  SiteMapNode?: SiteMapNodeResolvers<ContextType>;
  SiteMapResponse?: SiteMapResponseResolvers<ContextType>;
  Social?: SocialResolvers<ContextType>;
  Stats?: StatsResolvers<ContextType>;
  StatsError?: StatsErrorResolvers<ContextType>;
  StatsResponse?: StatsResponseResolvers<ContextType>;
  Subscriber?: SubscriberResolvers<ContextType>;
  SubscriberError?: SubscriberErrorResolvers<ContextType>;
  SubscriberNewMeta?: SubscriberNewMetaResolvers<ContextType>;
  SubscriberResponse?: SubscriberResponseResolvers<ContextType>;
  SubscribersAddResult?: SubscribersAddResultResolvers<ContextType>;
  SubscribersNode?: SubscribersNodeResolvers<ContextType>;
  SubscribersUpdateResult?: SubscribersUpdateResultResolvers<ContextType>;
  Subscription?: SubscriptionResolvers<ContextType>;
  SystemMeta?: SystemMetaResolvers<ContextType>;
  Tag?: TagResolvers<ContextType>;
  TagResponse?: TagResponseResolvers<ContextType>;
  TagResultError?: TagResultErrorResolvers<ContextType>;
  TagsNode?: TagsNodeResolvers<ContextType>;
  TagsResponse?: TagsResponseResolvers<ContextType>;
  ToggleLikePostResponse?: ToggleLikePostResponseResolvers<ContextType>;
  UnAuthorized?: UnAuthorizedResolvers<ContextType>;
  Unexpected?: UnexpectedResolvers<ContextType>;
  UpdateDomainResponse?: UpdateDomainResponseResolvers<ContextType>;
  UpdatePostResponse?: UpdatePostResponseResolvers<ContextType>;
  UpdateSubscriptionResponse?: UpdateSubscriptionResponseResolvers<ContextType>;
  UpdateTagsResponse?: UpdateTagsResponseResolvers<ContextType>;
};

export type DirectiveResolvers<ContextType = any> = {
  isAuth?: IsAuthDirectiveResolver<any, any, ContextType>;
  maskIfUnauth?: MaskIfUnauthDirectiveResolver<any, any, ContextType>;
};
