/* 4937d66dfdfa8d50a7726192695d447da02b06e7
 * This file is automatically generated by graphql-let. */

import * as Types from '../../../__types__';

import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
const defaultOptions =  {}
export type TagQueryVariables = Types.Exact<{
  slug: Types.Scalars['String'];
}>;


export type TagQuery = (
  { __typename?: 'Query' }
  & { tag: (
    { __typename?: 'TagResultError' }
    & Pick<Types.TagResultError, 'message'>
  ) | (
    { __typename?: 'Tags' }
    & Pick<Types.Tags, 'name' | 'slug'>
  ) }
);

export type PostQueryVariables = Types.Exact<{
  filters?: Types.Maybe<Types.PostFilters>;
}>;


export type PostQuery = (
  { __typename?: 'Query' }
  & { post: (
    { __typename?: 'Post' }
    & PostWithAuthorAndTagsFragment
  ) | (
    { __typename?: 'PostError' }
    & Pick<Types.PostError, 'message'>
  ) }
);

export type PostWithAuthorAndTagsFragment = (
  { __typename?: 'Post' }
  & { author?: Types.Maybe<(
    { __typename?: 'Author' }
    & Pick<Types.Author, 'id' | 'name' | 'avatar' | 'bio' | 'occupation' | 'company_name'>
    & { social?: Types.Maybe<(
      { __typename?: 'Social' }
      & Pick<Types.Social, 'github' | 'twitter' | 'instagram' | 'linkedin' | 'facebook'>
    )> }
  )>, tags?: Types.Maybe<Array<(
    { __typename?: 'Tags' }
    & Pick<Types.Tags, 'name' | 'slug'>
  )>> }
  & PartialFragment
);

export type PartialFragment = (
  { __typename?: 'Post' }
  & Pick<Types.Post, 'id' | 'title' | 'html' | 'excerpt' | 'featured' | 'html_draft' | 'type' | 'slug' | 'status' | 'createdAt' | 'publishedAt' | 'scheduledAt' | 'updatedAt' | 'reading_time'>
  & { cover_image: (
    { __typename?: 'Image' }
    & Pick<Types.Image, 'src' | 'width' | 'height'>
  ) }
);

export type PostsQueryVariables = Types.Exact<{
  filters?: Types.Maybe<Types.PostsFilters>;
}>;


export type PostsQuery = (
  { __typename?: 'Query' }
  & { posts: (
    { __typename?: 'PostsNode' }
    & Pick<Types.PostsNode, 'count'>
    & { rows: Array<(
      { __typename?: 'Post' }
      & { author?: Types.Maybe<(
        { __typename?: 'Author' }
        & Pick<Types.Author, 'name' | 'bio' | 'occupation' | 'company_name'>
        & { social?: Types.Maybe<(
          { __typename?: 'Social' }
          & Pick<Types.Social, 'github' | 'twitter' | 'instagram' | 'facebook' | 'linkedin'>
        )> }
      )>, tags?: Types.Maybe<Array<(
        { __typename?: 'Tags' }
        & Pick<Types.Tags, 'name' | 'slug'>
      )>> }
      & PartialFragment
    )> }
  ) | (
    { __typename?: 'PostError' }
    & Pick<Types.PostError, 'message'>
  ) }
);

export type MediaQueryVariables = Types.Exact<{
  filters?: Types.Maybe<Types.MediaFilters>;
}>;


export type MediaQuery = (
  { __typename?: 'Query' }
  & { media: (
    { __typename?: 'MediaNode' }
    & Pick<Types.MediaNode, 'count'>
    & { rows: Array<(
      { __typename?: 'Media' }
      & Pick<Types.Media, 'id' | 'url' | 'authorId' | 'createdAt' | 'name' | 'description' | 'width' | 'height'>
    )> }
  ) }
);

export type SubscribersQueryVariables = Types.Exact<{
  author_id?: Types.Maybe<Types.Scalars['Int']>;
}>;


export type SubscribersQuery = (
  { __typename?: 'Query' }
  & { subscribers: (
    { __typename?: 'SubscribersNode' }
    & Pick<Types.SubscribersNode, 'count'>
    & { rows: Array<(
      { __typename?: 'Subscribers' }
      & Pick<Types.Subscribers, 'id' | 'email' | 'verified' | 'createdAt'>
    )> }
  ) }
);

export type EmailQueryVariables = Types.Exact<{
  template_id?: Types.Maybe<Types.Scalars['String']>;
}>;


export type EmailQuery = (
  { __typename?: 'Query' }
  & { email: (
    { __typename?: 'Email' }
    & Pick<Types.Email, 'template_id' | 'body' | 'subject'>
  ) | (
    { __typename?: 'EmailError' }
    & Pick<Types.EmailError, 'message'>
  ) }
);

export type EmailsQueryVariables = Types.Exact<{ [key: string]: never; }>;


export type EmailsQuery = (
  { __typename?: 'Query' }
  & { emails: Array<Types.Maybe<(
    { __typename?: 'Email' }
    & Pick<Types.Email, 'template_id' | 'body' | 'subject'>
  )>> }
);

export type MeQueryVariables = Types.Exact<{ [key: string]: never; }>;


export type MeQuery = (
  { __typename?: 'Query' }
  & { me?: Types.Maybe<(
    { __typename?: 'Author' }
    & MeFragmentFragment
  ) | (
    { __typename?: 'AuthorNotFoundError' }
    & Pick<Types.AuthorNotFoundError, 'message'>
  )> }
);

export type MeFragmentFragment = (
  { __typename?: 'Author' }
  & Pick<Types.Author, 'id' | 'name' | 'username' | 'analytics_id' | 'analytics_uuid' | 'email' | 'bio' | 'occupation' | 'company_name' | 'avatar'>
  & { social?: Types.Maybe<(
    { __typename?: 'Social' }
    & Pick<Types.Social, 'github' | 'twitter' | 'instagram' | 'facebook' | 'linkedin'>
  )> }
);

export type TagsQueryVariables = Types.Exact<{
  filters?: Types.Maybe<Types.TagsFilters>;
}>;


export type TagsQuery = (
  { __typename?: 'Query' }
  & { tags: (
    { __typename?: 'TagsNode' }
    & { rows: Array<(
      { __typename?: 'Tags' }
      & Pick<Types.Tags, 'name' | 'slug'>
      & { posts?: Types.Maybe<(
        { __typename?: 'PostsNode' }
        & Pick<Types.PostsNode, 'count'>
        & { rows: Array<(
          { __typename?: 'Post' }
          & Pick<Types.Post, 'id'>
        )> }
      ) | { __typename?: 'PostError' }> }
    )> }
  ) | (
    { __typename?: 'TagsError' }
    & Pick<Types.TagsError, 'message'>
  ) }
);

export type StatsQueryVariables = Types.Exact<{ [key: string]: never; }>;


export type StatsQuery = (
  { __typename?: 'Query' }
  & { stats?: Types.Maybe<(
    { __typename?: 'Stats' }
    & Pick<Types.Stats, 'tags' | 'media'>
    & { posts: (
      { __typename?: 'PostCountsByStatus' }
      & Pick<Types.PostCountsByStatus, 'published' | 'drafts'>
    ), pages: (
      { __typename?: 'PostCountsByStatus' }
      & Pick<Types.PostCountsByStatus, 'published' | 'drafts'>
    ) }
  ) | (
    { __typename?: 'StatsError' }
    & Pick<Types.StatsError, 'message'>
  )> }
);

export type SettingsQueryVariables = Types.Exact<{ [key: string]: never; }>;


export type SettingsQuery = (
  { __typename?: 'Query' }
  & { settings: (
    { __typename?: 'Setting' }
    & SettingsFragmentFragment
  ) | (
    { __typename?: 'SettingError' }
    & Pick<Types.SettingError, 'message'>
  ) }
);

export type SettingsFragmentFragment = (
  { __typename?: 'Setting' }
  & Pick<Types.Setting, 'site_title' | 'site_tagline' | 'site_email' | 'site_url' | 'site_footer' | 'site_description' | 'subscribe_embed' | 'social_twitter' | 'social_facebook' | 'social_instagram' | 'social_github' | 'display_author_info' | 'cloudinary_key' | 'cloudinary_name' | 'cloudinary_secret' | 'client_token' | 'intro_dismissed' | 'show_about_page' | 'show_tags_page' | 'css' | 'google_analytics' | 'theme'>
  & { menu: Array<(
    { __typename?: 'Navigation' }
    & Pick<Types.Navigation, 'label' | 'original_name' | 'slug' | 'type'>
  )>, analytics?: Types.Maybe<(
    { __typename?: 'Analytics' }
    & Pick<Types.Analytics, 'google_analytics' | 'umami_id' | 'simple_analytics' | 'plausible_data_domain'>
  )>, banner?: Types.Maybe<(
    { __typename?: 'Image' }
    & Pick<Types.Image, 'src' | 'width' | 'height'>
  )>, site_logo?: Types.Maybe<(
    { __typename?: 'Image' }
    & Pick<Types.Image, 'src' | 'width' | 'height'>
  )>, site_favicon?: Types.Maybe<(
    { __typename?: 'Image' }
    & Pick<Types.Image, 'src' | 'width' | 'height'>
  )> }
);

export type DomainQueryVariables = Types.Exact<{ [key: string]: never; }>;


export type DomainQuery = (
  { __typename?: 'Query' }
  & { domain: (
    { __typename?: 'Domain' }
    & Pick<Types.Domain, 'name' | 'mapped' | 'ssl'>
  ) | (
    { __typename?: 'DomainNotFound' }
    & Pick<Types.DomainNotFound, 'message'>
  ) }
);

export const PartialFragmentDoc = gql`
    fragment Partial on Post {
  id
  title
  html
  excerpt
  featured
  html_draft
  type
  slug
  status
  createdAt
  publishedAt
  scheduledAt
  updatedAt
  reading_time
  cover_image {
    src
    width
    height
  }
}
    `;
export const PostWithAuthorAndTagsFragmentDoc = gql`
    fragment PostWithAuthorAndTags on Post {
  ...Partial
  author {
    id
    name
    avatar
    social {
      github
      twitter
      instagram
      linkedin
      facebook
    }
    bio
    occupation
    company_name
  }
  tags {
    name
    slug
  }
}
    ${PartialFragmentDoc}`;
export const MeFragmentFragmentDoc = gql`
    fragment MeFragment on Author {
  id
  name
  username
  analytics_id
  analytics_uuid
  social {
    github
    twitter
    instagram
    facebook
    linkedin
  }
  email
  bio
  occupation
  company_name
  avatar
}
    `;
export const SettingsFragmentFragmentDoc = gql`
    fragment SettingsFragment on Setting {
  site_title
  site_tagline
  site_email
  site_url
  site_footer
  site_description
  subscribe_embed
  social_twitter
  social_facebook
  social_instagram
  social_github
  display_author_info
  cloudinary_key
  cloudinary_name
  cloudinary_secret
  client_token
  intro_dismissed
  show_about_page
  show_tags_page
  menu {
    label
    original_name
    slug
    type
  }
  analytics {
    google_analytics
    umami_id
    simple_analytics
    plausible_data_domain
  }
  css
  google_analytics
  theme
  banner {
    src
    width
    height
  }
  site_logo {
    src
    width
    height
  }
  site_favicon {
    src
    width
    height
  }
}
    `;
export const TagDocument = gql`
    query Tag($slug: String!) {
  tag(slug: $slug) {
    ... on Tags {
      name
      slug
    }
    ... on TagResultError {
      message
    }
  }
}
    `;

/**
 * __useTagQuery__
 *
 * To run a query within a React component, call `useTagQuery` and pass it any options that fit your needs.
 * When your component renders, `useTagQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useTagQuery({
 *   variables: {
 *      slug: // value for 'slug'
 *   },
 * });
 */
export function useTagQuery(baseOptions: Apollo.QueryHookOptions<TagQuery, TagQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<TagQuery, TagQueryVariables>(TagDocument, options);
      }
export function useTagLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<TagQuery, TagQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<TagQuery, TagQueryVariables>(TagDocument, options);
        }
export type TagQueryHookResult = ReturnType<typeof useTagQuery>;
export type TagLazyQueryHookResult = ReturnType<typeof useTagLazyQuery>;
export type TagQueryResult = Apollo.QueryResult<TagQuery, TagQueryVariables>;
export const PostDocument = gql`
    query Post($filters: PostFilters) {
  post(filters: $filters) {
    ... on Post {
      ...PostWithAuthorAndTags
    }
    ... on PostError {
      message
    }
  }
}
    ${PostWithAuthorAndTagsFragmentDoc}`;

/**
 * __usePostQuery__
 *
 * To run a query within a React component, call `usePostQuery` and pass it any options that fit your needs.
 * When your component renders, `usePostQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = usePostQuery({
 *   variables: {
 *      filters: // value for 'filters'
 *   },
 * });
 */
export function usePostQuery(baseOptions?: Apollo.QueryHookOptions<PostQuery, PostQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<PostQuery, PostQueryVariables>(PostDocument, options);
      }
export function usePostLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<PostQuery, PostQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<PostQuery, PostQueryVariables>(PostDocument, options);
        }
export type PostQueryHookResult = ReturnType<typeof usePostQuery>;
export type PostLazyQueryHookResult = ReturnType<typeof usePostLazyQuery>;
export type PostQueryResult = Apollo.QueryResult<PostQuery, PostQueryVariables>;
export const PostsDocument = gql`
    query Posts($filters: PostsFilters) {
  posts(filters: $filters) {
    ... on PostsNode {
      count
      rows {
        ...Partial
        author {
          name
          social {
            github
            twitter
            instagram
            facebook
            linkedin
          }
          bio
          occupation
          company_name
        }
        tags {
          name
          slug
        }
      }
    }
    ... on PostError {
      message
    }
  }
}
    ${PartialFragmentDoc}`;

/**
 * __usePostsQuery__
 *
 * To run a query within a React component, call `usePostsQuery` and pass it any options that fit your needs.
 * When your component renders, `usePostsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = usePostsQuery({
 *   variables: {
 *      filters: // value for 'filters'
 *   },
 * });
 */
export function usePostsQuery(baseOptions?: Apollo.QueryHookOptions<PostsQuery, PostsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<PostsQuery, PostsQueryVariables>(PostsDocument, options);
      }
export function usePostsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<PostsQuery, PostsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<PostsQuery, PostsQueryVariables>(PostsDocument, options);
        }
export type PostsQueryHookResult = ReturnType<typeof usePostsQuery>;
export type PostsLazyQueryHookResult = ReturnType<typeof usePostsLazyQuery>;
export type PostsQueryResult = Apollo.QueryResult<PostsQuery, PostsQueryVariables>;
export const MediaDocument = gql`
    query Media($filters: MediaFilters) {
  media(filters: $filters) {
    count
    rows {
      id
      url
      authorId
      createdAt
      name
      description
      width
      height
    }
  }
}
    `;

/**
 * __useMediaQuery__
 *
 * To run a query within a React component, call `useMediaQuery` and pass it any options that fit your needs.
 * When your component renders, `useMediaQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useMediaQuery({
 *   variables: {
 *      filters: // value for 'filters'
 *   },
 * });
 */
export function useMediaQuery(baseOptions?: Apollo.QueryHookOptions<MediaQuery, MediaQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<MediaQuery, MediaQueryVariables>(MediaDocument, options);
      }
export function useMediaLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<MediaQuery, MediaQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<MediaQuery, MediaQueryVariables>(MediaDocument, options);
        }
export type MediaQueryHookResult = ReturnType<typeof useMediaQuery>;
export type MediaLazyQueryHookResult = ReturnType<typeof useMediaLazyQuery>;
export type MediaQueryResult = Apollo.QueryResult<MediaQuery, MediaQueryVariables>;
export const SubscribersDocument = gql`
    query Subscribers($author_id: Int) {
  subscribers(author_id: $author_id) {
    count
    rows {
      id
      email
      verified
      createdAt
    }
  }
}
    `;

/**
 * __useSubscribersQuery__
 *
 * To run a query within a React component, call `useSubscribersQuery` and pass it any options that fit your needs.
 * When your component renders, `useSubscribersQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useSubscribersQuery({
 *   variables: {
 *      author_id: // value for 'author_id'
 *   },
 * });
 */
export function useSubscribersQuery(baseOptions?: Apollo.QueryHookOptions<SubscribersQuery, SubscribersQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<SubscribersQuery, SubscribersQueryVariables>(SubscribersDocument, options);
      }
export function useSubscribersLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<SubscribersQuery, SubscribersQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<SubscribersQuery, SubscribersQueryVariables>(SubscribersDocument, options);
        }
export type SubscribersQueryHookResult = ReturnType<typeof useSubscribersQuery>;
export type SubscribersLazyQueryHookResult = ReturnType<typeof useSubscribersLazyQuery>;
export type SubscribersQueryResult = Apollo.QueryResult<SubscribersQuery, SubscribersQueryVariables>;
export const EmailDocument = gql`
    query Email($template_id: String) {
  email(template_id: $template_id) {
    ... on Email {
      template_id
      body
      subject
    }
    ... on EmailError {
      message
    }
  }
}
    `;

/**
 * __useEmailQuery__
 *
 * To run a query within a React component, call `useEmailQuery` and pass it any options that fit your needs.
 * When your component renders, `useEmailQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useEmailQuery({
 *   variables: {
 *      template_id: // value for 'template_id'
 *   },
 * });
 */
export function useEmailQuery(baseOptions?: Apollo.QueryHookOptions<EmailQuery, EmailQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<EmailQuery, EmailQueryVariables>(EmailDocument, options);
      }
export function useEmailLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<EmailQuery, EmailQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<EmailQuery, EmailQueryVariables>(EmailDocument, options);
        }
export type EmailQueryHookResult = ReturnType<typeof useEmailQuery>;
export type EmailLazyQueryHookResult = ReturnType<typeof useEmailLazyQuery>;
export type EmailQueryResult = Apollo.QueryResult<EmailQuery, EmailQueryVariables>;
export const EmailsDocument = gql`
    query Emails {
  emails {
    template_id
    body
    subject
  }
}
    `;

/**
 * __useEmailsQuery__
 *
 * To run a query within a React component, call `useEmailsQuery` and pass it any options that fit your needs.
 * When your component renders, `useEmailsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useEmailsQuery({
 *   variables: {
 *   },
 * });
 */
export function useEmailsQuery(baseOptions?: Apollo.QueryHookOptions<EmailsQuery, EmailsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<EmailsQuery, EmailsQueryVariables>(EmailsDocument, options);
      }
export function useEmailsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<EmailsQuery, EmailsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<EmailsQuery, EmailsQueryVariables>(EmailsDocument, options);
        }
export type EmailsQueryHookResult = ReturnType<typeof useEmailsQuery>;
export type EmailsLazyQueryHookResult = ReturnType<typeof useEmailsLazyQuery>;
export type EmailsQueryResult = Apollo.QueryResult<EmailsQuery, EmailsQueryVariables>;
export const MeDocument = gql`
    query Me {
  me {
    ... on Author {
      ...MeFragment
    }
    ... on AuthorNotFoundError {
      message
    }
  }
}
    ${MeFragmentFragmentDoc}`;

/**
 * __useMeQuery__
 *
 * To run a query within a React component, call `useMeQuery` and pass it any options that fit your needs.
 * When your component renders, `useMeQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useMeQuery({
 *   variables: {
 *   },
 * });
 */
export function useMeQuery(baseOptions?: Apollo.QueryHookOptions<MeQuery, MeQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<MeQuery, MeQueryVariables>(MeDocument, options);
      }
export function useMeLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<MeQuery, MeQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<MeQuery, MeQueryVariables>(MeDocument, options);
        }
export type MeQueryHookResult = ReturnType<typeof useMeQuery>;
export type MeLazyQueryHookResult = ReturnType<typeof useMeLazyQuery>;
export type MeQueryResult = Apollo.QueryResult<MeQuery, MeQueryVariables>;
export const TagsDocument = gql`
    query Tags($filters: TagsFilters) {
  tags(filters: $filters) {
    ... on TagsNode {
      rows {
        name
        slug
        posts {
          ... on PostsNode {
            count
            rows {
              id
            }
          }
        }
      }
    }
    ... on TagsError {
      message
    }
  }
}
    `;

/**
 * __useTagsQuery__
 *
 * To run a query within a React component, call `useTagsQuery` and pass it any options that fit your needs.
 * When your component renders, `useTagsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useTagsQuery({
 *   variables: {
 *      filters: // value for 'filters'
 *   },
 * });
 */
export function useTagsQuery(baseOptions?: Apollo.QueryHookOptions<TagsQuery, TagsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<TagsQuery, TagsQueryVariables>(TagsDocument, options);
      }
export function useTagsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<TagsQuery, TagsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<TagsQuery, TagsQueryVariables>(TagsDocument, options);
        }
export type TagsQueryHookResult = ReturnType<typeof useTagsQuery>;
export type TagsLazyQueryHookResult = ReturnType<typeof useTagsLazyQuery>;
export type TagsQueryResult = Apollo.QueryResult<TagsQuery, TagsQueryVariables>;
export const StatsDocument = gql`
    query Stats {
  stats {
    ... on Stats {
      posts {
        published
        drafts
      }
      pages {
        published
        drafts
      }
      tags
      media
    }
    ... on StatsError {
      message
    }
  }
}
    `;

/**
 * __useStatsQuery__
 *
 * To run a query within a React component, call `useStatsQuery` and pass it any options that fit your needs.
 * When your component renders, `useStatsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useStatsQuery({
 *   variables: {
 *   },
 * });
 */
export function useStatsQuery(baseOptions?: Apollo.QueryHookOptions<StatsQuery, StatsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<StatsQuery, StatsQueryVariables>(StatsDocument, options);
      }
export function useStatsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<StatsQuery, StatsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<StatsQuery, StatsQueryVariables>(StatsDocument, options);
        }
export type StatsQueryHookResult = ReturnType<typeof useStatsQuery>;
export type StatsLazyQueryHookResult = ReturnType<typeof useStatsLazyQuery>;
export type StatsQueryResult = Apollo.QueryResult<StatsQuery, StatsQueryVariables>;
export const SettingsDocument = gql`
    query settings {
  settings {
    ... on Setting {
      ...SettingsFragment
    }
    ... on SettingError {
      message
    }
  }
}
    ${SettingsFragmentFragmentDoc}`;

/**
 * __useSettingsQuery__
 *
 * To run a query within a React component, call `useSettingsQuery` and pass it any options that fit your needs.
 * When your component renders, `useSettingsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useSettingsQuery({
 *   variables: {
 *   },
 * });
 */
export function useSettingsQuery(baseOptions?: Apollo.QueryHookOptions<SettingsQuery, SettingsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<SettingsQuery, SettingsQueryVariables>(SettingsDocument, options);
      }
export function useSettingsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<SettingsQuery, SettingsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<SettingsQuery, SettingsQueryVariables>(SettingsDocument, options);
        }
export type SettingsQueryHookResult = ReturnType<typeof useSettingsQuery>;
export type SettingsLazyQueryHookResult = ReturnType<typeof useSettingsLazyQuery>;
export type SettingsQueryResult = Apollo.QueryResult<SettingsQuery, SettingsQueryVariables>;
export const DomainDocument = gql`
    query domain {
  domain {
    ... on Domain {
      name
      mapped
      ssl
    }
    ... on DomainNotFound {
      message
    }
  }
}
    `;

/**
 * __useDomainQuery__
 *
 * To run a query within a React component, call `useDomainQuery` and pass it any options that fit your needs.
 * When your component renders, `useDomainQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useDomainQuery({
 *   variables: {
 *   },
 * });
 */
export function useDomainQuery(baseOptions?: Apollo.QueryHookOptions<DomainQuery, DomainQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<DomainQuery, DomainQueryVariables>(DomainDocument, options);
      }
export function useDomainLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<DomainQuery, DomainQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<DomainQuery, DomainQueryVariables>(DomainDocument, options);
        }
export type DomainQueryHookResult = ReturnType<typeof useDomainQuery>;
export type DomainLazyQueryHookResult = ReturnType<typeof useDomainLazyQuery>;
export type DomainQueryResult = Apollo.QueryResult<DomainQuery, DomainQueryVariables>;