/* 8f33115a460f6ffb5ecb15fd3c8c8c5191bbe600
 * This file is automatically generated by graphql-let. */

import * as Types from '../../../__types__';

import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
const defaultOptions =  {}
export type LoginMutationVariables = Types.Exact<{
  data?: Types.Maybe<Types.LoginData>;
}>;


export type LoginMutation = (
  { __typename?: 'Mutation' }
  & { login?: Types.Maybe<(
    { __typename?: 'Author' }
    & Pick<Types.Author, 'id' | 'name' | 'email' | 'role' | 'avatar' | 'permissions' | 'bio' | 'username'>
  ) | (
    { __typename?: 'LoginError' }
    & Pick<Types.LoginError, 'message'>
  )> }
);

export type UpdateTagsMutationVariables = Types.Exact<{
  data?: Types.Maybe<Types.InputTags>;
}>;


export type UpdateTagsMutation = (
  { __typename?: 'Mutation' }
  & { updateTags: (
    { __typename?: 'EditTaxResponse' }
    & Pick<Types.EditTaxResponse, 'ok'>
  ) | (
    { __typename?: 'TagsError' }
    & Pick<Types.TagsError, 'message'>
  ) }
);

export type AddSubscriberMutationVariables = Types.Exact<{
  email: Types.Scalars['String'];
}>;


export type AddSubscriberMutation = (
  { __typename?: 'Mutation' }
  & { addSubscriber?: Types.Maybe<(
    { __typename?: 'SubscribersAddResult' }
    & Pick<Types.SubscribersAddResult, 'ok' | 'message'>
  )> }
);

export type DeleteTagsMutationVariables = Types.Exact<{
  name: Types.Scalars['String'];
}>;


export type DeleteTagsMutation = (
  { __typename?: 'Mutation' }
  & { deleteTags: (
    { __typename?: 'DeleteTagsResult' }
    & Pick<Types.DeleteTagsResult, 'ok'>
  ) | (
    { __typename?: 'TagsError' }
    & Pick<Types.TagsError, 'message'>
  ) }
);

export type CreateAuthorMutationVariables = Types.Exact<{
  data: Types.InputCreateAuthor;
}>;


export type CreateAuthorMutation = (
  { __typename?: 'Mutation' }
  & { createAuthor?: Types.Maybe<(
    { __typename?: 'Author' }
    & Pick<Types.Author, 'name' | 'id'>
  ) | (
    { __typename?: 'CreateAuthorError' }
    & Pick<Types.CreateAuthorError, 'message'>
  )> }
);

export type UpdateOptionsMutationVariables = Types.Exact<{
  options: Array<Types.SettingInputType> | Types.SettingInputType;
}>;


export type UpdateOptionsMutation = (
  { __typename?: 'Mutation' }
  & { updateOptions?: Types.Maybe<(
    { __typename?: 'Setting' }
    & Pick<Types.Setting, 'site_title' | 'site_tagline' | 'site_email' | 'site_url' | 'site_footer' | 'site_description' | 'subscribe_embed' | 'social_twitter' | 'social_facebook' | 'social_instagram' | 'social_github' | 'display_author_info' | 'cloudinary_key' | 'cloudinary_name' | 'cloudinary_secret' | 'intro_dismissed' | 'show_about_page' | 'show_tags_page' | 'css' | 'google_analytics' | 'theme'>
    & { menu: Array<(
      { __typename?: 'Navigation' }
      & Pick<Types.Navigation, 'label' | 'original_name' | 'slug' | 'type'>
    )>, analytics?: Types.Maybe<(
      { __typename?: 'Analytics' }
      & Pick<Types.Analytics, 'google_analytics' | 'umami_id' | 'simple_analytics' | 'plausible_data_domain'>
    )>, banner?: Types.Maybe<(
      { __typename?: 'Image' }
      & Pick<Types.Image, 'src' | 'width' | 'height'>
    )>, site_logo?: Types.Maybe<(
      { __typename?: 'Image' }
      & Pick<Types.Image, 'src' | 'width' | 'height'>
    )>, site_favicon?: Types.Maybe<(
      { __typename?: 'Image' }
      & Pick<Types.Image, 'src' | 'width' | 'height'>
    )> }
  ) | (
    { __typename?: 'SettingError' }
    & Pick<Types.SettingError, 'message'>
  )> }
);

export type UpdateAuthorMutationVariables = Types.Exact<{
  author: Types.InputAuthor;
}>;


export type UpdateAuthorMutation = (
  { __typename?: 'Mutation' }
  & { updateAuthor?: Types.Maybe<(
    { __typename?: 'AuthorResponse' }
    & Pick<Types.AuthorResponse, 'ok'>
    & { errors?: Types.Maybe<Array<Types.Maybe<(
      { __typename?: 'Error' }
      & Pick<Types.Error, 'path' | 'message'>
    )>>>, data?: Types.Maybe<(
      { __typename?: 'Author' }
      & Pick<Types.Author, 'name' | 'bio' | 'occupation' | 'company_name' | 'avatar' | 'username'>
      & { social?: Types.Maybe<(
        { __typename?: 'Social' }
        & Pick<Types.Social, 'github' | 'twitter' | 'instagram' | 'facebook' | 'linkedin'>
      )> }
    )> }
  )> }
);

export type CreatePostMutationVariables = Types.Exact<{
  data?: Types.Maybe<Types.InputCreatePost>;
}>;


export type CreatePostMutation = (
  { __typename?: 'Mutation' }
  & { createPost: (
    { __typename?: 'Post' }
    & { author?: Types.Maybe<(
      { __typename?: 'Author' }
      & Pick<Types.Author, 'name'>
    )>, tags?: Types.Maybe<Array<(
      { __typename?: 'Tags' }
      & Pick<Types.Tags, 'name' | 'slug'>
    )>> }
    & PartialFragment
  ) | (
    { __typename?: 'PostError' }
    & Pick<Types.PostError, 'message'>
  ) }
);

export type PartialFragment = (
  { __typename?: 'Post' }
  & Pick<Types.Post, 'id' | 'title' | 'html' | 'excerpt' | 'featured' | 'html_draft' | 'type' | 'slug' | 'status' | 'createdAt' | 'publishedAt' | 'scheduledAt' | 'updatedAt' | 'reading_time'>
  & { cover_image: (
    { __typename?: 'Image' }
    & Pick<Types.Image, 'src' | 'width' | 'height'>
  ) }
);

export type UpdatePostMutationVariables = Types.Exact<{
  data?: Types.Maybe<Types.InputUpdatePost>;
}>;


export type UpdatePostMutation = (
  { __typename?: 'Mutation' }
  & { updatePost: (
    { __typename?: 'Post' }
    & { author?: Types.Maybe<(
      { __typename?: 'Author' }
      & Pick<Types.Author, 'id' | 'name' | 'avatar' | 'bio' | 'occupation' | 'company_name'>
      & { social?: Types.Maybe<(
        { __typename?: 'Social' }
        & Pick<Types.Social, 'github' | 'twitter' | 'instagram' | 'facebook' | 'linkedin'>
      )> }
    )>, tags?: Types.Maybe<Array<(
      { __typename?: 'Tags' }
      & Pick<Types.Tags, 'name' | 'slug'>
    )>> }
    & PartialFragment
  ) | (
    { __typename?: 'PostError' }
    & Pick<Types.PostError, 'message'>
  ) }
);

export type UpdateMediaMutationVariables = Types.Exact<{
  data: Types.InputUpdateMedia;
}>;


export type UpdateMediaMutation = (
  { __typename?: 'Mutation' }
  & { updateMedia?: Types.Maybe<(
    { __typename?: 'MediaUpdateResult' }
    & Pick<Types.MediaUpdateResult, 'ok'>
  ) | (
    { __typename?: 'MediaError' }
    & Pick<Types.MediaError, 'message'>
  )> }
);

export type UpdateSubscriberMutationVariables = Types.Exact<{
  data: Types.InputUpdateSubscriber;
}>;


export type UpdateSubscriberMutation = (
  { __typename?: 'Mutation' }
  & { updateSubscriber: (
    { __typename?: 'SubscribersUpdateResult' }
    & Pick<Types.SubscribersUpdateResult, 'ok' | 'message'>
  ) }
);

export type DeleteMediaMutationVariables = Types.Exact<{
  ids: Array<Types.Scalars['Int']> | Types.Scalars['Int'];
}>;


export type DeleteMediaMutation = (
  { __typename?: 'Mutation' }
  & { deleteMedia?: Types.Maybe<(
    { __typename?: 'MediaDeleteResult' }
    & Pick<Types.MediaDeleteResult, 'ok'>
  ) | (
    { __typename?: 'MediaError' }
    & Pick<Types.MediaError, 'message'>
  )> }
);

export type ForgotPasswordMutationVariables = Types.Exact<{
  email: Types.Scalars['String'];
}>;


export type ForgotPasswordMutation = (
  { __typename?: 'Mutation' }
  & { forgotPassword: (
    { __typename?: 'ForgotPasswordResponse' }
    & Pick<Types.ForgotPasswordResponse, 'ok' | 'message'>
  ) }
);

export type ResetPasswordMutationVariables = Types.Exact<{
  password: Types.Scalars['String'];
  token: Types.Scalars['String'];
}>;


export type ResetPasswordMutation = (
  { __typename?: 'Mutation' }
  & { resetPassword: (
    { __typename?: 'ForgotPasswordResponse' }
    & Pick<Types.ForgotPasswordResponse, 'ok' | 'message'>
  ) }
);

export type CreateOrUpdateDomainMutationVariables = Types.Exact<{
  data: Types.InputDomain;
}>;


export type CreateOrUpdateDomainMutation = (
  { __typename?: 'Mutation' }
  & { createOrUpdateDomain: (
    { __typename?: 'UpdateDomainResponse' }
    & Pick<Types.UpdateDomainResponse, 'ok' | 'message'>
  ) }
);

export type RemoveDomainMutationVariables = Types.Exact<{ [key: string]: never; }>;


export type RemoveDomainMutation = (
  { __typename?: 'Mutation' }
  & { removeDomain: (
    { __typename?: 'RemoveDomainResponse' }
    & Pick<Types.RemoveDomainResponse, 'ok' | 'message'>
  ) }
);

export const PartialFragmentDoc = gql`
    fragment Partial on Post {
  id
  title
  html
  excerpt
  featured
  html_draft
  type
  slug
  status
  createdAt
  publishedAt
  scheduledAt
  updatedAt
  reading_time
  cover_image {
    src
    width
    height
  }
}
    `;
export const LoginDocument = gql`
    mutation Login($data: LoginData) {
  login(data: $data) {
    ... on Author {
      id
      name
      email
      role
      avatar
      permissions
      bio
      username
    }
    ... on LoginError {
      message
    }
  }
}
    `;
export type LoginMutationFn = Apollo.MutationFunction<LoginMutation, LoginMutationVariables>;

/**
 * __useLoginMutation__
 *
 * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useLoginMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [loginMutation, { data, loading, error }] = useLoginMutation({
 *   variables: {
 *      data: // value for 'data'
 *   },
 * });
 */
export function useLoginMutation(baseOptions?: Apollo.MutationHookOptions<LoginMutation, LoginMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<LoginMutation, LoginMutationVariables>(LoginDocument, options);
      }
export type LoginMutationHookResult = ReturnType<typeof useLoginMutation>;
export type LoginMutationResult = Apollo.MutationResult<LoginMutation>;
export type LoginMutationOptions = Apollo.BaseMutationOptions<LoginMutation, LoginMutationVariables>;
export const UpdateTagsDocument = gql`
    mutation UpdateTags($data: InputTags) {
  updateTags(data: $data) {
    ... on EditTaxResponse {
      ok
    }
    ... on TagsError {
      message
    }
  }
}
    `;
export type UpdateTagsMutationFn = Apollo.MutationFunction<UpdateTagsMutation, UpdateTagsMutationVariables>;

/**
 * __useUpdateTagsMutation__
 *
 * To run a mutation, you first call `useUpdateTagsMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateTagsMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateTagsMutation, { data, loading, error }] = useUpdateTagsMutation({
 *   variables: {
 *      data: // value for 'data'
 *   },
 * });
 */
export function useUpdateTagsMutation(baseOptions?: Apollo.MutationHookOptions<UpdateTagsMutation, UpdateTagsMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateTagsMutation, UpdateTagsMutationVariables>(UpdateTagsDocument, options);
      }
export type UpdateTagsMutationHookResult = ReturnType<typeof useUpdateTagsMutation>;
export type UpdateTagsMutationResult = Apollo.MutationResult<UpdateTagsMutation>;
export type UpdateTagsMutationOptions = Apollo.BaseMutationOptions<UpdateTagsMutation, UpdateTagsMutationVariables>;
export const AddSubscriberDocument = gql`
    mutation addSubscriber($email: String!) {
  addSubscriber(email: $email) {
    ok
    message
  }
}
    `;
export type AddSubscriberMutationFn = Apollo.MutationFunction<AddSubscriberMutation, AddSubscriberMutationVariables>;

/**
 * __useAddSubscriberMutation__
 *
 * To run a mutation, you first call `useAddSubscriberMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useAddSubscriberMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [addSubscriberMutation, { data, loading, error }] = useAddSubscriberMutation({
 *   variables: {
 *      email: // value for 'email'
 *   },
 * });
 */
export function useAddSubscriberMutation(baseOptions?: Apollo.MutationHookOptions<AddSubscriberMutation, AddSubscriberMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<AddSubscriberMutation, AddSubscriberMutationVariables>(AddSubscriberDocument, options);
      }
export type AddSubscriberMutationHookResult = ReturnType<typeof useAddSubscriberMutation>;
export type AddSubscriberMutationResult = Apollo.MutationResult<AddSubscriberMutation>;
export type AddSubscriberMutationOptions = Apollo.BaseMutationOptions<AddSubscriberMutation, AddSubscriberMutationVariables>;
export const DeleteTagsDocument = gql`
    mutation DeleteTags($name: String!) {
  deleteTags(name: $name) {
    ... on DeleteTagsResult {
      ok
    }
    ... on TagsError {
      message
    }
  }
}
    `;
export type DeleteTagsMutationFn = Apollo.MutationFunction<DeleteTagsMutation, DeleteTagsMutationVariables>;

/**
 * __useDeleteTagsMutation__
 *
 * To run a mutation, you first call `useDeleteTagsMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteTagsMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteTagsMutation, { data, loading, error }] = useDeleteTagsMutation({
 *   variables: {
 *      name: // value for 'name'
 *   },
 * });
 */
export function useDeleteTagsMutation(baseOptions?: Apollo.MutationHookOptions<DeleteTagsMutation, DeleteTagsMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<DeleteTagsMutation, DeleteTagsMutationVariables>(DeleteTagsDocument, options);
      }
export type DeleteTagsMutationHookResult = ReturnType<typeof useDeleteTagsMutation>;
export type DeleteTagsMutationResult = Apollo.MutationResult<DeleteTagsMutation>;
export type DeleteTagsMutationOptions = Apollo.BaseMutationOptions<DeleteTagsMutation, DeleteTagsMutationVariables>;
export const CreateAuthorDocument = gql`
    mutation createAuthor($data: InputCreateAuthor!) {
  createAuthor(data: $data) {
    ... on Author {
      name
      id
    }
    ... on CreateAuthorError {
      message
    }
  }
}
    `;
export type CreateAuthorMutationFn = Apollo.MutationFunction<CreateAuthorMutation, CreateAuthorMutationVariables>;

/**
 * __useCreateAuthorMutation__
 *
 * To run a mutation, you first call `useCreateAuthorMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateAuthorMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createAuthorMutation, { data, loading, error }] = useCreateAuthorMutation({
 *   variables: {
 *      data: // value for 'data'
 *   },
 * });
 */
export function useCreateAuthorMutation(baseOptions?: Apollo.MutationHookOptions<CreateAuthorMutation, CreateAuthorMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateAuthorMutation, CreateAuthorMutationVariables>(CreateAuthorDocument, options);
      }
export type CreateAuthorMutationHookResult = ReturnType<typeof useCreateAuthorMutation>;
export type CreateAuthorMutationResult = Apollo.MutationResult<CreateAuthorMutation>;
export type CreateAuthorMutationOptions = Apollo.BaseMutationOptions<CreateAuthorMutation, CreateAuthorMutationVariables>;
export const UpdateOptionsDocument = gql`
    mutation UpdateOptions($options: [SettingInputType!]!) {
  updateOptions(options: $options) {
    ... on Setting {
      site_title
      site_tagline
      site_email
      site_url
      site_footer
      site_description
      subscribe_embed
      social_twitter
      social_facebook
      social_instagram
      social_github
      display_author_info
      cloudinary_key
      cloudinary_name
      cloudinary_secret
      intro_dismissed
      show_about_page
      show_tags_page
      menu {
        label
        original_name
        slug
        type
      }
      css
      google_analytics
      analytics {
        google_analytics
        umami_id
        simple_analytics
        plausible_data_domain
      }
      theme
      banner {
        src
        width
        height
      }
      site_logo {
        src
        width
        height
      }
      site_favicon {
        src
        width
        height
      }
    }
    ... on SettingError {
      message
    }
  }
}
    `;
export type UpdateOptionsMutationFn = Apollo.MutationFunction<UpdateOptionsMutation, UpdateOptionsMutationVariables>;

/**
 * __useUpdateOptionsMutation__
 *
 * To run a mutation, you first call `useUpdateOptionsMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateOptionsMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateOptionsMutation, { data, loading, error }] = useUpdateOptionsMutation({
 *   variables: {
 *      options: // value for 'options'
 *   },
 * });
 */
export function useUpdateOptionsMutation(baseOptions?: Apollo.MutationHookOptions<UpdateOptionsMutation, UpdateOptionsMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateOptionsMutation, UpdateOptionsMutationVariables>(UpdateOptionsDocument, options);
      }
export type UpdateOptionsMutationHookResult = ReturnType<typeof useUpdateOptionsMutation>;
export type UpdateOptionsMutationResult = Apollo.MutationResult<UpdateOptionsMutation>;
export type UpdateOptionsMutationOptions = Apollo.BaseMutationOptions<UpdateOptionsMutation, UpdateOptionsMutationVariables>;
export const UpdateAuthorDocument = gql`
    mutation UpdateAuthor($author: InputAuthor!) {
  updateAuthor(author: $author) {
    ok
    errors {
      path
      message
    }
    data {
      name
      social {
        github
        twitter
        instagram
        facebook
        linkedin
      }
      bio
      occupation
      company_name
      avatar
      username
    }
  }
}
    `;
export type UpdateAuthorMutationFn = Apollo.MutationFunction<UpdateAuthorMutation, UpdateAuthorMutationVariables>;

/**
 * __useUpdateAuthorMutation__
 *
 * To run a mutation, you first call `useUpdateAuthorMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateAuthorMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateAuthorMutation, { data, loading, error }] = useUpdateAuthorMutation({
 *   variables: {
 *      author: // value for 'author'
 *   },
 * });
 */
export function useUpdateAuthorMutation(baseOptions?: Apollo.MutationHookOptions<UpdateAuthorMutation, UpdateAuthorMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateAuthorMutation, UpdateAuthorMutationVariables>(UpdateAuthorDocument, options);
      }
export type UpdateAuthorMutationHookResult = ReturnType<typeof useUpdateAuthorMutation>;
export type UpdateAuthorMutationResult = Apollo.MutationResult<UpdateAuthorMutation>;
export type UpdateAuthorMutationOptions = Apollo.BaseMutationOptions<UpdateAuthorMutation, UpdateAuthorMutationVariables>;
export const CreatePostDocument = gql`
    mutation createPost($data: InputCreatePost) {
  createPost(data: $data) {
    ... on Post {
      ...Partial
      author {
        name
      }
      tags {
        name
        slug
      }
    }
    ... on PostError {
      message
    }
  }
}
    ${PartialFragmentDoc}`;
export type CreatePostMutationFn = Apollo.MutationFunction<CreatePostMutation, CreatePostMutationVariables>;

/**
 * __useCreatePostMutation__
 *
 * To run a mutation, you first call `useCreatePostMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreatePostMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createPostMutation, { data, loading, error }] = useCreatePostMutation({
 *   variables: {
 *      data: // value for 'data'
 *   },
 * });
 */
export function useCreatePostMutation(baseOptions?: Apollo.MutationHookOptions<CreatePostMutation, CreatePostMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreatePostMutation, CreatePostMutationVariables>(CreatePostDocument, options);
      }
export type CreatePostMutationHookResult = ReturnType<typeof useCreatePostMutation>;
export type CreatePostMutationResult = Apollo.MutationResult<CreatePostMutation>;
export type CreatePostMutationOptions = Apollo.BaseMutationOptions<CreatePostMutation, CreatePostMutationVariables>;
export const UpdatePostDocument = gql`
    mutation updatePost($data: InputUpdatePost) {
  updatePost(data: $data) {
    ... on Post {
      ...Partial
      author {
        id
        name
        avatar
        social {
          github
          twitter
          instagram
          facebook
          linkedin
        }
        bio
        occupation
        company_name
      }
      tags {
        name
        slug
      }
    }
    ... on PostError {
      message
    }
  }
}
    ${PartialFragmentDoc}`;
export type UpdatePostMutationFn = Apollo.MutationFunction<UpdatePostMutation, UpdatePostMutationVariables>;

/**
 * __useUpdatePostMutation__
 *
 * To run a mutation, you first call `useUpdatePostMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdatePostMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updatePostMutation, { data, loading, error }] = useUpdatePostMutation({
 *   variables: {
 *      data: // value for 'data'
 *   },
 * });
 */
export function useUpdatePostMutation(baseOptions?: Apollo.MutationHookOptions<UpdatePostMutation, UpdatePostMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdatePostMutation, UpdatePostMutationVariables>(UpdatePostDocument, options);
      }
export type UpdatePostMutationHookResult = ReturnType<typeof useUpdatePostMutation>;
export type UpdatePostMutationResult = Apollo.MutationResult<UpdatePostMutation>;
export type UpdatePostMutationOptions = Apollo.BaseMutationOptions<UpdatePostMutation, UpdatePostMutationVariables>;
export const UpdateMediaDocument = gql`
    mutation UpdateMedia($data: InputUpdateMedia!) {
  updateMedia(data: $data) {
    ... on MediaUpdateResult {
      ok
    }
    ... on MediaError {
      message
    }
  }
}
    `;
export type UpdateMediaMutationFn = Apollo.MutationFunction<UpdateMediaMutation, UpdateMediaMutationVariables>;

/**
 * __useUpdateMediaMutation__
 *
 * To run a mutation, you first call `useUpdateMediaMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateMediaMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateMediaMutation, { data, loading, error }] = useUpdateMediaMutation({
 *   variables: {
 *      data: // value for 'data'
 *   },
 * });
 */
export function useUpdateMediaMutation(baseOptions?: Apollo.MutationHookOptions<UpdateMediaMutation, UpdateMediaMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateMediaMutation, UpdateMediaMutationVariables>(UpdateMediaDocument, options);
      }
export type UpdateMediaMutationHookResult = ReturnType<typeof useUpdateMediaMutation>;
export type UpdateMediaMutationResult = Apollo.MutationResult<UpdateMediaMutation>;
export type UpdateMediaMutationOptions = Apollo.BaseMutationOptions<UpdateMediaMutation, UpdateMediaMutationVariables>;
export const UpdateSubscriberDocument = gql`
    mutation UpdateSubscriber($data: InputUpdateSubscriber!) {
  updateSubscriber(data: $data) {
    ok
    message
  }
}
    `;
export type UpdateSubscriberMutationFn = Apollo.MutationFunction<UpdateSubscriberMutation, UpdateSubscriberMutationVariables>;

/**
 * __useUpdateSubscriberMutation__
 *
 * To run a mutation, you first call `useUpdateSubscriberMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateSubscriberMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateSubscriberMutation, { data, loading, error }] = useUpdateSubscriberMutation({
 *   variables: {
 *      data: // value for 'data'
 *   },
 * });
 */
export function useUpdateSubscriberMutation(baseOptions?: Apollo.MutationHookOptions<UpdateSubscriberMutation, UpdateSubscriberMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateSubscriberMutation, UpdateSubscriberMutationVariables>(UpdateSubscriberDocument, options);
      }
export type UpdateSubscriberMutationHookResult = ReturnType<typeof useUpdateSubscriberMutation>;
export type UpdateSubscriberMutationResult = Apollo.MutationResult<UpdateSubscriberMutation>;
export type UpdateSubscriberMutationOptions = Apollo.BaseMutationOptions<UpdateSubscriberMutation, UpdateSubscriberMutationVariables>;
export const DeleteMediaDocument = gql`
    mutation DeleteMedia($ids: [Int!]!) {
  deleteMedia(ids: $ids) {
    ... on MediaDeleteResult {
      ok
    }
    ... on MediaError {
      message
    }
  }
}
    `;
export type DeleteMediaMutationFn = Apollo.MutationFunction<DeleteMediaMutation, DeleteMediaMutationVariables>;

/**
 * __useDeleteMediaMutation__
 *
 * To run a mutation, you first call `useDeleteMediaMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteMediaMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteMediaMutation, { data, loading, error }] = useDeleteMediaMutation({
 *   variables: {
 *      ids: // value for 'ids'
 *   },
 * });
 */
export function useDeleteMediaMutation(baseOptions?: Apollo.MutationHookOptions<DeleteMediaMutation, DeleteMediaMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<DeleteMediaMutation, DeleteMediaMutationVariables>(DeleteMediaDocument, options);
      }
export type DeleteMediaMutationHookResult = ReturnType<typeof useDeleteMediaMutation>;
export type DeleteMediaMutationResult = Apollo.MutationResult<DeleteMediaMutation>;
export type DeleteMediaMutationOptions = Apollo.BaseMutationOptions<DeleteMediaMutation, DeleteMediaMutationVariables>;
export const ForgotPasswordDocument = gql`
    mutation ForgotPassword($email: String!) {
  forgotPassword(email: $email) {
    ok
    message
  }
}
    `;
export type ForgotPasswordMutationFn = Apollo.MutationFunction<ForgotPasswordMutation, ForgotPasswordMutationVariables>;

/**
 * __useForgotPasswordMutation__
 *
 * To run a mutation, you first call `useForgotPasswordMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useForgotPasswordMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [forgotPasswordMutation, { data, loading, error }] = useForgotPasswordMutation({
 *   variables: {
 *      email: // value for 'email'
 *   },
 * });
 */
export function useForgotPasswordMutation(baseOptions?: Apollo.MutationHookOptions<ForgotPasswordMutation, ForgotPasswordMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<ForgotPasswordMutation, ForgotPasswordMutationVariables>(ForgotPasswordDocument, options);
      }
export type ForgotPasswordMutationHookResult = ReturnType<typeof useForgotPasswordMutation>;
export type ForgotPasswordMutationResult = Apollo.MutationResult<ForgotPasswordMutation>;
export type ForgotPasswordMutationOptions = Apollo.BaseMutationOptions<ForgotPasswordMutation, ForgotPasswordMutationVariables>;
export const ResetPasswordDocument = gql`
    mutation ResetPassword($password: String!, $token: String!) {
  resetPassword(password: $password, token: $token) {
    ok
    message
  }
}
    `;
export type ResetPasswordMutationFn = Apollo.MutationFunction<ResetPasswordMutation, ResetPasswordMutationVariables>;

/**
 * __useResetPasswordMutation__
 *
 * To run a mutation, you first call `useResetPasswordMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useResetPasswordMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [resetPasswordMutation, { data, loading, error }] = useResetPasswordMutation({
 *   variables: {
 *      password: // value for 'password'
 *      token: // value for 'token'
 *   },
 * });
 */
export function useResetPasswordMutation(baseOptions?: Apollo.MutationHookOptions<ResetPasswordMutation, ResetPasswordMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<ResetPasswordMutation, ResetPasswordMutationVariables>(ResetPasswordDocument, options);
      }
export type ResetPasswordMutationHookResult = ReturnType<typeof useResetPasswordMutation>;
export type ResetPasswordMutationResult = Apollo.MutationResult<ResetPasswordMutation>;
export type ResetPasswordMutationOptions = Apollo.BaseMutationOptions<ResetPasswordMutation, ResetPasswordMutationVariables>;
export const CreateOrUpdateDomainDocument = gql`
    mutation CreateOrUpdateDomain($data: InputDomain!) {
  createOrUpdateDomain(data: $data) {
    ok
    message
  }
}
    `;
export type CreateOrUpdateDomainMutationFn = Apollo.MutationFunction<CreateOrUpdateDomainMutation, CreateOrUpdateDomainMutationVariables>;

/**
 * __useCreateOrUpdateDomainMutation__
 *
 * To run a mutation, you first call `useCreateOrUpdateDomainMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateOrUpdateDomainMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createOrUpdateDomainMutation, { data, loading, error }] = useCreateOrUpdateDomainMutation({
 *   variables: {
 *      data: // value for 'data'
 *   },
 * });
 */
export function useCreateOrUpdateDomainMutation(baseOptions?: Apollo.MutationHookOptions<CreateOrUpdateDomainMutation, CreateOrUpdateDomainMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateOrUpdateDomainMutation, CreateOrUpdateDomainMutationVariables>(CreateOrUpdateDomainDocument, options);
      }
export type CreateOrUpdateDomainMutationHookResult = ReturnType<typeof useCreateOrUpdateDomainMutation>;
export type CreateOrUpdateDomainMutationResult = Apollo.MutationResult<CreateOrUpdateDomainMutation>;
export type CreateOrUpdateDomainMutationOptions = Apollo.BaseMutationOptions<CreateOrUpdateDomainMutation, CreateOrUpdateDomainMutationVariables>;
export const RemoveDomainDocument = gql`
    mutation RemoveDomain {
  removeDomain {
    ok
    message
  }
}
    `;
export type RemoveDomainMutationFn = Apollo.MutationFunction<RemoveDomainMutation, RemoveDomainMutationVariables>;

/**
 * __useRemoveDomainMutation__
 *
 * To run a mutation, you first call `useRemoveDomainMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useRemoveDomainMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [removeDomainMutation, { data, loading, error }] = useRemoveDomainMutation({
 *   variables: {
 *   },
 * });
 */
export function useRemoveDomainMutation(baseOptions?: Apollo.MutationHookOptions<RemoveDomainMutation, RemoveDomainMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<RemoveDomainMutation, RemoveDomainMutationVariables>(RemoveDomainDocument, options);
      }
export type RemoveDomainMutationHookResult = ReturnType<typeof useRemoveDomainMutation>;
export type RemoveDomainMutationResult = Apollo.MutationResult<RemoveDomainMutation>;
export type RemoveDomainMutationOptions = Apollo.BaseMutationOptions<RemoveDomainMutation, RemoveDomainMutationVariables>;