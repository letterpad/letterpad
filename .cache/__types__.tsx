/* 269601837bc42daff6615e2127e55c8cd9af9435
 * This file is automatically generated by graphql-let. */

import { GraphQLResolveInfo, GraphQLScalarType, GraphQLScalarTypeConfig } from 'graphql';
export type Maybe<T> = T;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;
export type RequireFields<T, K extends keyof T> = { [X in Exclude<keyof T, K>]?: T[X] } & { [P in K]-?: NonNullable<T[P]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  Date: any;
};

export type Analytics = {
  __typename?: 'Analytics';
  google_analytics?: Maybe<Scalars['String']>;
  umami_id?: Maybe<Scalars['String']>;
  simple_analytics?: Maybe<Scalars['String']>;
  plausible_data_domain?: Maybe<Scalars['String']>;
};

export type Author = {
  __typename?: 'Author';
  id: Scalars['Int'];
  email: Scalars['String'];
  username: Scalars['String'];
  name: Scalars['String'];
  social?: Maybe<Social>;
  bio?: Maybe<Scalars['String']>;
  occupation?: Maybe<Scalars['String']>;
  company_name?: Maybe<Scalars['String']>;
  role?: Maybe<Role>;
  permissions?: Maybe<Array<Permissions>>;
  avatar?: Maybe<Scalars['String']>;
  verified?: Maybe<Scalars['Boolean']>;
  accessToken?: Maybe<Scalars['String']>;
  analytics_id?: Maybe<Scalars['Int']>;
  analytics_uuid?: Maybe<Scalars['String']>;
};

export type AuthorNotFoundError = LetterpadError & {
  __typename?: 'AuthorNotFoundError';
  message: Scalars['String'];
};

export type AuthorResponse = {
  __typename?: 'AuthorResponse';
  ok: Scalars['Boolean'];
  errors?: Maybe<Array<Maybe<Error>>>;
  data?: Maybe<Author>;
};

export type CreateAuthorError = LetterpadError & {
  __typename?: 'CreateAuthorError';
  message: Scalars['String'];
};

export type CreateAuthorResponse = Author | CreateAuthorError;

export type CreateDomainResponse = Domain | DomainError;

export type CreatePostResponse = Post | PostError;


export type DeleteTagsResponse = DeleteTagsResult | TagsError;

export type DeleteTagsResult = {
  __typename?: 'DeleteTagsResult';
  ok: Scalars['Boolean'];
};

export type Domain = {
  __typename?: 'Domain';
  id: Scalars['Int'];
  name: Scalars['String'];
  mapped?: Maybe<Scalars['Boolean']>;
  ssl?: Maybe<Scalars['Boolean']>;
};

export type DomainError = LetterpadError & {
  __typename?: 'DomainError';
  message: Scalars['String'];
};

export type DomainNotFound = LetterpadError & {
  __typename?: 'DomainNotFound';
  message: Scalars['String'];
};

export type DomainResponse = Domain | DomainNotFound;

export type EditTaxResponse = {
  __typename?: 'EditTaxResponse';
  ok: Scalars['Boolean'];
};

export type Email = {
  __typename?: 'Email';
  template_id: Scalars['String'];
  body: Scalars['String'];
  subject: Scalars['String'];
};

export type EmailError = LetterpadError & {
  __typename?: 'EmailError';
  message: Scalars['String'];
};

export type EmailResponse = Email | EmailError;

export type Error = {
  __typename?: 'Error';
  path: Scalars['String'];
  message?: Maybe<Scalars['String']>;
};

export type ForgotPasswordResponse = {
  __typename?: 'ForgotPasswordResponse';
  ok: Scalars['Boolean'];
  message?: Maybe<Scalars['String']>;
};

export type Image = {
  __typename?: 'Image';
  src?: Maybe<Scalars['String']>;
  width?: Maybe<Scalars['Int']>;
  height?: Maybe<Scalars['Int']>;
};

export type InputAnalytics = {
  google_analytics?: Maybe<Scalars['String']>;
  umami_id?: Maybe<Scalars['String']>;
  simple_analytics?: Maybe<Scalars['String']>;
  plausible_data_domain?: Maybe<Scalars['String']>;
};

export type InputAuthor = {
  id: Scalars['Int'];
  email?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  bio?: Maybe<Scalars['String']>;
  occupation?: Maybe<Scalars['String']>;
  company_name?: Maybe<Scalars['String']>;
  social?: Maybe<InputSocial>;
  password?: Maybe<Scalars['String']>;
  roleId?: Maybe<Scalars['Int']>;
  avatar?: Maybe<Scalars['String']>;
  username?: Maybe<Scalars['String']>;
};

export type InputCreateAuthor = {
  email: Scalars['String'];
  setting?: Maybe<SettingInputType>;
  name: Scalars['String'];
  username: Scalars['String'];
  password: Scalars['String'];
  token: Scalars['String'];
};

export type InputCreatePost = {
  title?: Maybe<Scalars['String']>;
  html?: Maybe<Scalars['String']>;
  excerpt?: Maybe<Scalars['String']>;
  cover_image?: Maybe<InputImage>;
  type?: Maybe<PostTypes>;
  featured?: Maybe<Scalars['Boolean']>;
  status?: Maybe<PostStatusOptions>;
  slug?: Maybe<Scalars['String']>;
  tags?: Maybe<Array<Maybe<TagsInputType>>>;
};

export type InputDomain = {
  name?: Maybe<Scalars['String']>;
  mapped?: Maybe<Scalars['Boolean']>;
  ssl?: Maybe<Scalars['Boolean']>;
};

export type InputImage = {
  height?: Maybe<Scalars['Int']>;
  src: Scalars['String'];
  width?: Maybe<Scalars['Int']>;
};

export type InputNavigation = {
  type: NavigationType;
  slug: Scalars['String'];
  original_name: Scalars['String'];
  label: Scalars['String'];
};

export type InputSocial = {
  twitter?: Maybe<Scalars['String']>;
  facebook?: Maybe<Scalars['String']>;
  github?: Maybe<Scalars['String']>;
  instagram?: Maybe<Scalars['String']>;
  linkedin?: Maybe<Scalars['String']>;
};

export type InputTags = {
  name: Scalars['String'];
  old_name?: Maybe<Scalars['String']>;
  slug?: Maybe<Scalars['String']>;
};

export type InputUpdateMedia = {
  id: Scalars['Int'];
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
};

export type InputUpdatePost = {
  id: Scalars['Int'];
  title?: Maybe<Scalars['String']>;
  html?: Maybe<Scalars['String']>;
  html_draft?: Maybe<Scalars['String']>;
  featured?: Maybe<Scalars['Boolean']>;
  excerpt?: Maybe<Scalars['String']>;
  cover_image?: Maybe<InputImage>;
  publishedAt?: Maybe<Scalars['Date']>;
  scheduledAt?: Maybe<Scalars['Date']>;
  updatedAt?: Maybe<Scalars['Date']>;
  type?: Maybe<PostTypes>;
  status?: Maybe<PostStatusOptions>;
  slug?: Maybe<Scalars['String']>;
  tags?: Maybe<Array<TagsInputType>>;
};

export type InputUpdateSubscriber = {
  secret_id?: Maybe<Scalars['String']>;
  verified?: Maybe<Scalars['Boolean']>;
};

export type LetterpadError = {
  message: Scalars['String'];
};

export type LoginData = {
  email: Scalars['String'];
  password: Scalars['String'];
};

export type LoginError = LetterpadError & {
  __typename?: 'LoginError';
  message: Scalars['String'];
};

export type LoginResponse = Author | LoginError;

export type MeResponse = Author | AuthorNotFoundError;

export type Media = {
  __typename?: 'Media';
  id: Scalars['Int'];
  authorId?: Maybe<Scalars['Int']>;
  url: Scalars['String'];
  createdAt: Scalars['Date'];
  name: Scalars['String'];
  width: Scalars['Int'];
  height: Scalars['Int'];
  description?: Maybe<Scalars['String']>;
};

export type MediaDeleteResponse = MediaDeleteResult | MediaError;

export type MediaDeleteResult = {
  __typename?: 'MediaDeleteResult';
  ok: Scalars['Boolean'];
};

export type MediaError = LetterpadError & {
  __typename?: 'MediaError';
  message: Scalars['String'];
};

export type MediaFilters = {
  id?: Maybe<Scalars['Int']>;
  cursor?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  page?: Maybe<Scalars['Int']>;
  authorId?: Maybe<Scalars['Int']>;
};

export type MediaNode = {
  __typename?: 'MediaNode';
  count: Scalars['Int'];
  rows: Array<Media>;
};

export type MediaUpdateResponse = MediaUpdateResult | MediaError;

export type MediaUpdateResult = {
  __typename?: 'MediaUpdateResult';
  ok: Scalars['Boolean'];
};

export type Mutation = {
  __typename?: 'Mutation';
  addSubscriber?: Maybe<SubscribersAddResult>;
  createAuthor?: Maybe<CreateAuthorResponse>;
  createOrUpdateDomain: UpdateDomainResponse;
  createPost: CreatePostResponse;
  deleteMedia?: Maybe<MediaDeleteResponse>;
  deleteTags: DeleteTagsResponse;
  forgotPassword: ForgotPasswordResponse;
  login?: Maybe<LoginResponse>;
  removeDomain: RemoveDomainResponse;
  resetPassword: ForgotPasswordResponse;
  updateAuthor?: Maybe<AuthorResponse>;
  updateMedia?: Maybe<MediaUpdateResponse>;
  updateOptions?: Maybe<SettingResponse>;
  updatePost: UpdatePostResponse;
  updateSubscriber: SubscribersUpdateResult;
  updateTags: UpdateTagsResponse;
};


export type MutationAddSubscriberArgs = {
  email: Scalars['String'];
};


export type MutationCreateAuthorArgs = {
  data: InputCreateAuthor;
};


export type MutationCreateOrUpdateDomainArgs = {
  data: InputDomain;
};


export type MutationCreatePostArgs = {
  data?: Maybe<InputCreatePost>;
};


export type MutationDeleteMediaArgs = {
  ids: Array<Scalars['Int']>;
};


export type MutationDeleteTagsArgs = {
  name: Scalars['String'];
};


export type MutationForgotPasswordArgs = {
  email: Scalars['String'];
};


export type MutationLoginArgs = {
  data?: Maybe<LoginData>;
};


export type MutationResetPasswordArgs = {
  password: Scalars['String'];
  token: Scalars['String'];
};


export type MutationUpdateAuthorArgs = {
  author: InputAuthor;
};


export type MutationUpdateMediaArgs = {
  data: InputUpdateMedia;
};


export type MutationUpdateOptionsArgs = {
  options: Array<SettingInputType>;
};


export type MutationUpdatePostArgs = {
  data?: Maybe<InputUpdatePost>;
};


export type MutationUpdateSubscriberArgs = {
  data: InputUpdateSubscriber;
};


export type MutationUpdateTagsArgs = {
  data?: Maybe<InputTags>;
};

export type Navigation = {
  __typename?: 'Navigation';
  type: NavigationType;
  slug: Scalars['String'];
  original_name: Scalars['String'];
  label: Scalars['String'];
};

export enum NavigationType {
  Tag = 'tag',
  Page = 'page',
  Custom = 'custom'
}

export enum Permissions {
  ManageOwnPosts = 'MANAGE_OWN_POSTS',
  ReadOnlyPosts = 'READ_ONLY_POSTS',
  ManageAllPosts = 'MANAGE_ALL_POSTS',
  ManageUsers = 'MANAGE_USERS',
  ManageSettings = 'MANAGE_SETTINGS'
}

export type Post = {
  __typename?: 'Post';
  id: Scalars['Int'];
  title: Scalars['String'];
  html?: Maybe<Scalars['String']>;
  html_draft?: Maybe<Scalars['String']>;
  author?: Maybe<Author>;
  excerpt?: Maybe<Scalars['String']>;
  cover_image: Image;
  type: PostTypes;
  status: PostStatusOptions;
  featured: Scalars['Boolean'];
  slug?: Maybe<Scalars['String']>;
  createdAt: Scalars['Date'];
  publishedAt?: Maybe<Scalars['Date']>;
  scheduledAt?: Maybe<Scalars['Date']>;
  updatedAt: Scalars['Date'];
  reading_time?: Maybe<Scalars['String']>;
  tags?: Maybe<Array<Tags>>;
};

export type PostCountsByStatus = {
  __typename?: 'PostCountsByStatus';
  published: Scalars['Int'];
  drafts: Scalars['Int'];
};

export type PostError = LetterpadError & {
  __typename?: 'PostError';
  message: Scalars['String'];
};

export type PostFilters = {
  id?: Maybe<Scalars['Int']>;
  slug?: Maybe<Scalars['String']>;
  featured?: Maybe<Scalars['Boolean']>;
  previewHash?: Maybe<Scalars['String']>;
  status?: Maybe<PostStatusOptions>;
  type?: Maybe<PostTypes>;
};

export type PostResponse = Post | PostError;

export enum PostStatusOptions {
  Published = 'published',
  Draft = 'draft',
  Trashed = 'trashed'
}

export enum PostTypes {
  Post = 'post',
  Page = 'page'
}

export type PostsFilters = {
  id?: Maybe<Scalars['Int']>;
  type?: Maybe<PostTypes>;
  slug?: Maybe<Scalars['String']>;
  featured?: Maybe<Scalars['Boolean']>;
  previewHash?: Maybe<Scalars['String']>;
  status?: Maybe<PostStatusOptions>;
  author?: Maybe<Scalars['String']>;
  tagSlug?: Maybe<Scalars['String']>;
  tag?: Maybe<Scalars['String']>;
  cursor?: Maybe<Scalars['Int']>;
  page?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  sortBy?: Maybe<SortBy>;
};

export type PostsNode = {
  __typename?: 'PostsNode';
  count: Scalars['Int'];
  rows: Array<Post>;
};

export type PostsResponse = PostsNode | PostError;

export type Query = {
  __typename?: 'Query';
  domain: DomainResponse;
  email: EmailResponse;
  emails: Array<Maybe<Email>>;
  me?: Maybe<MeResponse>;
  media: MediaNode;
  post: PostResponse;
  posts: PostsResponse;
  settings: SettingResponse;
  stats?: Maybe<StatsResponse>;
  subscribers: SubscribersNode;
  tag: TagResponse;
  tags: TagsResponse;
};


export type QueryEmailArgs = {
  template_id?: Maybe<Scalars['String']>;
};


export type QueryMediaArgs = {
  filters?: Maybe<MediaFilters>;
};


export type QueryPostArgs = {
  filters?: Maybe<PostFilters>;
};


export type QueryPostsArgs = {
  filters?: Maybe<PostsFilters>;
};


export type QuerySubscribersArgs = {
  author_id?: Maybe<Scalars['Int']>;
};


export type QueryTagArgs = {
  slug: Scalars['String'];
};


export type QueryTagsArgs = {
  filters?: Maybe<TagsFilters>;
};

export type RemoveDomainResponse = {
  __typename?: 'RemoveDomainResponse';
  ok: Scalars['Boolean'];
  message?: Maybe<Scalars['String']>;
};

export type Response = {
  __typename?: 'Response';
  ok: Scalars['Boolean'];
  post?: Maybe<Post>;
  errors?: Maybe<Array<Error>>;
};

export enum Role {
  Admin = 'ADMIN',
  Reviewer = 'REVIEWER',
  Reader = 'READER',
  Author = 'AUTHOR'
}

export type Setting = {
  __typename?: 'Setting';
  id: Scalars['Int'];
  site_title: Scalars['String'];
  site_tagline?: Maybe<Scalars['String']>;
  site_email: Scalars['String'];
  site_url: Scalars['String'];
  site_footer?: Maybe<Scalars['String']>;
  site_description?: Maybe<Scalars['String']>;
  subscribe_embed?: Maybe<Scalars['String']>;
  /** @deprecated Field no longer supported */
  social_twitter?: Maybe<Scalars['String']>;
  /** @deprecated Field no longer supported */
  social_facebook?: Maybe<Scalars['String']>;
  /** @deprecated Field no longer supported */
  social_instagram?: Maybe<Scalars['String']>;
  /** @deprecated Field no longer supported */
  social_github?: Maybe<Scalars['String']>;
  display_author_info: Scalars['Boolean'];
  intro_dismissed: Scalars['Boolean'];
  show_about_page?: Maybe<Scalars['Boolean']>;
  show_tags_page?: Maybe<Scalars['Boolean']>;
  cloudinary_key?: Maybe<Scalars['String']>;
  cloudinary_name?: Maybe<Scalars['String']>;
  cloudinary_secret?: Maybe<Scalars['String']>;
  menu: Array<Navigation>;
  css?: Maybe<Scalars['String']>;
  google_analytics?: Maybe<Scalars['String']>;
  analytics?: Maybe<Analytics>;
  theme?: Maybe<Scalars['String']>;
  banner?: Maybe<Image>;
  site_logo?: Maybe<Image>;
  site_favicon?: Maybe<Image>;
  client_token: Scalars['String'];
};

export type SettingError = LetterpadError & {
  __typename?: 'SettingError';
  message: Scalars['String'];
};

export type SettingInputType = {
  site_title?: Maybe<Scalars['String']>;
  site_tagline?: Maybe<Scalars['String']>;
  site_email?: Maybe<Scalars['String']>;
  site_url?: Maybe<Scalars['String']>;
  site_footer?: Maybe<Scalars['String']>;
  site_description?: Maybe<Scalars['String']>;
  subscribe_embed?: Maybe<Scalars['String']>;
  social_twitter?: Maybe<Scalars['String']>;
  social_facebook?: Maybe<Scalars['String']>;
  social_instagram?: Maybe<Scalars['String']>;
  social_github?: Maybe<Scalars['String']>;
  display_author_info?: Maybe<Scalars['Boolean']>;
  cloudinary_key?: Maybe<Scalars['String']>;
  cloudinary_name?: Maybe<Scalars['String']>;
  cloudinary_secret?: Maybe<Scalars['String']>;
  menu?: Maybe<Array<InputNavigation>>;
  analytics?: Maybe<InputAnalytics>;
  css?: Maybe<Scalars['String']>;
  google_analytics?: Maybe<Scalars['String']>;
  theme?: Maybe<Scalars['String']>;
  banner?: Maybe<InputImage>;
  site_logo?: Maybe<InputImage>;
  site_favicon?: Maybe<InputImage>;
  intro_dismissed?: Maybe<Scalars['Boolean']>;
  show_about_page?: Maybe<Scalars['Boolean']>;
  show_tags_page?: Maybe<Scalars['Boolean']>;
};

export type SettingResponse = Setting | SettingError;

export type Social = {
  __typename?: 'Social';
  twitter?: Maybe<Scalars['String']>;
  facebook?: Maybe<Scalars['String']>;
  github?: Maybe<Scalars['String']>;
  instagram?: Maybe<Scalars['String']>;
  linkedin?: Maybe<Scalars['String']>;
};

export enum SortBy {
  Asc = 'asc',
  Desc = 'desc'
}

export type Stats = {
  __typename?: 'Stats';
  posts: PostCountsByStatus;
  pages: PostCountsByStatus;
  tags: Scalars['Int'];
  media: Scalars['Int'];
};

export type StatsError = LetterpadError & {
  __typename?: 'StatsError';
  message: Scalars['String'];
};

export type StatsResponse = Stats | StatsError;

export type Subscribers = {
  __typename?: 'Subscribers';
  id: Scalars['Int'];
  email: Scalars['String'];
  author_id: Scalars['Int'];
  verified: Scalars['Boolean'];
  createdAt: Scalars['Date'];
};

export type SubscribersAddResult = {
  __typename?: 'SubscribersAddResult';
  ok: Scalars['Boolean'];
  message?: Maybe<Scalars['String']>;
};

export type SubscribersNode = {
  __typename?: 'SubscribersNode';
  count: Scalars['Int'];
  rows: Array<Subscribers>;
};

export type SubscribersUpdateResult = {
  __typename?: 'SubscribersUpdateResult';
  ok: Scalars['Boolean'];
  message?: Maybe<Scalars['String']>;
};

export type TagResponse = TagResultError | Tags;

export type TagResultError = LetterpadError & {
  __typename?: 'TagResultError';
  message: Scalars['String'];
};

export type Tags = {
  __typename?: 'Tags';
  name: Scalars['String'];
  slug: Scalars['String'];
  posts?: Maybe<PostsResponse>;
};

export type TagsError = LetterpadError & {
  __typename?: 'TagsError';
  message: Scalars['String'];
};

export type TagsFilters = {
  active?: Maybe<Scalars['Boolean']>;
  name?: Maybe<Scalars['String']>;
  suggest?: Maybe<Scalars['Boolean']>;
};

export type TagsInputType = {
  name: Scalars['String'];
  slug: Scalars['String'];
};

export type TagsNode = {
  __typename?: 'TagsNode';
  rows: Array<Tags>;
};

export type TagsResponse = TagsNode | TagsError;

export type UpdateDomainResponse = {
  __typename?: 'UpdateDomainResponse';
  ok: Scalars['Boolean'];
  message?: Maybe<Scalars['String']>;
};

export type UpdatePostResponse = Post | PostError;

export type UpdateTagsResponse = EditTaxResponse | TagsError;



export type ResolverTypeWrapper<T> = Promise<T> | T;


export type ResolverWithResolve<TResult, TParent, TContext, TArgs> = {
  resolve: ResolverFn<TResult, TParent, TContext, TArgs>;
};

export type LegacyStitchingResolver<TResult, TParent, TContext, TArgs> = {
  fragment: string;
  resolve: ResolverFn<TResult, TParent, TContext, TArgs>;
};

export type NewStitchingResolver<TResult, TParent, TContext, TArgs> = {
  selectionSet: string;
  resolve: ResolverFn<TResult, TParent, TContext, TArgs>;
};
export type StitchingResolver<TResult, TParent, TContext, TArgs> = LegacyStitchingResolver<TResult, TParent, TContext, TArgs> | NewStitchingResolver<TResult, TParent, TContext, TArgs>;
export type Resolver<TResult, TParent = {}, TContext = {}, TArgs = {}> =
  | ResolverFn<TResult, TParent, TContext, TArgs>
  | ResolverWithResolve<TResult, TParent, TContext, TArgs>
  | StitchingResolver<TResult, TParent, TContext, TArgs>;

export type ResolverFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => Promise<TResult> | TResult;

export type SubscriptionSubscribeFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => AsyncIterator<TResult> | Promise<AsyncIterator<TResult>>;

export type SubscriptionResolveFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => TResult | Promise<TResult>;

export interface SubscriptionSubscriberObject<TResult, TKey extends string, TParent, TContext, TArgs> {
  subscribe: SubscriptionSubscribeFn<{ [key in TKey]: TResult }, TParent, TContext, TArgs>;
  resolve?: SubscriptionResolveFn<TResult, { [key in TKey]: TResult }, TContext, TArgs>;
}

export interface SubscriptionResolverObject<TResult, TParent, TContext, TArgs> {
  subscribe: SubscriptionSubscribeFn<any, TParent, TContext, TArgs>;
  resolve: SubscriptionResolveFn<TResult, any, TContext, TArgs>;
}

export type SubscriptionObject<TResult, TKey extends string, TParent, TContext, TArgs> =
  | SubscriptionSubscriberObject<TResult, TKey, TParent, TContext, TArgs>
  | SubscriptionResolverObject<TResult, TParent, TContext, TArgs>;

export type SubscriptionResolver<TResult, TKey extends string, TParent = {}, TContext = {}, TArgs = {}> =
  | ((...args: any[]) => SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>)
  | SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>;

export type TypeResolveFn<TTypes, TParent = {}, TContext = {}> = (
  parent: TParent,
  context: TContext,
  info: GraphQLResolveInfo
) => Maybe<TTypes> | Promise<Maybe<TTypes>>;

export type IsTypeOfResolverFn<T = {}, TContext = {}> = (obj: T, context: TContext, info: GraphQLResolveInfo) => boolean | Promise<boolean>;

export type NextResolverFn<T> = () => Promise<T>;

export type DirectiveResolverFn<TResult = {}, TParent = {}, TContext = {}, TArgs = {}> = (
  next: NextResolverFn<TResult>,
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => TResult | Promise<TResult>;

/** Mapping between all available schema types and the resolvers types */
export type ResolversTypes = {
  Analytics: ResolverTypeWrapper<Analytics>;
  String: ResolverTypeWrapper<Scalars['String']>;
  Author: ResolverTypeWrapper<Author>;
  Int: ResolverTypeWrapper<Scalars['Int']>;
  Boolean: ResolverTypeWrapper<Scalars['Boolean']>;
  AuthorNotFoundError: ResolverTypeWrapper<AuthorNotFoundError>;
  AuthorResponse: ResolverTypeWrapper<AuthorResponse>;
  CreateAuthorError: ResolverTypeWrapper<CreateAuthorError>;
  CreateAuthorResponse: ResolversTypes['Author'] | ResolversTypes['CreateAuthorError'];
  CreateDomainResponse: ResolversTypes['Domain'] | ResolversTypes['DomainError'];
  CreatePostResponse: ResolversTypes['Post'] | ResolversTypes['PostError'];
  Date: ResolverTypeWrapper<Scalars['Date']>;
  DeleteTagsResponse: ResolversTypes['DeleteTagsResult'] | ResolversTypes['TagsError'];
  DeleteTagsResult: ResolverTypeWrapper<DeleteTagsResult>;
  Domain: ResolverTypeWrapper<Domain>;
  DomainError: ResolverTypeWrapper<DomainError>;
  DomainNotFound: ResolverTypeWrapper<DomainNotFound>;
  DomainResponse: ResolversTypes['Domain'] | ResolversTypes['DomainNotFound'];
  EditTaxResponse: ResolverTypeWrapper<EditTaxResponse>;
  Email: ResolverTypeWrapper<Email>;
  EmailError: ResolverTypeWrapper<EmailError>;
  EmailResponse: ResolversTypes['Email'] | ResolversTypes['EmailError'];
  Error: ResolverTypeWrapper<Error>;
  ForgotPasswordResponse: ResolverTypeWrapper<ForgotPasswordResponse>;
  Image: ResolverTypeWrapper<Image>;
  InputAnalytics: InputAnalytics;
  InputAuthor: InputAuthor;
  InputCreateAuthor: InputCreateAuthor;
  InputCreatePost: InputCreatePost;
  InputDomain: InputDomain;
  InputImage: InputImage;
  InputNavigation: InputNavigation;
  InputSocial: InputSocial;
  InputTags: InputTags;
  InputUpdateMedia: InputUpdateMedia;
  InputUpdatePost: InputUpdatePost;
  InputUpdateSubscriber: InputUpdateSubscriber;
  LetterpadError: ResolversTypes['AuthorNotFoundError'] | ResolversTypes['CreateAuthorError'] | ResolversTypes['DomainError'] | ResolversTypes['DomainNotFound'] | ResolversTypes['EmailError'] | ResolversTypes['LoginError'] | ResolversTypes['MediaError'] | ResolversTypes['PostError'] | ResolversTypes['SettingError'] | ResolversTypes['StatsError'] | ResolversTypes['TagResultError'] | ResolversTypes['TagsError'];
  LoginData: LoginData;
  LoginError: ResolverTypeWrapper<LoginError>;
  LoginResponse: ResolversTypes['Author'] | ResolversTypes['LoginError'];
  MeResponse: ResolversTypes['Author'] | ResolversTypes['AuthorNotFoundError'];
  Media: ResolverTypeWrapper<Media>;
  MediaDeleteResponse: ResolversTypes['MediaDeleteResult'] | ResolversTypes['MediaError'];
  MediaDeleteResult: ResolverTypeWrapper<MediaDeleteResult>;
  MediaError: ResolverTypeWrapper<MediaError>;
  MediaFilters: MediaFilters;
  MediaNode: ResolverTypeWrapper<MediaNode>;
  MediaUpdateResponse: ResolversTypes['MediaUpdateResult'] | ResolversTypes['MediaError'];
  MediaUpdateResult: ResolverTypeWrapper<MediaUpdateResult>;
  Mutation: ResolverTypeWrapper<{}>;
  Navigation: ResolverTypeWrapper<Navigation>;
  NavigationType: NavigationType;
  Permissions: Permissions;
  Post: ResolverTypeWrapper<Post>;
  PostCountsByStatus: ResolverTypeWrapper<PostCountsByStatus>;
  PostError: ResolverTypeWrapper<PostError>;
  PostFilters: PostFilters;
  PostResponse: ResolversTypes['Post'] | ResolversTypes['PostError'];
  PostStatusOptions: PostStatusOptions;
  PostTypes: PostTypes;
  PostsFilters: PostsFilters;
  PostsNode: ResolverTypeWrapper<PostsNode>;
  PostsResponse: ResolversTypes['PostsNode'] | ResolversTypes['PostError'];
  Query: ResolverTypeWrapper<{}>;
  RemoveDomainResponse: ResolverTypeWrapper<RemoveDomainResponse>;
  Response: ResolverTypeWrapper<Response>;
  Role: Role;
  Setting: ResolverTypeWrapper<Setting>;
  SettingError: ResolverTypeWrapper<SettingError>;
  SettingInputType: SettingInputType;
  SettingResponse: ResolversTypes['Setting'] | ResolversTypes['SettingError'];
  Social: ResolverTypeWrapper<Social>;
  SortBy: SortBy;
  Stats: ResolverTypeWrapper<Stats>;
  StatsError: ResolverTypeWrapper<StatsError>;
  StatsResponse: ResolversTypes['Stats'] | ResolversTypes['StatsError'];
  Subscribers: ResolverTypeWrapper<Subscribers>;
  SubscribersAddResult: ResolverTypeWrapper<SubscribersAddResult>;
  SubscribersNode: ResolverTypeWrapper<SubscribersNode>;
  SubscribersUpdateResult: ResolverTypeWrapper<SubscribersUpdateResult>;
  TagResponse: ResolversTypes['TagResultError'] | ResolversTypes['Tags'];
  TagResultError: ResolverTypeWrapper<TagResultError>;
  Tags: ResolverTypeWrapper<Omit<Tags, 'posts'> & { posts?: Maybe<ResolversTypes['PostsResponse']> }>;
  TagsError: ResolverTypeWrapper<TagsError>;
  TagsFilters: TagsFilters;
  TagsInputType: TagsInputType;
  TagsNode: ResolverTypeWrapper<TagsNode>;
  TagsResponse: ResolversTypes['TagsNode'] | ResolversTypes['TagsError'];
  UpdateDomainResponse: ResolverTypeWrapper<UpdateDomainResponse>;
  UpdatePostResponse: ResolversTypes['Post'] | ResolversTypes['PostError'];
  UpdateTagsResponse: ResolversTypes['EditTaxResponse'] | ResolversTypes['TagsError'];
};

/** Mapping between all available schema types and the resolvers parents */
export type ResolversParentTypes = {
  Analytics: Analytics;
  String: Scalars['String'];
  Author: Author;
  Int: Scalars['Int'];
  Boolean: Scalars['Boolean'];
  AuthorNotFoundError: AuthorNotFoundError;
  AuthorResponse: AuthorResponse;
  CreateAuthorError: CreateAuthorError;
  CreateAuthorResponse: ResolversParentTypes['Author'] | ResolversParentTypes['CreateAuthorError'];
  CreateDomainResponse: ResolversParentTypes['Domain'] | ResolversParentTypes['DomainError'];
  CreatePostResponse: ResolversParentTypes['Post'] | ResolversParentTypes['PostError'];
  Date: Scalars['Date'];
  DeleteTagsResponse: ResolversParentTypes['DeleteTagsResult'] | ResolversParentTypes['TagsError'];
  DeleteTagsResult: DeleteTagsResult;
  Domain: Domain;
  DomainError: DomainError;
  DomainNotFound: DomainNotFound;
  DomainResponse: ResolversParentTypes['Domain'] | ResolversParentTypes['DomainNotFound'];
  EditTaxResponse: EditTaxResponse;
  Email: Email;
  EmailError: EmailError;
  EmailResponse: ResolversParentTypes['Email'] | ResolversParentTypes['EmailError'];
  Error: Error;
  ForgotPasswordResponse: ForgotPasswordResponse;
  Image: Image;
  InputAnalytics: InputAnalytics;
  InputAuthor: InputAuthor;
  InputCreateAuthor: InputCreateAuthor;
  InputCreatePost: InputCreatePost;
  InputDomain: InputDomain;
  InputImage: InputImage;
  InputNavigation: InputNavigation;
  InputSocial: InputSocial;
  InputTags: InputTags;
  InputUpdateMedia: InputUpdateMedia;
  InputUpdatePost: InputUpdatePost;
  InputUpdateSubscriber: InputUpdateSubscriber;
  LetterpadError: ResolversParentTypes['AuthorNotFoundError'] | ResolversParentTypes['CreateAuthorError'] | ResolversParentTypes['DomainError'] | ResolversParentTypes['DomainNotFound'] | ResolversParentTypes['EmailError'] | ResolversParentTypes['LoginError'] | ResolversParentTypes['MediaError'] | ResolversParentTypes['PostError'] | ResolversParentTypes['SettingError'] | ResolversParentTypes['StatsError'] | ResolversParentTypes['TagResultError'] | ResolversParentTypes['TagsError'];
  LoginData: LoginData;
  LoginError: LoginError;
  LoginResponse: ResolversParentTypes['Author'] | ResolversParentTypes['LoginError'];
  MeResponse: ResolversParentTypes['Author'] | ResolversParentTypes['AuthorNotFoundError'];
  Media: Media;
  MediaDeleteResponse: ResolversParentTypes['MediaDeleteResult'] | ResolversParentTypes['MediaError'];
  MediaDeleteResult: MediaDeleteResult;
  MediaError: MediaError;
  MediaFilters: MediaFilters;
  MediaNode: MediaNode;
  MediaUpdateResponse: ResolversParentTypes['MediaUpdateResult'] | ResolversParentTypes['MediaError'];
  MediaUpdateResult: MediaUpdateResult;
  Mutation: {};
  Navigation: Navigation;
  Post: Post;
  PostCountsByStatus: PostCountsByStatus;
  PostError: PostError;
  PostFilters: PostFilters;
  PostResponse: ResolversParentTypes['Post'] | ResolversParentTypes['PostError'];
  PostsFilters: PostsFilters;
  PostsNode: PostsNode;
  PostsResponse: ResolversParentTypes['PostsNode'] | ResolversParentTypes['PostError'];
  Query: {};
  RemoveDomainResponse: RemoveDomainResponse;
  Response: Response;
  Setting: Setting;
  SettingError: SettingError;
  SettingInputType: SettingInputType;
  SettingResponse: ResolversParentTypes['Setting'] | ResolversParentTypes['SettingError'];
  Social: Social;
  Stats: Stats;
  StatsError: StatsError;
  StatsResponse: ResolversParentTypes['Stats'] | ResolversParentTypes['StatsError'];
  Subscribers: Subscribers;
  SubscribersAddResult: SubscribersAddResult;
  SubscribersNode: SubscribersNode;
  SubscribersUpdateResult: SubscribersUpdateResult;
  TagResponse: ResolversParentTypes['TagResultError'] | ResolversParentTypes['Tags'];
  TagResultError: TagResultError;
  Tags: Omit<Tags, 'posts'> & { posts?: Maybe<ResolversParentTypes['PostsResponse']> };
  TagsError: TagsError;
  TagsFilters: TagsFilters;
  TagsInputType: TagsInputType;
  TagsNode: TagsNode;
  TagsResponse: ResolversParentTypes['TagsNode'] | ResolversParentTypes['TagsError'];
  UpdateDomainResponse: UpdateDomainResponse;
  UpdatePostResponse: ResolversParentTypes['Post'] | ResolversParentTypes['PostError'];
  UpdateTagsResponse: ResolversParentTypes['EditTaxResponse'] | ResolversParentTypes['TagsError'];
};

export type AnalyticsResolvers<ContextType = any, ParentType extends ResolversParentTypes['Analytics'] = ResolversParentTypes['Analytics']> = {
  google_analytics?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  umami_id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  simple_analytics?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  plausible_data_domain?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AuthorResolvers<ContextType = any, ParentType extends ResolversParentTypes['Author'] = ResolversParentTypes['Author']> = {
  id?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  email?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  username?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  social?: Resolver<Maybe<ResolversTypes['Social']>, ParentType, ContextType>;
  bio?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  occupation?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  company_name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  role?: Resolver<Maybe<ResolversTypes['Role']>, ParentType, ContextType>;
  permissions?: Resolver<Maybe<Array<ResolversTypes['Permissions']>>, ParentType, ContextType>;
  avatar?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  verified?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  accessToken?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  analytics_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  analytics_uuid?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AuthorNotFoundErrorResolvers<ContextType = any, ParentType extends ResolversParentTypes['AuthorNotFoundError'] = ResolversParentTypes['AuthorNotFoundError']> = {
  message?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AuthorResponseResolvers<ContextType = any, ParentType extends ResolversParentTypes['AuthorResponse'] = ResolversParentTypes['AuthorResponse']> = {
  ok?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  errors?: Resolver<Maybe<Array<Maybe<ResolversTypes['Error']>>>, ParentType, ContextType>;
  data?: Resolver<Maybe<ResolversTypes['Author']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CreateAuthorErrorResolvers<ContextType = any, ParentType extends ResolversParentTypes['CreateAuthorError'] = ResolversParentTypes['CreateAuthorError']> = {
  message?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CreateAuthorResponseResolvers<ContextType = any, ParentType extends ResolversParentTypes['CreateAuthorResponse'] = ResolversParentTypes['CreateAuthorResponse']> = {
  __resolveType: TypeResolveFn<'Author' | 'CreateAuthorError', ParentType, ContextType>;
};

export type CreateDomainResponseResolvers<ContextType = any, ParentType extends ResolversParentTypes['CreateDomainResponse'] = ResolversParentTypes['CreateDomainResponse']> = {
  __resolveType: TypeResolveFn<'Domain' | 'DomainError', ParentType, ContextType>;
};

export type CreatePostResponseResolvers<ContextType = any, ParentType extends ResolversParentTypes['CreatePostResponse'] = ResolversParentTypes['CreatePostResponse']> = {
  __resolveType: TypeResolveFn<'Post' | 'PostError', ParentType, ContextType>;
};

export interface DateScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['Date'], any> {
  name: 'Date';
}

export type DeleteTagsResponseResolvers<ContextType = any, ParentType extends ResolversParentTypes['DeleteTagsResponse'] = ResolversParentTypes['DeleteTagsResponse']> = {
  __resolveType: TypeResolveFn<'DeleteTagsResult' | 'TagsError', ParentType, ContextType>;
};

export type DeleteTagsResultResolvers<ContextType = any, ParentType extends ResolversParentTypes['DeleteTagsResult'] = ResolversParentTypes['DeleteTagsResult']> = {
  ok?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type DomainResolvers<ContextType = any, ParentType extends ResolversParentTypes['Domain'] = ResolversParentTypes['Domain']> = {
  id?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  mapped?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  ssl?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type DomainErrorResolvers<ContextType = any, ParentType extends ResolversParentTypes['DomainError'] = ResolversParentTypes['DomainError']> = {
  message?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type DomainNotFoundResolvers<ContextType = any, ParentType extends ResolversParentTypes['DomainNotFound'] = ResolversParentTypes['DomainNotFound']> = {
  message?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type DomainResponseResolvers<ContextType = any, ParentType extends ResolversParentTypes['DomainResponse'] = ResolversParentTypes['DomainResponse']> = {
  __resolveType: TypeResolveFn<'Domain' | 'DomainNotFound', ParentType, ContextType>;
};

export type EditTaxResponseResolvers<ContextType = any, ParentType extends ResolversParentTypes['EditTaxResponse'] = ResolversParentTypes['EditTaxResponse']> = {
  ok?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type EmailResolvers<ContextType = any, ParentType extends ResolversParentTypes['Email'] = ResolversParentTypes['Email']> = {
  template_id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  body?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  subject?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type EmailErrorResolvers<ContextType = any, ParentType extends ResolversParentTypes['EmailError'] = ResolversParentTypes['EmailError']> = {
  message?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type EmailResponseResolvers<ContextType = any, ParentType extends ResolversParentTypes['EmailResponse'] = ResolversParentTypes['EmailResponse']> = {
  __resolveType: TypeResolveFn<'Email' | 'EmailError', ParentType, ContextType>;
};

export type ErrorResolvers<ContextType = any, ParentType extends ResolversParentTypes['Error'] = ResolversParentTypes['Error']> = {
  path?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  message?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ForgotPasswordResponseResolvers<ContextType = any, ParentType extends ResolversParentTypes['ForgotPasswordResponse'] = ResolversParentTypes['ForgotPasswordResponse']> = {
  ok?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  message?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ImageResolvers<ContextType = any, ParentType extends ResolversParentTypes['Image'] = ResolversParentTypes['Image']> = {
  src?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  width?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  height?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type LetterpadErrorResolvers<ContextType = any, ParentType extends ResolversParentTypes['LetterpadError'] = ResolversParentTypes['LetterpadError']> = {
  __resolveType: TypeResolveFn<'AuthorNotFoundError' | 'CreateAuthorError' | 'DomainError' | 'DomainNotFound' | 'EmailError' | 'LoginError' | 'MediaError' | 'PostError' | 'SettingError' | 'StatsError' | 'TagResultError' | 'TagsError', ParentType, ContextType>;
  message?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
};

export type LoginErrorResolvers<ContextType = any, ParentType extends ResolversParentTypes['LoginError'] = ResolversParentTypes['LoginError']> = {
  message?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type LoginResponseResolvers<ContextType = any, ParentType extends ResolversParentTypes['LoginResponse'] = ResolversParentTypes['LoginResponse']> = {
  __resolveType: TypeResolveFn<'Author' | 'LoginError', ParentType, ContextType>;
};

export type MeResponseResolvers<ContextType = any, ParentType extends ResolversParentTypes['MeResponse'] = ResolversParentTypes['MeResponse']> = {
  __resolveType: TypeResolveFn<'Author' | 'AuthorNotFoundError', ParentType, ContextType>;
};

export type MediaResolvers<ContextType = any, ParentType extends ResolversParentTypes['Media'] = ResolversParentTypes['Media']> = {
  id?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  authorId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['Date'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  width?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  height?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type MediaDeleteResponseResolvers<ContextType = any, ParentType extends ResolversParentTypes['MediaDeleteResponse'] = ResolversParentTypes['MediaDeleteResponse']> = {
  __resolveType: TypeResolveFn<'MediaDeleteResult' | 'MediaError', ParentType, ContextType>;
};

export type MediaDeleteResultResolvers<ContextType = any, ParentType extends ResolversParentTypes['MediaDeleteResult'] = ResolversParentTypes['MediaDeleteResult']> = {
  ok?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type MediaErrorResolvers<ContextType = any, ParentType extends ResolversParentTypes['MediaError'] = ResolversParentTypes['MediaError']> = {
  message?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type MediaNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['MediaNode'] = ResolversParentTypes['MediaNode']> = {
  count?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  rows?: Resolver<Array<ResolversTypes['Media']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type MediaUpdateResponseResolvers<ContextType = any, ParentType extends ResolversParentTypes['MediaUpdateResponse'] = ResolversParentTypes['MediaUpdateResponse']> = {
  __resolveType: TypeResolveFn<'MediaUpdateResult' | 'MediaError', ParentType, ContextType>;
};

export type MediaUpdateResultResolvers<ContextType = any, ParentType extends ResolversParentTypes['MediaUpdateResult'] = ResolversParentTypes['MediaUpdateResult']> = {
  ok?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type MutationResolvers<ContextType = any, ParentType extends ResolversParentTypes['Mutation'] = ResolversParentTypes['Mutation']> = {
  addSubscriber?: Resolver<Maybe<ResolversTypes['SubscribersAddResult']>, ParentType, ContextType, RequireFields<MutationAddSubscriberArgs, 'email'>>;
  createAuthor?: Resolver<Maybe<ResolversTypes['CreateAuthorResponse']>, ParentType, ContextType, RequireFields<MutationCreateAuthorArgs, 'data'>>;
  createOrUpdateDomain?: Resolver<ResolversTypes['UpdateDomainResponse'], ParentType, ContextType, RequireFields<MutationCreateOrUpdateDomainArgs, 'data'>>;
  createPost?: Resolver<ResolversTypes['CreatePostResponse'], ParentType, ContextType, RequireFields<MutationCreatePostArgs, never>>;
  deleteMedia?: Resolver<Maybe<ResolversTypes['MediaDeleteResponse']>, ParentType, ContextType, RequireFields<MutationDeleteMediaArgs, 'ids'>>;
  deleteTags?: Resolver<ResolversTypes['DeleteTagsResponse'], ParentType, ContextType, RequireFields<MutationDeleteTagsArgs, 'name'>>;
  forgotPassword?: Resolver<ResolversTypes['ForgotPasswordResponse'], ParentType, ContextType, RequireFields<MutationForgotPasswordArgs, 'email'>>;
  login?: Resolver<Maybe<ResolversTypes['LoginResponse']>, ParentType, ContextType, RequireFields<MutationLoginArgs, never>>;
  removeDomain?: Resolver<ResolversTypes['RemoveDomainResponse'], ParentType, ContextType>;
  resetPassword?: Resolver<ResolversTypes['ForgotPasswordResponse'], ParentType, ContextType, RequireFields<MutationResetPasswordArgs, 'password' | 'token'>>;
  updateAuthor?: Resolver<Maybe<ResolversTypes['AuthorResponse']>, ParentType, ContextType, RequireFields<MutationUpdateAuthorArgs, 'author'>>;
  updateMedia?: Resolver<Maybe<ResolversTypes['MediaUpdateResponse']>, ParentType, ContextType, RequireFields<MutationUpdateMediaArgs, 'data'>>;
  updateOptions?: Resolver<Maybe<ResolversTypes['SettingResponse']>, ParentType, ContextType, RequireFields<MutationUpdateOptionsArgs, 'options'>>;
  updatePost?: Resolver<ResolversTypes['UpdatePostResponse'], ParentType, ContextType, RequireFields<MutationUpdatePostArgs, never>>;
  updateSubscriber?: Resolver<ResolversTypes['SubscribersUpdateResult'], ParentType, ContextType, RequireFields<MutationUpdateSubscriberArgs, 'data'>>;
  updateTags?: Resolver<ResolversTypes['UpdateTagsResponse'], ParentType, ContextType, RequireFields<MutationUpdateTagsArgs, never>>;
};

export type NavigationResolvers<ContextType = any, ParentType extends ResolversParentTypes['Navigation'] = ResolversParentTypes['Navigation']> = {
  type?: Resolver<ResolversTypes['NavigationType'], ParentType, ContextType>;
  slug?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  original_name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  label?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type PostResolvers<ContextType = any, ParentType extends ResolversParentTypes['Post'] = ResolversParentTypes['Post']> = {
  id?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  html?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  html_draft?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  author?: Resolver<Maybe<ResolversTypes['Author']>, ParentType, ContextType>;
  excerpt?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  cover_image?: Resolver<ResolversTypes['Image'], ParentType, ContextType>;
  type?: Resolver<ResolversTypes['PostTypes'], ParentType, ContextType>;
  status?: Resolver<ResolversTypes['PostStatusOptions'], ParentType, ContextType>;
  featured?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  slug?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['Date'], ParentType, ContextType>;
  publishedAt?: Resolver<Maybe<ResolversTypes['Date']>, ParentType, ContextType>;
  scheduledAt?: Resolver<Maybe<ResolversTypes['Date']>, ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['Date'], ParentType, ContextType>;
  reading_time?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  tags?: Resolver<Maybe<Array<ResolversTypes['Tags']>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type PostCountsByStatusResolvers<ContextType = any, ParentType extends ResolversParentTypes['PostCountsByStatus'] = ResolversParentTypes['PostCountsByStatus']> = {
  published?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  drafts?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type PostErrorResolvers<ContextType = any, ParentType extends ResolversParentTypes['PostError'] = ResolversParentTypes['PostError']> = {
  message?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type PostResponseResolvers<ContextType = any, ParentType extends ResolversParentTypes['PostResponse'] = ResolversParentTypes['PostResponse']> = {
  __resolveType: TypeResolveFn<'Post' | 'PostError', ParentType, ContextType>;
};

export type PostsNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['PostsNode'] = ResolversParentTypes['PostsNode']> = {
  count?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  rows?: Resolver<Array<ResolversTypes['Post']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type PostsResponseResolvers<ContextType = any, ParentType extends ResolversParentTypes['PostsResponse'] = ResolversParentTypes['PostsResponse']> = {
  __resolveType: TypeResolveFn<'PostsNode' | 'PostError', ParentType, ContextType>;
};

export type QueryResolvers<ContextType = any, ParentType extends ResolversParentTypes['Query'] = ResolversParentTypes['Query']> = {
  domain?: Resolver<ResolversTypes['DomainResponse'], ParentType, ContextType>;
  email?: Resolver<ResolversTypes['EmailResponse'], ParentType, ContextType, RequireFields<QueryEmailArgs, never>>;
  emails?: Resolver<Array<Maybe<ResolversTypes['Email']>>, ParentType, ContextType>;
  me?: Resolver<Maybe<ResolversTypes['MeResponse']>, ParentType, ContextType>;
  media?: Resolver<ResolversTypes['MediaNode'], ParentType, ContextType, RequireFields<QueryMediaArgs, never>>;
  post?: Resolver<ResolversTypes['PostResponse'], ParentType, ContextType, RequireFields<QueryPostArgs, never>>;
  posts?: Resolver<ResolversTypes['PostsResponse'], ParentType, ContextType, RequireFields<QueryPostsArgs, never>>;
  settings?: Resolver<ResolversTypes['SettingResponse'], ParentType, ContextType>;
  stats?: Resolver<Maybe<ResolversTypes['StatsResponse']>, ParentType, ContextType>;
  subscribers?: Resolver<ResolversTypes['SubscribersNode'], ParentType, ContextType, RequireFields<QuerySubscribersArgs, never>>;
  tag?: Resolver<ResolversTypes['TagResponse'], ParentType, ContextType, RequireFields<QueryTagArgs, 'slug'>>;
  tags?: Resolver<ResolversTypes['TagsResponse'], ParentType, ContextType, RequireFields<QueryTagsArgs, never>>;
};

export type RemoveDomainResponseResolvers<ContextType = any, ParentType extends ResolversParentTypes['RemoveDomainResponse'] = ResolversParentTypes['RemoveDomainResponse']> = {
  ok?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  message?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ResponseResolvers<ContextType = any, ParentType extends ResolversParentTypes['Response'] = ResolversParentTypes['Response']> = {
  ok?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  post?: Resolver<Maybe<ResolversTypes['Post']>, ParentType, ContextType>;
  errors?: Resolver<Maybe<Array<ResolversTypes['Error']>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SettingResolvers<ContextType = any, ParentType extends ResolversParentTypes['Setting'] = ResolversParentTypes['Setting']> = {
  id?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  site_title?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  site_tagline?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  site_email?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  site_url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  site_footer?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  site_description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  subscribe_embed?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  social_twitter?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  social_facebook?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  social_instagram?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  social_github?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  display_author_info?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  intro_dismissed?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  show_about_page?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  show_tags_page?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  cloudinary_key?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  cloudinary_name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  cloudinary_secret?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  menu?: Resolver<Array<ResolversTypes['Navigation']>, ParentType, ContextType>;
  css?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  google_analytics?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  analytics?: Resolver<Maybe<ResolversTypes['Analytics']>, ParentType, ContextType>;
  theme?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  banner?: Resolver<Maybe<ResolversTypes['Image']>, ParentType, ContextType>;
  site_logo?: Resolver<Maybe<ResolversTypes['Image']>, ParentType, ContextType>;
  site_favicon?: Resolver<Maybe<ResolversTypes['Image']>, ParentType, ContextType>;
  client_token?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SettingErrorResolvers<ContextType = any, ParentType extends ResolversParentTypes['SettingError'] = ResolversParentTypes['SettingError']> = {
  message?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SettingResponseResolvers<ContextType = any, ParentType extends ResolversParentTypes['SettingResponse'] = ResolversParentTypes['SettingResponse']> = {
  __resolveType: TypeResolveFn<'Setting' | 'SettingError', ParentType, ContextType>;
};

export type SocialResolvers<ContextType = any, ParentType extends ResolversParentTypes['Social'] = ResolversParentTypes['Social']> = {
  twitter?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  facebook?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  github?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  instagram?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  linkedin?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type StatsResolvers<ContextType = any, ParentType extends ResolversParentTypes['Stats'] = ResolversParentTypes['Stats']> = {
  posts?: Resolver<ResolversTypes['PostCountsByStatus'], ParentType, ContextType>;
  pages?: Resolver<ResolversTypes['PostCountsByStatus'], ParentType, ContextType>;
  tags?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  media?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type StatsErrorResolvers<ContextType = any, ParentType extends ResolversParentTypes['StatsError'] = ResolversParentTypes['StatsError']> = {
  message?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type StatsResponseResolvers<ContextType = any, ParentType extends ResolversParentTypes['StatsResponse'] = ResolversParentTypes['StatsResponse']> = {
  __resolveType: TypeResolveFn<'Stats' | 'StatsError', ParentType, ContextType>;
};

export type SubscribersResolvers<ContextType = any, ParentType extends ResolversParentTypes['Subscribers'] = ResolversParentTypes['Subscribers']> = {
  id?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  email?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  author_id?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  verified?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['Date'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SubscribersAddResultResolvers<ContextType = any, ParentType extends ResolversParentTypes['SubscribersAddResult'] = ResolversParentTypes['SubscribersAddResult']> = {
  ok?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  message?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SubscribersNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['SubscribersNode'] = ResolversParentTypes['SubscribersNode']> = {
  count?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  rows?: Resolver<Array<ResolversTypes['Subscribers']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SubscribersUpdateResultResolvers<ContextType = any, ParentType extends ResolversParentTypes['SubscribersUpdateResult'] = ResolversParentTypes['SubscribersUpdateResult']> = {
  ok?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  message?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type TagResponseResolvers<ContextType = any, ParentType extends ResolversParentTypes['TagResponse'] = ResolversParentTypes['TagResponse']> = {
  __resolveType: TypeResolveFn<'TagResultError' | 'Tags', ParentType, ContextType>;
};

export type TagResultErrorResolvers<ContextType = any, ParentType extends ResolversParentTypes['TagResultError'] = ResolversParentTypes['TagResultError']> = {
  message?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type TagsResolvers<ContextType = any, ParentType extends ResolversParentTypes['Tags'] = ResolversParentTypes['Tags']> = {
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  slug?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  posts?: Resolver<Maybe<ResolversTypes['PostsResponse']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type TagsErrorResolvers<ContextType = any, ParentType extends ResolversParentTypes['TagsError'] = ResolversParentTypes['TagsError']> = {
  message?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type TagsNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['TagsNode'] = ResolversParentTypes['TagsNode']> = {
  rows?: Resolver<Array<ResolversTypes['Tags']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type TagsResponseResolvers<ContextType = any, ParentType extends ResolversParentTypes['TagsResponse'] = ResolversParentTypes['TagsResponse']> = {
  __resolveType: TypeResolveFn<'TagsNode' | 'TagsError', ParentType, ContextType>;
};

export type UpdateDomainResponseResolvers<ContextType = any, ParentType extends ResolversParentTypes['UpdateDomainResponse'] = ResolversParentTypes['UpdateDomainResponse']> = {
  ok?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  message?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type UpdatePostResponseResolvers<ContextType = any, ParentType extends ResolversParentTypes['UpdatePostResponse'] = ResolversParentTypes['UpdatePostResponse']> = {
  __resolveType: TypeResolveFn<'Post' | 'PostError', ParentType, ContextType>;
};

export type UpdateTagsResponseResolvers<ContextType = any, ParentType extends ResolversParentTypes['UpdateTagsResponse'] = ResolversParentTypes['UpdateTagsResponse']> = {
  __resolveType: TypeResolveFn<'EditTaxResponse' | 'TagsError', ParentType, ContextType>;
};

export type Resolvers<ContextType = any> = {
  Analytics?: AnalyticsResolvers<ContextType>;
  Author?: AuthorResolvers<ContextType>;
  AuthorNotFoundError?: AuthorNotFoundErrorResolvers<ContextType>;
  AuthorResponse?: AuthorResponseResolvers<ContextType>;
  CreateAuthorError?: CreateAuthorErrorResolvers<ContextType>;
  CreateAuthorResponse?: CreateAuthorResponseResolvers<ContextType>;
  CreateDomainResponse?: CreateDomainResponseResolvers<ContextType>;
  CreatePostResponse?: CreatePostResponseResolvers<ContextType>;
  Date?: GraphQLScalarType;
  DeleteTagsResponse?: DeleteTagsResponseResolvers<ContextType>;
  DeleteTagsResult?: DeleteTagsResultResolvers<ContextType>;
  Domain?: DomainResolvers<ContextType>;
  DomainError?: DomainErrorResolvers<ContextType>;
  DomainNotFound?: DomainNotFoundResolvers<ContextType>;
  DomainResponse?: DomainResponseResolvers<ContextType>;
  EditTaxResponse?: EditTaxResponseResolvers<ContextType>;
  Email?: EmailResolvers<ContextType>;
  EmailError?: EmailErrorResolvers<ContextType>;
  EmailResponse?: EmailResponseResolvers<ContextType>;
  Error?: ErrorResolvers<ContextType>;
  ForgotPasswordResponse?: ForgotPasswordResponseResolvers<ContextType>;
  Image?: ImageResolvers<ContextType>;
  LetterpadError?: LetterpadErrorResolvers<ContextType>;
  LoginError?: LoginErrorResolvers<ContextType>;
  LoginResponse?: LoginResponseResolvers<ContextType>;
  MeResponse?: MeResponseResolvers<ContextType>;
  Media?: MediaResolvers<ContextType>;
  MediaDeleteResponse?: MediaDeleteResponseResolvers<ContextType>;
  MediaDeleteResult?: MediaDeleteResultResolvers<ContextType>;
  MediaError?: MediaErrorResolvers<ContextType>;
  MediaNode?: MediaNodeResolvers<ContextType>;
  MediaUpdateResponse?: MediaUpdateResponseResolvers<ContextType>;
  MediaUpdateResult?: MediaUpdateResultResolvers<ContextType>;
  Mutation?: MutationResolvers<ContextType>;
  Navigation?: NavigationResolvers<ContextType>;
  Post?: PostResolvers<ContextType>;
  PostCountsByStatus?: PostCountsByStatusResolvers<ContextType>;
  PostError?: PostErrorResolvers<ContextType>;
  PostResponse?: PostResponseResolvers<ContextType>;
  PostsNode?: PostsNodeResolvers<ContextType>;
  PostsResponse?: PostsResponseResolvers<ContextType>;
  Query?: QueryResolvers<ContextType>;
  RemoveDomainResponse?: RemoveDomainResponseResolvers<ContextType>;
  Response?: ResponseResolvers<ContextType>;
  Setting?: SettingResolvers<ContextType>;
  SettingError?: SettingErrorResolvers<ContextType>;
  SettingResponse?: SettingResponseResolvers<ContextType>;
  Social?: SocialResolvers<ContextType>;
  Stats?: StatsResolvers<ContextType>;
  StatsError?: StatsErrorResolvers<ContextType>;
  StatsResponse?: StatsResponseResolvers<ContextType>;
  Subscribers?: SubscribersResolvers<ContextType>;
  SubscribersAddResult?: SubscribersAddResultResolvers<ContextType>;
  SubscribersNode?: SubscribersNodeResolvers<ContextType>;
  SubscribersUpdateResult?: SubscribersUpdateResultResolvers<ContextType>;
  TagResponse?: TagResponseResolvers<ContextType>;
  TagResultError?: TagResultErrorResolvers<ContextType>;
  Tags?: TagsResolvers<ContextType>;
  TagsError?: TagsErrorResolvers<ContextType>;
  TagsNode?: TagsNodeResolvers<ContextType>;
  TagsResponse?: TagsResponseResolvers<ContextType>;
  UpdateDomainResponse?: UpdateDomainResponseResolvers<ContextType>;
  UpdatePostResponse?: UpdatePostResponseResolvers<ContextType>;
  UpdateTagsResponse?: UpdateTagsResponseResolvers<ContextType>;
};


/**
 * @deprecated
 * Use "Resolvers" root object instead. If you wish to get "IResolvers", add "typesPrefix: I" to your config.
 */
export type IResolvers<ContextType = any> = Resolvers<ContextType>;
