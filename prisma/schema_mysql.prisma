generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Author {
  id                  Int          @id @default(autoincrement())
  name                String
  username            String       @unique
  email               String       @unique
  password            String
  bio                 String       @db.Text
  occupation          String       @db.VarChar(100)
  company_name          String     @db.VarChar(100)
  avatar              String       @db.VarChar(300)
  social              String       @db.VarChar(500) @default("{}")
  verified            Boolean      @default(false)
  createdAt           DateTime?    @default(now())
  updatedAt           DateTime?    @updatedAt
  verify_attempt_left Int?         @default(3)
  posts               Post[]
  uploads             Upload[]    
  // setting_id          Int          @unique
  setting             Setting?
  role_id             Int
  role                Role         @relation(fields: [role_id], references: [id])
  subscribers         Subscriber[]
  login_type          String       @default("credentials")
  last_seen           DateTime?
}

model EmailDelivery {
  id                    Int       @id @default(autoincrement())
  template_id           String?
  author_id             Int?
  post_id               Int?
  subscriber_id         Int?
  delivered             Int?
  last_delivery_attempt DateTime?
  createdAt             DateTime? @default(now())
  updatedAt             DateTime? @updatedAt
}

model Email {
  template_id String    @id @unique
  subject     String
  body        String    @db.VarChar(4000)
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
}

model Permission {
  id        Int               @id @default(autoincrement())
  name      String?           @unique
  createdAt DateTime?         @default(now())
  updatedAt DateTime?         @updatedAt
  roles     RolePermissions[]
}

model Post {
  id                 Int       @id @default(autoincrement())
  title              String    @default("")
  html               String    @db.Text
  html_draft         String?    @db.Text
  excerpt            String    @default("")
  cover_image        String    @db.VarChar(255) @default("")
  cover_image_width  Int       @default(0)
  cover_image_height Int       @default(0)
  type               String    @default("post")
  featured           Boolean  @default(false)
  status             String    @default("draft")
  slug               String    @default("")
  reading_time       String   @default("")
  publishedAt        DateTime?
  scheduledAt        DateTime?
  updatedAt          DateTime? @updatedAt
  createdAt          DateTime? @default(now())
  author_id          Int
  author             Author?    @relation(fields: [author_id], references: [id], onDelete: Cascade)
  tags               Tag[]
}

model RolePermissions {
  id            Int        @id @default(autoincrement())
  createdAt     DateTime?  @default(now())
  updatedAt     DateTime?  @updatedAt
  role_id       Int
  permission_id Int
  permission    Permission @relation(fields: [permission_id], references: [id], onDelete: Cascade)
  role          Role       @relation(fields: [role_id], references: [id], onDelete: Cascade)
}

model Role {
  id          Int               @id @default(autoincrement())
  name        String?           @unique
  createdAt   DateTime?         @default(now())
  updatedAt   DateTime?         @updatedAt
  permissions RolePermissions[]
  author      Author[]
}

model Setting {
  id                  Int       @id @default(autoincrement())
  site_title          String   
  site_tagline        String   
  site_email          String   
  site_url            String   
  site_footer         String   
  site_description    String   
  subscribe_embed     String   
  social_twitter      String   
  social_facebook     String   
  social_instagram    String   
  social_github       String   
  display_author_info Boolean  @default(false)
  cloudinary_key      String   
  cloudinary_name     String   
  cloudinary_secret   String   
  menu                String   @db.VarChar(500) @default("[]")
  css                 String   @db.VarChar(500)
  google_analytics    String   
  analytics           String   @db.VarChar(300) @default("{}")
  theme               String   
  client_token        String   
  banner              String    @db.VarChar(300) @default("{}")
  site_logo           String    @db.VarChar(300) @default("{}")
  site_favicon        String    @db.VarChar(300) @default("{}")
  createdAt           DateTime? @default(now())
  updatedAt           DateTime? @updatedAt
  graphcomment_id     String    @default("")
  intro_dismissed     Boolean
  show_about_page     Boolean   @default(true)
  show_tags_page      Boolean   @default(false)
  author_id           Int       @unique
  author              Author    @relation(fields: [author_id], references: [id], onDelete:Cascade)
}

model Subscriber {
  id                  Int       @id @default(autoincrement())
  email               String
  author_id           Int
  verified            Boolean   @default(false)
  createdAt           DateTime? @default(now())
  updatedAt           DateTime? @updatedAt
  verify_attempt_left Int?      @default(3)

  author   Author? @relation(fields: [author_id], references: [id],onDelete: Cascade)
  @@unique([email, author_id])

}

model Tag {
  name      String    @id @unique
  desc      String?   @default("")
  slug      String?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  posts     Post[]
}

model Upload {
  id          Int       @id @default(autoincrement())
  name        String
  url         String    
  width       Int
  height      Int
  description String    @default("")
  updatedAt   DateTime? @updatedAt
  createdAt   DateTime? @default(now())
  author_id   Int
  author      Author?   @relation(fields: [author_id], references: [id], onDelete: Cascade)
}

model SubscribersDelivery {
  id            Int       @id @default(autoincrement())
  subscriber_id String?
  post_id       Int
  delivered     Boolean
  createdAt     DateTime? @default(now())
  updatedAt     DateTime? @updatedAt
}
